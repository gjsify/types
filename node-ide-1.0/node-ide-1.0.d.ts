
/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/gjsify/ts-for-gjs
 */
/**
 * Ide-1.0
 */

import type Template from '@girs/node-template-1.0';
import type Gio from '@girs/node-gio-2.0';
import type GObject from '@girs/node-gobject-2.0';
import type GLib from '@girs/node-glib-2.0';
import type Peas from '@girs/node-peas-1.0';
import type GModule from '@girs/node-gmodule-2.0';
import type GIRepository from '@girs/node-girepository-2.0';
import type Json from '@girs/node-json-1.0';
import type GtkSource from '@girs/node-gtksource-3.0';
import type Gtk from '@girs/node-gtk-3.0';
import type xlib from '@girs/node-xlib-2.0';
import type Gdk from '@girs/node-gdk-3.0';
import type cairo from '@girs/node-cairo-1.0';
import type Pango from '@girs/node-pango-1.0';
import type HarfBuzz from '@girs/node-harfbuzz-0.0';
import type freetype2 from '@girs/node-freetype2-2.0';
import type GdkPixbuf from '@girs/node-gdkpixbuf-2.0';
import type Atk from '@girs/node-atk-1.0';
import type Dazzle from '@girs/node-dazzle-1.0';

export namespace Ide {

enum ApplicationMode {
    PRIMARY,
    WORKER,
    TOOL,
    TESTS,
}
enum BufferLineChange {
    NONE,
    ADDED,
    CHANGED,
    DELETED,
}
enum BuildLogStream {
    STDOUT,
    STDERR,
}
enum CursorType {
    COLUMN,
    SELECT,
    MATCH,
}
enum DeviceError {
    DEVICE,
}
enum DiagnosticSeverity {
    IGNORED,
    NOTE,
    DEPRECATED,
    WARNING,
    ERROR,
    FATAL,
}
enum DoapError {
    FORMAT,
}
enum HighlightResult {
    STOP,
    CONTINUE,
}
enum IndentStyle {
    SPACES,
    TABS,
}
/**
 * %IDE_LAYOUT_GRID_SPLIT_LEFT:
 * %IDE_LAYOUT_GRID_SPLIT_RIGHT:
 * %IDE_LAYOUT_GRID_SPLIT_MOVE_LEFT:
 * %IDE_LAYOUT_GRID_SPLIT_MOVE_RIGHT:
 */
enum LayoutGridSplit {
    LEFT,
    RIGHT,
    MOVE_LEFT,
    MOVE_RIGHT,
}
enum RuntimeError {
    RUNTIME,
}
/**
 * The type of keyboard mode.
 */
enum SourceViewModeType {
    TRANSIENT,
    PERMANENT,
    MODAL,
}
/**
 * The type of movement.
 * 
 * Some of these movements may be modified by using the modify-repeat action.
 * First adjust the repeat and then perform the "movement" action.
 */
enum SourceViewMovement {
    /**
     * move to previous character in the file.
     *   This includes line breaks.
     */
    PREVIOUS_OFFSET,
    /**
     * move to next character in the file.
     *   This includes line breaks.
     */
    NEXT_OFFSET,
    /**
     * move to nth character in line. Use a repeat to
     *   specify the target character within the line.
     */
    NTH_CHAR,
    /**
     * move to previous character in line.
     */
    PREVIOUS_CHAR,
    /**
     * move to next character in line.
     */
    NEXT_CHAR,
    /**
     * move to line offset of zero.
     */
    FIRST_CHAR,
    /**
     * move to first non-whitespace character in line.
     */
    FIRST_NONSPACE_CHAR,
    /**
     * move to the middle character in the line.
     */
    MIDDLE_CHAR,
    /**
     * move to the last character in the line. this can be
     *   inclusve or exclusive. inclusive is equivalent to %IDE_SOURCE_VIEW_MOVEMENT_LINE_END.
     */
    LAST_CHAR,
    /**
     * move to beginning of next word.
     */
    NEXT_WORD_START,
    NEXT_FULL_WORD_START,
    /**
     * move to the next sub-word start, similar
     *   to the default in GtkTextView. This includes the underline character as a word break,
     *   as is common in Emacs.
     */
    NEXT_SUB_WORD_START,
    /**
     * move to the previous sub-wird start,
     *   similar to the default in GtkTextView. This includes the underline character as a
     *   word break, as is common in Emacs.
     */
    PREVIOUS_SUB_WORD_START,
    /**
     * move to beginning of previous word.
     */
    PREVIOUS_WORD_START,
    PREVIOUS_FULL_WORD_START,
    /**
     * move to end of previous word.
     */
    PREVIOUS_WORD_END,
    PREVIOUS_FULL_WORD_END,
    /**
     * move to end of next word.
     */
    NEXT_WORD_END,
    NEXT_FULL_WORD_END,
    /**
     * move to beginning of sentance.
     */
    SENTENCE_START,
    /**
     * move to end of sentance.
     */
    SENTENCE_END,
    /**
     * move to start of paragraph.
     */
    PARAGRAPH_START,
    /**
     * move to end of paragraph.
     */
    PARAGRAPH_END,
    /**
     * move to previous line, keeping line offset if possible.
     */
    PREVIOUS_LINE,
    /**
     * move to next line, keeping line offset if possible.
     */
    NEXT_LINE,
    /**
     * move to first line in file, line offset of zero.
     */
    FIRST_LINE,
    /**
     * move to nth line, line offset of zero. use repeat to
     *   select the given line number.
     */
    NTH_LINE,
    /**
     * move to last line in file, with line offset of zero.
     */
    LAST_LINE,
    /**
     * move to line based on percentage. Use repeat to
     *   specify the percentage, 0 to 100.
     */
    LINE_PERCENTAGE,
    /**
     * special selection to select all line characters up to the
     *   cursor position. special care will be taken if the line is blank to select only the blank
     *   space if any. otherwise, the line break will be selected.
     */
    LINE_CHARS,
    /**
     * This will move you to the location of the newline at the
     *   end of the current line. It does not support exclusive will not select the newline, while
     *   inclusive will select the newline.
     */
    LINE_END,
    /**
     * move half a page up.
     */
    HALF_PAGE_UP,
    /**
     * move half a page down.
     */
    HALF_PAGE_DOWN,
    /**
     * move half a page left.
     */
    HALF_PAGE_LEFT,
    /**
     * move half a page right.
     */
    HALF_PAGE_RIGHT,
    /**
     * move a full page up.
     */
    PAGE_UP,
    /**
     * move a full page up, but extend to whole line.
     */
    PAGE_UP_LINES,
    /**
     * move a full page down.
     */
    PAGE_DOWN,
    /**
     * move a full page down, but extend to whole line.
     */
    PAGE_DOWN_LINES,
    /**
     * move to viewport up by visible line, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_UP,
    /**
     * move to viewport down by visible line, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_DOWN,
    /**
     * move to viewport left by visible char, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_LEFT,
    /**
     * move to viewport right by visible char, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_RIGHT,
    /**
     * move to the top of the screen.
     */
    SCREEN_TOP,
    /**
     * move to the middle of the screen.
     */
    SCREEN_MIDDLE,
    /**
     * move to the bottom of the screen.
     */
    SCREEN_BOTTOM,
    /**
     * move to match of brace, bracket, comment.
     */
    MATCH_SPECIAL,
    /**
     * scroll until insert cursor or [count]th line is at screen top.
     */
    SCROLL_SCREEN_TOP,
    /**
     * scroll until insert cursor or [count]th line is at screen center.
     */
    SCROLL_SCREEN_CENTER,
    /**
     * scroll until insert cursor or [count]th line is at screen bottom.
     */
    SCROLL_SCREEN_BOTTOM,
    /**
     * scroll until insert cursor or [count]th char is at screen left.
     */
    SCROLL_SCREEN_LEFT,
    /**
     * scroll until insert cursor or [count]th char is at screen right.
     */
    SCROLL_SCREEN_RIGHT,
    PREVIOUS_UNMATCHED_BRACE,
    NEXT_UNMATCHED_BRACE,
    PREVIOUS_UNMATCHED_PAREN,
    NEXT_UNMATCHED_PAREN,
    NEXT_MATCH_MODIFIER,
    PREVIOUS_MATCH_MODIFIER,
    /**
     * move to the next matching char according to f and t in vim.
     */
    NEXT_MATCH_SEARCH_CHAR,
    /**
     * move to the previous matching char according to F and T in vim.
     */
    PREVIOUS_MATCH_SEARCH_CHAR,
}
/**
 * The style of theatric.
 */
enum SourceViewTheatric {
    /**
     * expand from selection location.
     */
    EXPAND,
    /**
     * shrink from selection location.
     */
    SHRINK,
}
enum SymbolKind {
    NONE,
    ARRAY,
    BOOLEAN,
    CLASS,
    CONSTANT,
    CONSTRUCTOR,
    ENUM,
    ENUM_VALUE,
    FIELD,
    FILE,
    FUNCTION,
    HEADER,
    INTERFACE,
    METHOD,
    MODULE,
    NAMESPACE,
    NUMBER,
    PACKAGE,
    PROPERTY,
    SCALAR,
    STRING,
    STRUCT,
    UNION,
    VARIABLE,
    KEYWORD,
    UI_ATTRIBUTES,
    UI_CHILD,
    UI_ITEM,
    UI_MENU,
    UI_MENU_ATTRIBUTE,
    UI_OBJECT,
    UI_PACKING,
    UI_PROPERTY,
    UI_SECTION,
    UI_SIGNAL,
    UI_STYLE,
    UI_STYLE_CLASS,
    UI_SUBMENU,
    UI_TEMPLATE,
    XML_ATTRIBUTE,
    XML_DECLARATION,
    XML_ELEMENT,
    XML_COMMENT,
    XML_CDATA,
}
enum ThreadPoolKind {
    COMPILER,
    INDEXER,
    LAST,
}
enum TransferError {
    UNKNOWN,
    CONNECTION_IS_METERED,
}
/**
 * Error codes returned by #IdeUri methods.
 */
enum UriError {
    MISC,
    BAD_SCHEME,
    BAD_USER,
    BAD_PASSWORD,
    BAD_AUTH_PARAMS,
    BAD_HOST,
    BAD_PORT,
    BAD_PATH,
    BAD_QUERY,
    BAD_FRAGMENT,
}
enum VcsConfigType {
    FULL_NAME,
    EMAIL,
}
enum BufferLineFlags {
    NONE,
    ADDED,
    CHANGED,
    DELETED,
    ERROR,
    WARNING,
    NOTE,
}
enum BuildPhase {
    NONE,
    PREPARE,
    DOWNLOADS,
    DEPENDENCIES,
    AUTOGEN,
    CONFIGURE,
    BUILD,
    INSTALL,
    EXPORT,
    FINAL,
    BEFORE,
    AFTER,
    FINISHED,
    FAILED,
}
enum SymbolFlags {
    NONE,
    IS_STATIC,
    IS_MEMBER,
    IS_DEPRECATED,
}
/**
 * Flags that control how a URI string is parsed (or re-parsed).
 * @bitfield 
 */
enum UriParseFlags {
    /**
     * Parse the URI strictly according to the RFC
     *     3986 grammar.
     */
    STRICT,
    /**
     * Parse the URI according to the HTML5 web
     *     address parsing rules.
     */
    HTML5,
    /**
     * Disallow Internationalized URIs; return an
     *     error if the URI contains non-ASCII characters
     */
    NO_IRI,
    /**
     * Split the userinfo into user and password,
     *     separated by ':'.
     */
    PASSWORD,
    /**
     * Split the userinfo into user/password and
     *     parameters, separated by ';'.
     */
    AUTH_PARAMS,
    /**
     * Do not parse the host as a DNS host/IP address.
     *     (Eg, for smb URIs with NetBIOS hostnames).
     */
    NON_DNS,
    /**
     * Decode even reserved %<!-- -->encoded
     *     characters in the URI (unless this would result in non-UTF8
     *     strings). Using this flag means that you cannot reliably
     *     convert the parsed URI back to string form with
     *     ide_uri_to_string().
     */
    DECODED,
    /**
     * Return an error if non-UTF8 characters are
     *     encountered in the URI.
     */
    UTF8_ONLY,
}
enum UriToStringFlags {
    AUTH_PARAMS,
    FRAGMENT,
}
enum WorkbenchOpenFlags {
    NONE,
    BACKGROUND,
}
const BUFFER_LINE_FLAGS_DIAGNOSTICS_MASK: number
const BUILD_PHASE_MASK: number
const BUILD_PHASE_WHENCE_MASK: number
const ENABLE_TRACE: number
const FILE_SETTINGS_EXTENSION_POINT: string | null
const LANGSERV_COMPLETION_PROVIDER_PRIORITY: number
const PREFERENCES_PERSPECTIVE_PRIORITY: number
const RECENT_PROJECTS_BOOKMARK_FILENAME: string | null
const RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX: string | null
const RECENT_PROJECTS_GROUP: string | null
const RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX: string | null
/**
 * Asynchronously creates a new #IdeBuildSystem instance using the registered
 * #GIOExtensionPoint system. Each extension point will be tried asynchronously
 * by priority until one has been found that supports `project_file`.
 * 
 * If no build system could be found, then ide_build_system_new_finish() will
 * return %NULL.
 * @param context #IdeBuildSystem
 * @param projectFile A #GFile containing the directory or project file.
 * @param buildSystemHint A hint for the build system to use
 * @param cancellable A #GCancellable
 * @param callback A callback to execute upon completion
 */
function buildSystemNewAsync(context: Context, projectFile: Gio.File, buildSystemHint: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
/**
 * Complete an asynchronous call to ide_build_system_new_async().
 * @param result 
 * @returns An #IdeBuildSystem if successful; otherwise   %NULL and @error is set.
 */
function buildSystemNewFinish(result: Gio.AsyncResult): BuildSystem
function buildUtilsColorCodesFiltering(txt: string | null): string | null
function completionProviderContextCurrentWord(context: GtkSource.CompletionContext): string | null
function completionProviderContextInComment(context: GtkSource.CompletionContext): boolean
function completionProviderContextInCommentOrString(context: GtkSource.CompletionContext): boolean
function deviceErrorQuark(): GLib.Quark
function diagnosticSeverityToString(severity: DiagnosticSeverity): string | null
function doapErrorQuark(): GLib.Quark
function flatpakGetAppPath(path: string | null): string | null
/**
 * This is just like g_task_return_boolean() except that it enforces
 * that the current stack return to the main context before dispatching
 * the callback.
 * @param task 
 * @param value 
 */
function gTaskReturnBooleanFromMain(task: Gio.Task, value: boolean): void
/**
 * Like g_task_return_error() but ensures we return to the main loop before
 * dispatching the result.
 * @param task A #GTask
 * @param error A #GError.
 */
function gTaskReturnErrorFromMain(task: Gio.Task, error: GLib.Error): void
function gTaskReturnIntFromMain(task: Gio.Task, value: number): void
function gTaskReturnPointerFromMain(task: Gio.Task, value: any | null, notify: GLib.DestroyNotify): void
function getProgramName(): string | null
function getResource(): Gio.Resource
function getSystemArch(): string | null
function getSystemPageSize(): number
function getSystemType(): string | null
function gettext(message: string | null): string | null
function iconsGetResource(): Gio.Resource
/**
 * This function checks to see if the application is running within
 * a flatpak. This might be useful for cases where you need to perform
 * a different command when you are in the bundled flatpak version.
 */
function isFlatpak(): boolean
function langservDecodeCompletionKind(kind: number): SymbolKind
function langservDecodeSymbolKind(kind: number): SymbolKind
function languageFormatHeader(language: GtkSource.Language, header: string | null): string | null
function logGetVerbosity(): number
/**
 * Increases the amount of logging that will occur. By default, only
 * warning and above will be displayed.
 * 
 * Calling this once will cause G_LOG_LEVEL_MESSAGE to be displayed.
 * Calling this twice will cause G_LOG_LEVEL_INFO to be displayed.
 * Calling this thrice will cause G_LOG_LEVEL_DEBUG to be displayed.
 * Calling this four times will cause IDE_LOG_LEVEL_TRACE to be displayed.
 * 
 * Note that many DEBUG and TRACE level log messages are only compiled into
 * debug builds, and therefore will not be available in release builds.
 * 
 * This method is meant to be called for every -v provided on the command
 * line.
 * 
 * Calling this method more than four times is acceptable.
 */
function logIncreaseVerbosity(): void
/**
 * Initializes the logging subsystem.
 * @param stdout Indicates logging should be written to stdout.
 * @param filename An optional file in which to store logs.
 */
function logInit(stdout: boolean, filename: string | null): void
function logSetVerbosity(level: number): void
/**
 * Cleans up after the logging subsystem.
 */
function logShutdown(): void
/**
 * This function will collapse a path that starts with the users home
 * directory into a shorthand notation using ~/ for the home directory.
 * 
 * If the path does not have the home directory as a prefix, it will
 * simply return a copy of `path`.
 * @param path 
 * @returns A new path, possibly collapsed.
 */
function pathCollapse(path: string | null): string | null
/**
 * This function will expand various "shell-like" features of the provided
 * path using the POSIX wordexp(3) function. Command substitution will
 * not be enabled, but path features such as ~user will be expanded.
 * @param path 
 * @returns A newly allocated string containing the   expansion. A copy of the input string upon failure to expand.
 */
function pathExpand(path: string | null): string | null
function runtimeErrorQuark(): GLib.Quark
function setProgramName(programName: string | null): void
function sourceStyleSchemeApplyStyle(styleScheme: GtkSource.StyleScheme, style: string | null, tag: Gtk.TextTag): boolean
function symbolKindGetIconName(kind: SymbolKind): string | null
/**
 * Runs the callback on the thread pool thread.
 * @param kind the threadpool kind to use.
 * @param func A function to call in the worker thread.
 */
function threadPoolPush(kind: ThreadPoolKind, func: ThreadFunc): void
/**
 * This pushes a task to be executed on a worker thread based on the task kind as denoted by
 * `kind`. Some tasks will be placed on special work queues or throttled based on priority.
 * @param kind The task kind.
 * @param task A #GTask to execute.
 * @param func The thread worker to execute for `task`.
 */
function threadPoolPushTask(kind: ThreadPoolKind, task: Gio.Task, func: Gio.TaskThreadFunc): void
function uriBuild(scheme: string | null, userinfo: string | null, host: string | null, port: string | null, path: string | null, query: string | null, fragment: string | null): string | null
function uriErrorQuark(): GLib.Quark
/**
 * Utility function for parsing "network" URIs. This extracts just the
 * scheme, host, and port from `uri_string`. All three out parameters
 * are mandatory.
 * @param uriString a string containing a network URI
 * @param flags flags for parsing `uri_string`
 * @returns %TRUE on success, %FALSE on failure.
 */
function uriParseHost(uriString: string | null, flags: UriParseFlags): [ /* returnType */ boolean, /* scheme */ string | null, /* host */ string | null, /* port */ number ]
/**
 * Many URI schemes include one or more attribute/value pairs
 * as part of the URI value. This method can be used to parse them
 * into a hash table.
 * 
 * The `params` string is assumed to still be %<!-- -->-encoded, but
 * the returned values will be fully decoded. (Thus it is possible
 * that the returned values may contain '=' or `separator,` if the
 * value was encoded in the input.) Invalid %<!-- -->-encoding is
 * treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
 * (However, if `params` is the path or query string from a #IdeUri that
 * was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
 * does not contain any invalid encoding.)
 * @param params a string containing "attribute=value" parameters
 * @param length the length of `params,` or -1 if it is NUL-terminated
 * @param separator the separator character between parameters.   (usually ';', but sometimes '&')
 * @param caseInsensitive whether to match parameter names case-insensitively
 * @returns a hash table of attribute/value pairs. Both names and values will be fully-decoded. If @params cannot be parsed (eg, it contains two @separator characters in a row), then %NULL is returned.
 */
function uriParseParams(params: string | null, length: number, separator: number, caseInsensitive: boolean): GLib.HashTable
/**
 * Parses `uri_string` more-or-less according to the generic grammar of
 * RFC 3986 ("more" if `strict` is %TRUE, "less" if %FALSE), and
 * outputs the pieces into the provided variables. This is a low-level
 * method that does not do any pre- or post-processing of `uri_string,`
 * and is "garbage in, garbage out"; it just splits `uri_string` into
 * pieces at the appropriate punctuation characters (consuming
 * delimiters as appropriate), and returns the pieces. Components that
 * are not present in `uri_string` will be set to %NULL (but note that
 * the path is always present, though it may be an empty string).
 * @param uriString a string containing a relative or absolute URI
 * @param strict whether to parse `uri_string` strictly
 */
function uriSplit(uriString: string | null, strict: boolean): [ /* scheme */ string | null, /* userinfo */ string | null, /* host */ string | null, /* port */ string | null, /* path */ string | null, /* query */ string | null, /* fragment */ string | null ]
function vcsNewAsync(context: Context, ioPriority: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
/**
 * Completes a call to ide_vcs_new_async().
 * @param result 
 * @returns An #IdeVcs.
 */
function vcsNewFinish(result: Gio.AsyncResult): Vcs
function vcsRegisterIgnored(pattern: string | null): void
function vcsUriIsValid(uriString: string | null): boolean
/**
 * Gets the workbench `widget` is associated with, if any.
 * 
 * If no workbench is associated, NULL is returned.
 * @param widget 
 * @returns An #IdeWorkbench
 */
function widgetGetWorkbench(widget: Gtk.Widget): Workbench | null
/**
 * Calls `handler` when the #IdeContext has been set for `widget`.
 * @param widget A #GtkWidget
 * @param handler A callback to handle the context
 */
function widgetSetContextHandler(widget: Gtk.Widget, handler: WidgetContextHandler): void
interface BuildLogObserver {
    (logStream: BuildLogStream, message: string | null, messageLen: number): void
}
interface ExtensionSetAdapterForeachFunc {
    (set: ExtensionSetAdapter, pluginInfo: Peas.PluginInfo, extension: Peas.Extension): void
}
interface HighlightCallback {
    (begin: Gtk.TextIter, end: Gtk.TextIter, styleName: string | null): HighlightResult
}
interface RunHandler {
    (self: RunManager, runner: Runner): void
}
interface ThreadFunc {
    (): void
}
interface WidgetContextHandler {
    (widget: Gtk.Widget, context: Context): void
}
module ApplicationAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ApplicationAddin {

    // Own properties of Ide-1.0.Ide.ApplicationAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ApplicationAddin

    // Has conflict: load(application: Application): void
    // Has conflict: unload(application: Application): void

    // Own virtual methods of Ide-1.0.Ide.ApplicationAddin

    /**
     * This interface method is called when the application is started or
     * the plugin has just been activated.
     * 
     * Use this to setup code in your plugin that needs to be loaded once
     * per application process.
     * @virtual 
     * @param application An #IdeApplication.
     */
    load(application: Application): void
    /**
     * This inteface method is called when the application is shutting down
     * or the plugin has been unloaded.
     * 
     * Use this function to cleanup after anything setup in ide_application_addin_load().
     * @virtual 
     * @param application An #IdeApplication.
     */
    unload(application: Application): void

    // Class property signals of Ide-1.0.Ide.ApplicationAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ApplicationAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ApplicationAddin

    static name: string

    // Constructors of Ide-1.0.Ide.ApplicationAddin

    constructor(config?: ApplicationAddin.ConstructorProperties) 
    _init(config?: ApplicationAddin.ConstructorProperties): void
}

module ApplicationTool {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ApplicationTool {

    // Own properties of Ide-1.0.Ide.ApplicationTool

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ApplicationTool

    // Has conflict: runAsync(arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: runFinish(result: Gio.AsyncResult): number

    // Own virtual methods of Ide-1.0.Ide.ApplicationTool

    /**
     * Asynchronously runs an application tool. This is typically done on the
     * command line using the `ide` command.
     * @virtual 
     * @param arguments_ argv for the command
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to execute upon completion
     */
    runAsync(arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    runFinish(result: Gio.AsyncResult): number

    // Class property signals of Ide-1.0.Ide.ApplicationTool

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ApplicationTool extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ApplicationTool

    static name: string

    // Constructors of Ide-1.0.Ide.ApplicationTool

    constructor(config?: ApplicationTool.ConstructorProperties) 
    _init(config?: ApplicationTool.ConstructorProperties): void
}

module BuildPipelineAddin {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildPipelineAddin extends Object {

    // Own properties of Ide-1.0.Ide.BuildPipelineAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildPipelineAddin

    // Has conflict: load(pipeline: BuildPipeline): void
    /**
     * This function will track the stage_id that was returned from
     * ide_build_pipeline_connect() or similar functions. Doing so results in
     * the stage being automatically disconnected when the addin is unloaded.
     * 
     * This means that many #IdeBuildPipelineAddin implementations do not need
     * an unload vfunc if they track all registered stages.
     * 
     * You should not mix this function with manual pipeline disconnections.
     * While it should work, that is not yet guaranteed.
     * @param stageId a stage id returned from ide_build_pipeline_connect()
     */
    track(stageId: number): void
    // Has conflict: unload(pipeline: BuildPipeline): void

    // Own virtual methods of Ide-1.0.Ide.BuildPipelineAddin

    load(pipeline: BuildPipeline): void
    unload(pipeline: BuildPipeline): void

    // Class property signals of Ide-1.0.Ide.BuildPipelineAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildPipelineAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildPipelineAddin

    static name: string

    // Constructors of Ide-1.0.Ide.BuildPipelineAddin

    constructor(config?: BuildPipelineAddin.ConstructorProperties) 
    _init(config?: BuildPipelineAddin.ConstructorProperties): void
}

module BuildSystem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildSystem

        context?: Context | null
        projectFile?: Gio.File | null
    }

}

interface BuildSystem extends Object {

    // Own properties of Ide-1.0.Ide.BuildSystem

    readonly context: Context
    readonly projectFile: Gio.File
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildSystem

    // Has conflict: getBuildFlagsAsync(file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: getBuildFlagsFinish(result: Gio.AsyncResult): string[]
    // Has conflict: getBuildTargetsAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: getBuildTargetsFinish(result: Gio.AsyncResult): BuildTarget[]
    // Has conflict: getBuilddir(configuration: Configuration): string | null
    // Has conflict: getDisplayName(): string | null
    // Has conflict: getId(): string | null
    // Has conflict: getPriority(): number

    // Own virtual methods of Ide-1.0.Ide.BuildSystem

    getBuildFlagsAsync(file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    getBuildFlagsFinish(result: Gio.AsyncResult): string[]
    getBuildTargetsAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    getBuildTargetsFinish(result: Gio.AsyncResult): BuildTarget[]
    getBuilddir(configuration: Configuration): string | null
    getDisplayName(): string | null
    getId(): string | null
    getPriority(): number

    // Class property signals of Ide-1.0.Ide.BuildSystem

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::project-file", callback: (...args: any[]) => void): number
    on(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::project-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildSystem extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildSystem

    static name: string

    // Constructors of Ide-1.0.Ide.BuildSystem

    constructor(config?: BuildSystem.ConstructorProperties) 
    _init(config?: BuildSystem.ConstructorProperties): void
    /**
     * Asynchronously creates a new #IdeBuildSystem instance using the registered
     * #GIOExtensionPoint system. Each extension point will be tried asynchronously
     * by priority until one has been found that supports `project_file`.
     * 
     * If no build system could be found, then ide_build_system_new_finish() will
     * return %NULL.
     * @param context #IdeBuildSystem
     * @param projectFile A #GFile containing the directory or project file.
     * @param buildSystemHint A hint for the build system to use
     * @param cancellable A #GCancellable
     * @param callback A callback to execute upon completion
     */
    static newAsync(context: Context, projectFile: Gio.File, buildSystemHint: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: static newFinish(result: Gio.AsyncResult): BuildSystem

    // Overloads of newFinish

    static newFinish(result: Gio.AsyncResult): Object
}

module BuildSystemDiscovery {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface BuildSystemDiscovery {

    // Own properties of Ide-1.0.Ide.BuildSystemDiscovery

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildSystemDiscovery

    // Has conflict: discover(projectFile: Gio.File, cancellable: Gio.Cancellable | null): [ /* returnType */ string | null, /* priority */ number ]

    // Own virtual methods of Ide-1.0.Ide.BuildSystemDiscovery

    /**
     * This virtual method can be used to try to discover the build system to use for
     * a particular project. This might be used in cases like Flatpak where the build
     * system can be determined from the .json manifest rather than auto-discovery
     * by locating project files.
     * @virtual 
     * @param projectFile A #GFile containing the project file (a directory)
     * @param cancellable A #GCancellable or %NULL
     * @returns The hint for the build system, which should match what   the build system returns from ide_build_system_get_id().
     */
    discover(projectFile: Gio.File, cancellable: Gio.Cancellable | null): [ /* returnType */ string | null, /* priority */ number ]

    // Class property signals of Ide-1.0.Ide.BuildSystemDiscovery

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildSystemDiscovery extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildSystemDiscovery

    static name: string

    // Constructors of Ide-1.0.Ide.BuildSystemDiscovery

    constructor(config?: BuildSystemDiscovery.ConstructorProperties) 
    _init(config?: BuildSystemDiscovery.ConstructorProperties): void
}

module BuildTarget {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildTarget extends Object {

    // Own properties of Ide-1.0.Ide.BuildTarget

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildTarget

    // Has conflict: getInstallDirectory(): Gio.File | null
    // Has conflict: getName(): string | null

    // Own virtual methods of Ide-1.0.Ide.BuildTarget

    getInstallDirectory(): Gio.File | null
    getName(): string | null

    // Class property signals of Ide-1.0.Ide.BuildTarget

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildTarget extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildTarget

    static name: string

    // Constructors of Ide-1.0.Ide.BuildTarget

    constructor(config?: BuildTarget.ConstructorProperties) 
    _init(config?: BuildTarget.ConstructorProperties): void
}

module CompletionProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface CompletionProvider extends GtkSource.CompletionProvider {

    // Own properties of Ide-1.0.Ide.CompletionProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.CompletionProvider

    // Has conflict: load(context: Context): void

    // Own virtual methods of Ide-1.0.Ide.CompletionProvider

    load(context: Context): void

    // Class property signals of Ide-1.0.Ide.CompletionProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CompletionProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionProvider

    static name: string

    // Constructors of Ide-1.0.Ide.CompletionProvider

    constructor(config?: CompletionProvider.ConstructorProperties) 
    _init(config?: CompletionProvider.ConstructorProperties): void
    static contextCurrentWord(context: GtkSource.CompletionContext): string | null
    static contextInComment(context: GtkSource.CompletionContext): boolean
    static contextInCommentOrString(context: GtkSource.CompletionContext): boolean
}

module ConfigurationProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ConfigurationProvider {

    // Own properties of Ide-1.0.Ide.ConfigurationProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ConfigurationProvider

    // Has conflict: loadAsync(manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: loadFinish(result: Gio.AsyncResult): boolean
    // Has conflict: saveAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: saveFinish(result: Gio.AsyncResult): boolean
    // Has conflict: unload(manager: ConfigurationManager): void

    // Own virtual methods of Ide-1.0.Ide.ConfigurationProvider

    loadAsync(manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    loadFinish(result: Gio.AsyncResult): boolean
    saveAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    saveFinish(result: Gio.AsyncResult): boolean
    unload(manager: ConfigurationManager): void

    // Class property signals of Ide-1.0.Ide.ConfigurationProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ConfigurationProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ConfigurationProvider

    static name: string

    // Constructors of Ide-1.0.Ide.ConfigurationProvider

    constructor(config?: ConfigurationProvider.ConstructorProperties) 
    _init(config?: ConfigurationProvider.ConstructorProperties): void
}

module DeviceProvider {

    // Signal callback interfaces

    /**
     * Signal callback interface for `device-added`
     */
    interface DeviceAddedSignalCallback {
        (object: Device): void
    }

    /**
     * Signal callback interface for `device-removed`
     */
    interface DeviceRemovedSignalCallback {
        (object: Device): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DeviceProvider

        context?: Context | null
    }

}

interface DeviceProvider extends Object {

    // Own properties of Ide-1.0.Ide.DeviceProvider

    readonly context: Context
    readonly settled: boolean
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.DeviceProvider

    emitDeviceAdded(device: Device): void
    emitDeviceRemoved(device: Device): void
    // Has conflict: getDevices(): Device[]
    // Has conflict: getSettled(): boolean

    // Own virtual methods of Ide-1.0.Ide.DeviceProvider

    /**
     * Retrieves a list of devices currently managed by `provider`.
     * @virtual 
     * @returns A #GPtrArray of  #IdeDevice instances.
     */
    getDevices(): Device[]
    getSettled(): boolean

    // Own signals of Ide-1.0.Ide.DeviceProvider

    connect(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback): number
    on(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "device-added", ...args: any[]): void
    connect(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback): number
    on(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "device-removed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DeviceProvider

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::settled", callback: (...args: any[]) => void): number
    on(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::settled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DeviceProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DeviceProvider

    static name: string

    // Constructors of Ide-1.0.Ide.DeviceProvider

    constructor(config?: DeviceProvider.ConstructorProperties) 
    _init(config?: DeviceProvider.ConstructorProperties): void
}

module DiagnosticProvider {

    // Signal callback interfaces

    /**
     * Signal callback interface for `invalidated`
     */
    interface InvalidatedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DiagnosticProvider extends Object {

    // Own properties of Ide-1.0.Ide.DiagnosticProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.DiagnosticProvider

    // Has conflict: diagnoseAsync(file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: diagnoseFinish(result: Gio.AsyncResult): Diagnostics | null
    emitInvalidated(): void
    // Has conflict: load(): void

    // Own virtual methods of Ide-1.0.Ide.DiagnosticProvider

    diagnoseAsync(file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous call to ide_diagnostic_provider_diagnose_async().
     * @virtual 
     * @param result 
     * @returns #IdeDiagnostics or %NULL and @error is set.
     */
    diagnoseFinish(result: Gio.AsyncResult): Diagnostics | null
    load(): void

    // Own signals of Ide-1.0.Ide.DiagnosticProvider

    connect(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback): number
    on(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "invalidated", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DiagnosticProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DiagnosticProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DiagnosticProvider

    static name: string

    // Constructors of Ide-1.0.Ide.DiagnosticProvider

    constructor(config?: DiagnosticProvider.ConstructorProperties) 
    _init(config?: DiagnosticProvider.ConstructorProperties): void
}

module EditorViewAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface EditorViewAddin {

    // Own properties of Ide-1.0.Ide.EditorViewAddin

    __gtype__: number

    // Own virtual methods of Ide-1.0.Ide.EditorViewAddin

    languageChanged(languageId: string | null): void
    load(view: EditorView): void
    loadSourceView(sourceView: SourceView): void
    unload(view: EditorView): void
    unloadSourceView(sourceView: SourceView): void

    // Class property signals of Ide-1.0.Ide.EditorViewAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class EditorViewAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.EditorViewAddin

    static name: string

    // Constructors of Ide-1.0.Ide.EditorViewAddin

    constructor(config?: EditorViewAddin.ConstructorProperties) 
    _init(config?: EditorViewAddin.ConstructorProperties): void
}

module Formatter {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Formatter {

    // Own properties of Ide-1.0.Ide.Formatter

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Formatter

    // Has conflict: formatAsync(buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: formatFinish(result: Gio.AsyncResult): boolean
    // Has conflict: formatRangeAsync(buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: formatRangeFinish(result: Gio.AsyncResult): boolean
    // Has conflict: load(): void

    // Own virtual methods of Ide-1.0.Ide.Formatter

    formatAsync(buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    formatFinish(result: Gio.AsyncResult): boolean
    formatRangeAsync(buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    formatRangeFinish(result: Gio.AsyncResult): boolean
    load(): void

    // Class property signals of Ide-1.0.Ide.Formatter

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Formatter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Formatter

    static name: string

    // Constructors of Ide-1.0.Ide.Formatter

    constructor(config?: Formatter.ConstructorProperties) 
    _init(config?: Formatter.ConstructorProperties): void
}

module GenesisAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface GenesisAddin {

    // Own properties of Ide-1.0.Ide.GenesisAddin

    readonly isReady: boolean
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.GenesisAddin

    // Has conflict: getIconName(): string | null
    // Has conflict: getLabel(): string | null
    // Has conflict: getNextLabel(): string | null
    // Has conflict: getPriority(): number
    // Has conflict: getTitle(): string | null
    // Has conflict: getWidget(): Gtk.Widget
    // Has conflict: runAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: runFinish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.GenesisAddin

    getIconName(): string | null
    getLabel(): string | null
    getNextLabel(): string | null
    getPriority(): number
    getTitle(): string | null
    getWidget(): Gtk.Widget
    runAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    runFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.GenesisAddin

    connect(sigName: "notify::is-ready", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-ready", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class GenesisAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.GenesisAddin

    static name: string

    // Constructors of Ide-1.0.Ide.GenesisAddin

    constructor(config?: GenesisAddin.ConstructorProperties) 
    _init(config?: GenesisAddin.ConstructorProperties): void
}

module Highlighter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Highlighter

        context?: Context | null
    }

}

interface Highlighter extends Object {

    // Own properties of Ide-1.0.Ide.Highlighter

    readonly context: Context
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Highlighter

    // Has conflict: load(): void
    // Has conflict: update(callback: HighlightCallback, rangeBegin: Gtk.TextIter, rangeEnd: Gtk.TextIter): /* location */ Gtk.TextIter

    // Own virtual methods of Ide-1.0.Ide.Highlighter

    load(): void
    setEngine(engine: HighlightEngine): void
    /**
     * Incrementally processes more of the buffer for highlighting.  If `callback`
     * returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
     * return, having set `location` to the current position of processing.
     * 
     * If processing the entire range was successful, then `location` should be set
     * to `range_end`.
     * @virtual 
     * @param callback A callback to apply a given style.
     * @param rangeBegin The beginning of the range to update.
     * @param rangeEnd The end of the range to update.
     */
    update(callback: HighlightCallback, rangeBegin: Gtk.TextIter, rangeEnd: Gtk.TextIter): /* location */ Gtk.TextIter

    // Class property signals of Ide-1.0.Ide.Highlighter

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Highlighter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Highlighter

    static name: string

    // Constructors of Ide-1.0.Ide.Highlighter

    constructor(config?: Highlighter.ConstructorProperties) 
    _init(config?: Highlighter.ConstructorProperties): void
}

module Indenter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Indenter extends Object {

    // Own properties of Ide-1.0.Ide.Indenter

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Indenter

    // Has conflict: format(textView: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey): [ /* returnType */ string | null, /* cursorOffset */ number ]
    // Has conflict: isTrigger(event: Gdk.EventKey): boolean

    // Own virtual methods of Ide-1.0.Ide.Indenter

    /**
     * This function performs an indentation for the key press activated by `event`.
     * The implementation is free to move the `begin` and `end` iters to swallow
     * adjacent content. The result, a string, is the contents that will replace
     * the content inbetween `begin` and `end`.
     * 
     * `cursor_offset` may be set to jump the cursor starting from `end`. Negative
     * values are allowed.
     * @virtual 
     * @param textView A #GtkTextView
     * @param begin A #GtkTextIter for the beginning region of text to replace.
     * @param end A #GtkTextIter for the end region of text to replace.
     * @param event The #GdkEventKey that triggered the event.
     * @returns A string containing the replacement text, or %NULL.
     */
    format(textView: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey): [ /* returnType */ string | null, /* cursorOffset */ number ]
    /**
     * Determines if `event` should trigger an indentation request. If %TRUE is
     * returned then ide_indenter_format() will be called.
     * @virtual 
     * @param event a #GdkEventKey
     * @returns %TRUE if @event should trigger an indentation request.
     */
    isTrigger(event: Gdk.EventKey): boolean

    // Class property signals of Ide-1.0.Ide.Indenter

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Indenter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Indenter

    static name: string

    // Constructors of Ide-1.0.Ide.Indenter

    constructor(config?: Indenter.ConstructorProperties) 
    _init(config?: Indenter.ConstructorProperties): void
}

module LayoutStackAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface LayoutStackAddin {

    // Own properties of Ide-1.0.Ide.LayoutStackAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.LayoutStackAddin

    // Has conflict: load(stack: LayoutStack): void
    // Has conflict: setView(view: LayoutView | null): void
    // Has conflict: unload(stack: LayoutStack): void

    // Own virtual methods of Ide-1.0.Ide.LayoutStackAddin

    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should load itself.
     * A new instance of the plugin is created for every #IdeLayoutStack
     * that is created in Builder.
     * @virtual 
     * @param stack An #IdeLayoutStack
     */
    load(stack: LayoutStack): void
    /**
     * This virtual method is called whenever the active view changes
     * in the #IdeLayoutView. Plugins may want to alter what controls
     * are displayed on the stack based on the current view.
     * @virtual 
     * @param view An #IdeLayoutView or %NULL.
     */
    setView(view: LayoutView | null): void
    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should unload itself.
     * It should revert anything performed via ide_layout_stack_addin_load().
     * @virtual 
     * @param stack An #IdeLayoutStack
     */
    unload(stack: LayoutStack): void

    // Class property signals of Ide-1.0.Ide.LayoutStackAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LayoutStackAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.LayoutStackAddin

    static name: string

    // Constructors of Ide-1.0.Ide.LayoutStackAddin

    constructor(config?: LayoutStackAddin.ConstructorProperties) 
    _init(config?: LayoutStackAddin.ConstructorProperties): void
}

module Perspective {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Perspective {

    // Own properties of Ide-1.0.Ide.Perspective

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Perspective

    // Has conflict: agreeToShutdown(): boolean
    // Has conflict: getAccelerator(): string | null
    // Has conflict: getActions(): Gio.ActionGroup | null
    // Has conflict: getIconName(): string | null
    // Has conflict: getId(): string | null
    // Has conflict: getNeedsAttention(): boolean
    // Has conflict: getPriority(): number
    // Has conflict: getTitle(): string | null
    // Has conflict: getTitlebar(): Gtk.Widget | null
    // Has conflict: isEarly(): boolean
    // Has conflict: setFullscreen(fullscreen: boolean): void
    // Has conflict: viewsForeach(callback: Gtk.Callback): void

    // Own virtual methods of Ide-1.0.Ide.Perspective

    /**
     * This interface method is called when the workbench would like to shutdown.
     * If the perspective needs to focus and ask the user a question, this is the place
     * to do so. You may run a #GtkDialog using gtk_dialog_run() or simply focus your
     * perspective and return %FALSE.
     * @virtual 
     * @returns %TRUE to allow the workbench to continue shutting down.
     */
    agreeToShutdown(): boolean
    /**
     * Gets the accelerator to use to jump to the perspective. The workbench will
     * register this accelerator on behalf of the perspective.
     * @virtual 
     * @returns A newly allocated string or %NULL.
     */
    getAccelerator(): string | null
    /**
     * This interface method should retrieve a #GActionGroup associated with the
     * perspective, if necessary. The #GActionGroup will automatically be
     * registered with the "perspective" action prefix while the perspective is
     * active. A perspective is "active" when it is currently displayed in the
     * workbench.
     * @virtual 
     * @returns A #GActionGroup or %NULL.
     */
    getActions(): Gio.ActionGroup | null
    /**
     * This interface methods retrieves the icon name to use when displaying the
     * perspective selection sidebar.
     * 
     * If you implement an "icon-name" property, the icon may change at runtime.
     * @virtual 
     * @returns A newly allcoated string that contains the icon-name   to use for the perspective.
     */
    getIconName(): string | null
    /**
     * This interface method is used to identify the perspective. It should be a short
     * internal name, such as "editor" which should not be translated. Internally, the
     * default implementation of this method will return the name of the instances #GType.
     * 
     * The identifier must be alpha-numeric only (a-z A-Z 0-9).
     * 
     * This value should be unique per workspace.
     * @virtual 
     * @returns A string identifier for the perspective.
     */
    getId(): string | null
    /**
     * This interface method returns %TRUE if the interface needs attention.
     * 
     * One such use of this would be to indicate that contents within a perspective have
     * changed since the user last focused the perspective. This should also be implemented
     * with a boolean property named "needs-attention". If you call g_object_notify() (or one
     * of its variants), the notifcation visual will be rendered with your icon.
     * @virtual 
     * @returns %TRUE if the perspective needs attention.
     */
    getNeedsAttention(): boolean
    getPriority(): number
    /**
     * This interface method gets the title of the perspective. This is used for tooltips
     * in the perspective selector and potentially other UI components.
     * @virtual 
     * @returns A string which will not be modified or freed.
     */
    getTitle(): string | null
    /**
     * This interface method should return a #GtkWidget suitable for being embedded as the
     * titlebar for the application. If you return %NULL from this method, a suitable titlebar
     * will be created for you.
     * 
     * You may use #IdeHeaderBar for a base implementation to save you the trouble of
     * creating a titlebar similar to other perspectives in Builder.
     * @virtual 
     * @returns A #GtkWidget or %NULL.
     */
    getTitlebar(): Gtk.Widget | null
    /**
     * If %TRUE, the perspective can be used before loading a project.
     * @virtual 
     */
    isEarly(): boolean
    /**
     * This interface method is used to notify the perspective that it is going into
     * fullscreen mode. The #IdeWorkbench will notify the perspective before it is displayed.
     * @virtual 
     * @param fullscreen If fullscreen mode should be activated.
     */
    setFullscreen(fullscreen: boolean): void
    /**
     * This interface method is used to iterate all #IdeLayoutView's that are descendents of `self`.
     * @virtual 
     * @param callback A #GtkCallback.
     */
    viewsForeach(callback: Gtk.Callback): void

    // Class property signals of Ide-1.0.Ide.Perspective

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Perspective extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Perspective

    static name: string

    // Constructors of Ide-1.0.Ide.Perspective

    constructor(config?: Perspective.ConstructorProperties) 
    _init(config?: Perspective.ConstructorProperties): void
}

module PreferencesAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface PreferencesAddin {

    // Own properties of Ide-1.0.Ide.PreferencesAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.PreferencesAddin

    // Has conflict: load(preferences: Dazzle.Preferences): void
    // Has conflict: unload(preferences: Dazzle.Preferences): void

    // Own virtual methods of Ide-1.0.Ide.PreferencesAddin

    /**
     * This interface method is called when a preferences addin is initialized. It could be
     * initialized from multiple preferences implementations, so consumers should use the
     * #DzlPreferences interface to add their preferences controls to the container.
     * 
     * Such implementations might include a preferences dialog window, or a preferences
     * widget which could be rendered as a perspective.
     * @virtual 
     * @param preferences The preferences container implementation.
     */
    load(preferences: Dazzle.Preferences): void
    /**
     * This interface method is called when the preferences addin should remove all controls
     * added to `preferences`. This could happen during desctruction of `preferences,` or when
     * the plugin is unloaded.
     * @virtual 
     * @param preferences The preferences container implementation.
     */
    unload(preferences: Dazzle.Preferences): void

    // Class property signals of Ide-1.0.Ide.PreferencesAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class PreferencesAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.PreferencesAddin

    static name: string

    // Constructors of Ide-1.0.Ide.PreferencesAddin

    constructor(config?: PreferencesAddin.ConstructorProperties) 
    _init(config?: PreferencesAddin.ConstructorProperties): void
}

module ProjectMiner {

    // Signal callback interfaces

    /**
     * Signal callback interface for `discovered`
     */
    interface DiscoveredSignalCallback {
        (projectInfo: ProjectInfo): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ProjectMiner {

    // Own properties of Ide-1.0.Ide.ProjectMiner

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ProjectMiner

    emitDiscovered(projectInfo: ProjectInfo): void
    // Has conflict: mineAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: mineFinish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.ProjectMiner

    discovered(projectInfo: ProjectInfo): void
    mineAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    mineFinish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.ProjectMiner

    connect(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback): number
    on(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback): NodeJS.EventEmitter
    emit(sigName: "discovered", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ProjectMiner

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectMiner extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectMiner

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectMiner

    constructor(config?: ProjectMiner.ConstructorProperties) 
    _init(config?: ProjectMiner.ConstructorProperties): void
}

module ProjectTemplate {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ProjectTemplate {

    // Own properties of Ide-1.0.Ide.ProjectTemplate

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ProjectTemplate

    // Has conflict: expandAsync(params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: expandFinish(result: Gio.AsyncResult): boolean
    // Has conflict: getDescription(): string | null
    // Has conflict: getIconName(): string | null
    // Has conflict: getId(): string | null
    // Has conflict: getLanguages(): string[]
    // Has conflict: getName(): string | null
    // Has conflict: getWidget(): Gtk.Widget

    // Own virtual methods of Ide-1.0.Ide.ProjectTemplate

    /**
     * Asynchronously requests expansion of the template.
     * 
     * This may involve creating files and directories on disk as well as
     * expanding files based on the contents of `params`.
     * 
     * It is expected that this method is only called once on an #IdeProjectTemplate.
     * @virtual 
     * @param params A hashtable of template parameters.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback the callback for the asynchronous operation.
     */
    expandAsync(params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    expandFinish(result: Gio.AsyncResult): boolean
    getDescription(): string | null
    getIconName(): string | null
    getId(): string | null
    /**
     * Gets the list of languages that this template can support when generating
     * the project.
     * @virtual 
     * @returns A newly allocated, NULL terminated list of   supported languages.
     */
    getLanguages(): string[]
    getName(): string | null
    /**
     * Get's the configuration widget for the template if there is one.
     * @virtual 
     * @returns A #GtkWidget.
     */
    getWidget(): Gtk.Widget

    // Class property signals of Ide-1.0.Ide.ProjectTemplate

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectTemplate extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectTemplate

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectTemplate

    constructor(config?: ProjectTemplate.ConstructorProperties) 
    _init(config?: ProjectTemplate.ConstructorProperties): void
}

module RenameProvider {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.RenameProvider

        buffer?: Buffer | null
    }

}

interface RenameProvider extends Object {

    // Own properties of Ide-1.0.Ide.RenameProvider

    buffer: Buffer
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RenameProvider

    // Has conflict: load(): void
    // Has conflict: renameAsync(location: SourceLocation, newName: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: renameFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]

    // Own virtual methods of Ide-1.0.Ide.RenameProvider

    load(): void
    /**
     * This requests the provider to determine the edits that must be made to the
     * project to perform the renaming of a symbol found at `location`.
     * 
     * Use ide_rename_provider_rename_finish() to get the results.
     * @virtual 
     * @param location An #IdeSourceLocation
     * @param newName The replacement name for the symbol
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to complete the request
     */
    renameAsync(location: SourceLocation, newName: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes a request to ide_rename_provider_rename_async().
     * 
     * You can use the resulting #GPtrArray of #IdeProjectEdit instances to edit the project
     * to complete the symbol rename.
     * @virtual 
     * @param result A #GAsyncResult
     * @returns %TRUE if successful and @edits is set. Otherwise %FALSE and @error is set.
     */
    renameFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]

    // Class property signals of Ide-1.0.Ide.RenameProvider

    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RenameProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RenameProvider

    static name: string

    // Constructors of Ide-1.0.Ide.RenameProvider

    constructor(config?: RenameProvider.ConstructorProperties) 
    _init(config?: RenameProvider.ConstructorProperties): void
}

module RunnerAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface RunnerAddin {

    // Own properties of Ide-1.0.Ide.RunnerAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RunnerAddin

    // Has conflict: load(runner: Runner): void
    // Has conflict: posthookAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: posthookFinish(result: Gio.AsyncResult): boolean
    // Has conflict: prehookAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: prehookFinish(result: Gio.AsyncResult): boolean
    // Has conflict: unload(runner: Runner): void

    // Own virtual methods of Ide-1.0.Ide.RunnerAddin

    load(runner: Runner): void
    posthookAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    posthookFinish(result: Gio.AsyncResult): boolean
    prehookAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    prehookFinish(result: Gio.AsyncResult): boolean
    unload(runner: Runner): void

    // Class property signals of Ide-1.0.Ide.RunnerAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RunnerAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RunnerAddin

    static name: string

    // Constructors of Ide-1.0.Ide.RunnerAddin

    constructor(config?: RunnerAddin.ConstructorProperties) 
    _init(config?: RunnerAddin.ConstructorProperties): void
}

module RuntimeProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface RuntimeProvider {

    // Own properties of Ide-1.0.Ide.RuntimeProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RuntimeProvider

    // Has conflict: canInstall(runtimeId: string | null): boolean
    // Has conflict: installAsync(runtimeId: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: installFinish(result: Gio.AsyncResult): boolean
    // Has conflict: load(manager: RuntimeManager): void
    // Has conflict: unload(manager: RuntimeManager): void

    // Own virtual methods of Ide-1.0.Ide.RuntimeProvider

    canInstall(runtimeId: string | null): boolean
    installAsync(runtimeId: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    installFinish(result: Gio.AsyncResult): boolean
    load(manager: RuntimeManager): void
    unload(manager: RuntimeManager): void

    // Class property signals of Ide-1.0.Ide.RuntimeProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RuntimeProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RuntimeProvider

    static name: string

    // Constructors of Ide-1.0.Ide.RuntimeProvider

    constructor(config?: RuntimeProvider.ConstructorProperties) 
    _init(config?: RuntimeProvider.ConstructorProperties): void
}

module SearchProvider {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SearchProvider extends Object {

    // Own properties of Ide-1.0.Ide.SearchProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SearchProvider

    // Has conflict: activate(row: Gtk.Widget, result: SearchResult): void
    // Has conflict: createRow(result: SearchResult): Gtk.Widget
    // Has conflict: getPrefix(): string
    // Has conflict: getPriority(): number
    // Has conflict: getVerb(): string | null
    // Has conflict: populate(context: SearchContext, searchTerms: string | null, maxResults: number, cancellable: Gio.Cancellable | null): void

    // Own virtual methods of Ide-1.0.Ide.SearchProvider

    activate(row: Gtk.Widget, result: SearchResult): void
    /**
     * Create a row to display the search result.
     * @virtual 
     * @param result A #IdeSearchResult.
     * @returns A #GtkWidget.
     */
    createRow(result: SearchResult): Gtk.Widget
    getPrefix(): string
    getPriority(): number
    getVerb(): string | null
    populate(context: SearchContext, searchTerms: string | null, maxResults: number, cancellable: Gio.Cancellable | null): void

    // Class property signals of Ide-1.0.Ide.SearchProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SearchProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SearchProvider

    static name: string

    // Constructors of Ide-1.0.Ide.SearchProvider

    constructor(config?: SearchProvider.ConstructorProperties) 
    _init(config?: SearchProvider.ConstructorProperties): void
}

module Service {

    // Signal callback interfaces

    /**
     * Signal callback interface for `context-loaded`
     */
    interface ContextLoadedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Service extends Object {

    // Own properties of Ide-1.0.Ide.Service

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Service

    // Has conflict: getName(): string | null
    // Has conflict: start(): void
    // Has conflict: stop(): void

    // Own virtual methods of Ide-1.0.Ide.Service

    contextLoaded(): void
    getName(): string | null
    start(): void
    stop(): void

    // Own signals of Ide-1.0.Ide.Service

    connect(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback): number
    on(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "context-loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Service

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Service extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Service

    static name: string

    // Constructors of Ide-1.0.Ide.Service

    constructor(config?: Service.ConstructorProperties) 
    _init(config?: Service.ConstructorProperties): void
}

module Subprocess {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Subprocess {

    // Own properties of Ide-1.0.Ide.Subprocess

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Subprocess

    checkExitStatus(): boolean
    // Has conflict: communicate(stdinBuf: any, cancellable: Gio.Cancellable | null, stdoutBuf: any, stderrBuf: any): boolean
    // Has conflict: communicateAsync(stdinBuf: any | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: communicateFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdoutBuf */ any, /* stderrBuf */ any ]
    // Has conflict: communicateUtf8(stdinBuf: string | null, cancellable: Gio.Cancellable | null): [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
    // Has conflict: communicateUtf8Async(stdinBuf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: communicateUtf8Finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
    // Has conflict: forceExit(): void
    // Has conflict: getExitStatus(): number
    // Has conflict: getIdentifier(): string | null
    // Has conflict: getIfExited(): boolean
    // Has conflict: getIfSignaled(): boolean
    // Has conflict: getStatus(): number
    // Has conflict: getStderrPipe(): Gio.InputStream
    // Has conflict: getStdinPipe(): Gio.OutputStream
    // Has conflict: getStdoutPipe(): Gio.InputStream
    // Has conflict: getSuccessful(): boolean
    // Has conflict: getTermSig(): number
    // Has conflict: sendSignal(signalNum: number): void
    // Has conflict: wait(cancellable: Gio.Cancellable | null): boolean
    // Has conflict: waitAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    waitCheck(cancellable: Gio.Cancellable | null): boolean
    waitCheckAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    waitCheckFinish(result: Gio.AsyncResult): boolean
    // Has conflict: waitFinish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.Subprocess

    communicate(stdinBuf: any, cancellable: Gio.Cancellable | null, stdoutBuf: any, stderrBuf: any): boolean
    /**
     * Asynchronously communicates with the the child process.
     * 
     * There is no need to call ide_subprocess_wait() on the process if using
     * this asynchronous operation as it will internally wait for the child
     * to exit or be signaled.
     * 
     * Ensure you've set the proper flags to ensure that you can write to stdin
     * or read from stderr/stdout as necessary.
     * @virtual 
     * @param stdinBuf A #GBytes to send to stdin or %NULL
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to complete the request
     */
    communicateAsync(stdinBuf: any | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a request to ide_subprocess_communicate_async().
     * @virtual 
     * @param result A #GAsyncResult
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicateFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdoutBuf */ any, /* stderrBuf */ any ]
    /**
     * This process acts identical to g_subprocess_communicate_utf8().
     * @virtual 
     * @param stdinBuf input to deliver to the subprocesses stdin stream
     * @param cancellable an optional #GCancellable
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicateUtf8(stdinBuf: string | null, cancellable: Gio.Cancellable | null): [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
    communicateUtf8Async(stdinBuf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    communicateUtf8Finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
    forceExit(): void
    getExitStatus(): number
    getIdentifier(): string | null
    getIfExited(): boolean
    getIfSignaled(): boolean
    getStatus(): number
    getStderrPipe(): Gio.InputStream
    getStdinPipe(): Gio.OutputStream
    getStdoutPipe(): Gio.InputStream
    getSuccessful(): boolean
    getTermSig(): number
    sendSignal(signalNum: number): void
    wait(cancellable: Gio.Cancellable | null): boolean
    waitAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    waitFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.Subprocess

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Subprocess extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Subprocess

    static name: string

    // Constructors of Ide-1.0.Ide.Subprocess

    constructor(config?: Subprocess.ConstructorProperties) 
    _init(config?: Subprocess.ConstructorProperties): void
}

module SymbolResolver {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SymbolResolver extends Object {

    // Own properties of Ide-1.0.Ide.SymbolResolver

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SymbolResolver

    // Has conflict: findReferencesAsync(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: findReferencesFinish(result: Gio.AsyncResult): SourceRange[]
    // Has conflict: getSymbolTreeAsync(file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: getSymbolTreeFinish(result: Gio.AsyncResult): SymbolTree | null
    // Has conflict: load(): void
    // Has conflict: lookupSymbolAsync(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: lookupSymbolFinish(result: Gio.AsyncResult): Symbol | null

    // Own virtual methods of Ide-1.0.Ide.SymbolResolver

    findReferencesAsync(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous request to ide_symbol_resolver_find_references_async().
     * @virtual 
     * @param result a #GAsyncResult
     * @returns A #GPtrArray   of #IdeSourceRange if successful; otherwise %NULL and @error is set.
     */
    findReferencesFinish(result: Gio.AsyncResult): SourceRange[]
    /**
     * Asynchronously fetch an up to date symbol tree for `file`.
     * @virtual 
     * @param file A #GFile
     * @param buffer A #IdeBuffer or %NULL
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a callback to execute upon completion
     */
    getSymbolTreeAsync(file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous request to get the symbol tree for the requested file.
     * @virtual 
     * @param result 
     * @returns An #IdeSymbolTree; otherwise %NULL and @error is set.
     */
    getSymbolTreeFinish(result: Gio.AsyncResult): SymbolTree | null
    load(): void
    /**
     * Asynchronously requests that `self` determine the symbol existing at the source location
     * denoted by `self`. `callback` should call ide_symbol_resolver_lookup_symbol_finish() to
     * retrieve the result.
     * @virtual 
     * @param location An #IdeSourceLocation.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback A callback to execute upon completion.
     */
    lookupSymbolAsync(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous call to lookup a symbol using
     * ide_symbol_resolver_lookup_symbol_async().
     * @virtual 
     * @param result A #GAsyncResult provided to the callback.
     * @returns An #IdeSymbol if successful; otherwise %NULL.
     */
    lookupSymbolFinish(result: Gio.AsyncResult): Symbol | null

    // Class property signals of Ide-1.0.Ide.SymbolResolver

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SymbolResolver extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SymbolResolver

    static name: string

    // Constructors of Ide-1.0.Ide.SymbolResolver

    constructor(config?: SymbolResolver.ConstructorProperties) 
    _init(config?: SymbolResolver.ConstructorProperties): void
}

module SymbolTree {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SymbolTree {

    // Own properties of Ide-1.0.Ide.SymbolTree

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SymbolTree

    // Has conflict: getNChildren(node: SymbolNode | null): number
    // Has conflict: getNthChild(node: SymbolNode | null, nth: number): SymbolNode | null

    // Own virtual methods of Ide-1.0.Ide.SymbolTree

    /**
     * Get the number of children of `node`. If `node` is NULL, the root node
     * is assumed.
     * @virtual 
     * @param node An #IdeSymbolNode or %NULL.
     * @returns An unsigned integer containing the number of children.
     */
    getNChildren(node: SymbolNode | null): number
    /**
     * Gets the `nth` child node of `node`.
     * @virtual 
     * @param node an #IdeSymboNode
     * @param nth the nth child to retrieve.
     * @returns A #IdeSymbolNode or %NULL.
     */
    getNthChild(node: SymbolNode | null, nth: number): SymbolNode | null

    // Class property signals of Ide-1.0.Ide.SymbolTree

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SymbolTree extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SymbolTree

    static name: string

    // Constructors of Ide-1.0.Ide.SymbolTree

    constructor(config?: SymbolTree.ConstructorProperties) 
    _init(config?: SymbolTree.ConstructorProperties): void
}

module TagsBuilder {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface TagsBuilder {

    // Own properties of Ide-1.0.Ide.TagsBuilder

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.TagsBuilder

    // Has conflict: buildAsync(directoryOrFile: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: buildFinish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.TagsBuilder

    buildAsync(directoryOrFile: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    buildFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.TagsBuilder

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TagsBuilder extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TagsBuilder

    static name: string

    // Constructors of Ide-1.0.Ide.TagsBuilder

    constructor(config?: TagsBuilder.ConstructorProperties) 
    _init(config?: TagsBuilder.ConstructorProperties): void
}

module TemplateProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface TemplateProvider {

    // Own properties of Ide-1.0.Ide.TemplateProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.TemplateProvider

    // Has conflict: getProjectTemplates(): ProjectTemplate[]

    // Own virtual methods of Ide-1.0.Ide.TemplateProvider

    /**
     * Gets a list of templates for this provider.
     * 
     * Plugins should implement this interface to feed #IdeProjectTemplate's into
     * the project creation workflow.
     * @virtual 
     * @returns A #GList of   #IdeProjectTemplate instances.
     */
    getProjectTemplates(): ProjectTemplate[]

    // Class property signals of Ide-1.0.Ide.TemplateProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TemplateProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TemplateProvider

    static name: string

    // Constructors of Ide-1.0.Ide.TemplateProvider

    constructor(config?: TemplateProvider.ConstructorProperties) 
    _init(config?: TemplateProvider.ConstructorProperties): void
}

module Vcs {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Vcs

        context?: Context | null
    }

}

interface Vcs extends Object {

    // Own properties of Ide-1.0.Ide.Vcs

    readonly branchName: string | null
    readonly context: Context
    readonly workingDirectory: Gio.File
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Vcs

    emitChanged(): void
    // Has conflict: getBranchName(): string | null
    // Has conflict: getBufferChangeMonitor(buffer: Buffer): BufferChangeMonitor | null
    // Has conflict: getConfig(): VcsConfig | null
    // Has conflict: getPriority(): number
    // Has conflict: getWorkingDirectory(): Gio.File
    // Has conflict: isIgnored(file: Gio.File): boolean

    // Own virtual methods of Ide-1.0.Ide.Vcs

    changed(): void
    /**
     * Retrieves the name of the branch in the current working directory.
     * @virtual 
     * @returns A string containing the branch name.
     */
    getBranchName(): string | null
    /**
     * Gets an #IdeBufferChangeMonitor for the buffer provided. If the #IdeVcs implementation does not
     * support change monitoring, or cannot for the current file, then %NULL is returned.
     * @virtual 
     * @param buffer 
     * @returns An #IdeBufferChangeMonitor or %NULL.
     */
    getBufferChangeMonitor(buffer: Buffer): BufferChangeMonitor | null
    /**
     * Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
     * support access to configuration, then %NULL is returned.
     * @virtual 
     * @returns An #IdeVcsConfig or %NULL.
     */
    getConfig(): VcsConfig | null
    getPriority(): number
    /**
     * Retrieves the working directory for the context. This is the root of where
     * the project files exist.
     * @virtual 
     * @returns A #GFile.
     */
    getWorkingDirectory(): Gio.File
    isIgnored(file: Gio.File): boolean

    // Own signals of Ide-1.0.Ide.Vcs

    connect(sigName: "changed", callback: Vcs.ChangedSignalCallback): number
    on(sigName: "changed", callback: Vcs.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: Vcs.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: Vcs.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Vcs

    connect(sigName: "notify::branch-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::branch-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::branch-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::branch-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::branch-name", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::working-directory", callback: (...args: any[]) => void): number
    on(sigName: "notify::working-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::working-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::working-directory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::working-directory", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Vcs extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Vcs

    static name: string

    // Constructors of Ide-1.0.Ide.Vcs

    constructor(config?: Vcs.ConstructorProperties) 
    _init(config?: Vcs.ConstructorProperties): void
    static newAsync(context: Context, ioPriority: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: static newFinish(result: Gio.AsyncResult): Vcs

    // Overloads of newFinish

    static newFinish(result: Gio.AsyncResult): Object
    static registerIgnored(pattern: string | null): void
}

module VcsConfig {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface VcsConfig {

    // Own properties of Ide-1.0.Ide.VcsConfig

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.VcsConfig

    // Has conflict: getConfig(type: VcsConfigType, value: any): void
    // Has conflict: setConfig(type: VcsConfigType, value: any): void

    // Own virtual methods of Ide-1.0.Ide.VcsConfig

    getConfig(type: VcsConfigType, value: any): void
    setConfig(type: VcsConfigType, value: any): void

    // Class property signals of Ide-1.0.Ide.VcsConfig

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class VcsConfig extends GObject.Object {

    // Own properties of Ide-1.0.Ide.VcsConfig

    static name: string

    // Constructors of Ide-1.0.Ide.VcsConfig

    constructor(config?: VcsConfig.ConstructorProperties) 
    _init(config?: VcsConfig.ConstructorProperties): void
}

module VcsInitializer {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface VcsInitializer {

    // Own properties of Ide-1.0.Ide.VcsInitializer

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.VcsInitializer

    // Has conflict: getTitle(): string | null
    // Has conflict: initializeAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: initializeFinish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.VcsInitializer

    getTitle(): string | null
    initializeAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    initializeFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.VcsInitializer

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class VcsInitializer extends GObject.Object {

    // Own properties of Ide-1.0.Ide.VcsInitializer

    static name: string

    // Constructors of Ide-1.0.Ide.VcsInitializer

    constructor(config?: VcsInitializer.ConstructorProperties) 
    _init(config?: VcsInitializer.ConstructorProperties): void
}

module WorkbenchAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface WorkbenchAddin {

    // Own properties of Ide-1.0.Ide.WorkbenchAddin

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.WorkbenchAddin

    // Has conflict: canOpen(uri: Uri, contentType: string | null): [ /* returnType */ boolean, /* priority */ number ]
    // Has conflict: getId(): string | null
    // Has conflict: load(workbench: Workbench): void
    // Has conflict: openAsync(uri: Uri, contentType: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: openFinish(result: Gio.AsyncResult): boolean
    // Has conflict: perspectiveSet(perspective: Perspective): void
    // Has conflict: unload(workbench: Workbench): void

    // Own virtual methods of Ide-1.0.Ide.WorkbenchAddin

    /**
     * This interface method indicates if the workbench addin can load the content
     * found at `uri`. If so, `priority` should be set to an integer priority
     * indicating how important it is for this addin to load `uri`.
     * 
     * The lowest integer value wins. However, a load fails, the next addin which
     * returned %TRUE from this method will be consulted.
     * @virtual 
     * @param uri An #IdeUri.
     * @param contentType A content-type or %NULL.
     * @returns %TRUE if @self and open @uri.
     */
    canOpen(uri: Uri, contentType: string | null): [ /* returnType */ boolean, /* priority */ number ]
    /**
     * Gets the identifier for this workbench addin. By default this is the
     * name of the classes GType (such as "MyObject").
     * 
     * This can be used as the hint to various open operations in IdeWorkbench
     * to prefer a given loader.
     * @virtual 
     * @returns a newly allocated string.
     */
    getId(): string | null
    /**
     * This interface method is called to load `self`. Addin implementations should add any
     * required UI or actions to `workbench` here. You should remove anything you've added
     * in ide_workbench_addin_unload(), as that will be called when your plugin is deactivated
     * or the workbench is in the destruction process.
     * @virtual 
     * @param workbench An #IdeWorkbench
     */
    load(workbench: Workbench): void
    openAsync(uri: Uri, contentType: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    openFinish(result: Gio.AsyncResult): boolean
    /**
     * This function is called when the workbench changes the perspective.
     * 
     * Addins that wish to add buttons to the header bar may want to show or
     * hide the widgets in this vfunc.
     * @virtual 
     * @param perspective An #IdePerspective
     */
    perspectiveSet(perspective: Perspective): void
    /**
     * This interface method should cleanup after anything added to `workbench` in
     * ide_workbench_addin_load().
     * 
     * This might be called when a plugin is deactivated, or the workbench is in the
     * destruction process.
     * @virtual 
     * @param workbench An #IdeWorkbench
     */
    unload(workbench: Workbench): void

    // Class property signals of Ide-1.0.Ide.WorkbenchAddin

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class WorkbenchAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.WorkbenchAddin

    static name: string

    // Constructors of Ide-1.0.Ide.WorkbenchAddin

    constructor(config?: WorkbenchAddin.ConstructorProperties) 
    _init(config?: WorkbenchAddin.ConstructorProperties): void
}

module Worker {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Worker {

    // Own properties of Ide-1.0.Ide.Worker

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Worker

    // Has conflict: createProxy(connection: Gio.DBusConnection): Gio.DBusProxy
    // Has conflict: registerService(connection: Gio.DBusConnection): void

    // Own virtual methods of Ide-1.0.Ide.Worker

    /**
     * Creates a new proxy to be connected to the subprocess peer on the other
     * end of `connection`.
     * @virtual 
     * @param connection A #GDBusConnection connected to the worker process.
     * @returns A #GDBusProxy or %NULL.
     */
    createProxy(connection: Gio.DBusConnection): Gio.DBusProxy
    registerService(connection: Gio.DBusConnection): void

    // Class property signals of Ide-1.0.Ide.Worker

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Worker extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Worker

    static name: string

    // Constructors of Ide-1.0.Ide.Worker

    constructor(config?: Worker.ConstructorProperties) 
    _init(config?: Worker.ConstructorProperties): void
}

module Application {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.ActionMap.ConstructorProperties, Dazzle.Application.ConstructorProperties {
    }

}

interface Application extends Gio.ActionGroup, Gio.ActionMap {

    // Own properties of Ide-1.0.Ide.Application

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Application

    addReaper(reaper: Dazzle.DirectoryReaper): void
    getKeybindingsMode(): string | null
    getMode(): ApplicationMode
    /**
     * This method will retreive an #IdeRecentProjects for the application that
     * represents recent and discover projects on the system. The first time
     * the #IdeRecentProjects is loaded, discovery of projects will occur. There
     * is no need to call ide_recent_projects_discover_async().
     * 
     * If you would like to display a spinner while discovery is in process, simply
     * connect to the #IdeRecentProjects:busy: property notification.
     * @returns An #IdeRecentProjects.
     */
    getRecentProjects(): RecentProjects
    /**
     * Gets the startup time of the application.
     * @returns A #GDateTime.
     */
    getStartedAt(): GLib.DateTime
    /**
     * Asynchronously requests a #GDBusProxy to a service provided in a worker
     * process. The worker should be an #IdeWorker implemented by the plugin named
     * `plugin_name`. The #IdeWorker is responsible for created both the service
     * registered on the bus and the proxy to it.
     * 
     * The #IdeApplication is responsible for spawning a subprocess for the worker.
     * 
     * `callback` should call ide_application_get_worker_finish() with the result
     * provided to retrieve the result.
     * @param pluginName The name of the plugin.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback A #GAsyncReadyCallback or %NULL.
     */
    getWorkerAsync(pluginName: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous request to get a proxy to a worker process.
     * @param result A #GAsyncResult
     * @returns A #GDBusProxy or %NULL.
     */
    getWorkerFinish(result: Gio.AsyncResult): Gio.DBusProxy
    openProject(file: Gio.File): boolean
    showProjectsWindow(): void

    // Class property signals of Ide-1.0.Ide.Application

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::menu-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::menu-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::menu-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::menu-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::menu-manager", ...args: any[]): void
    connect(sigName: "notify::shortcut-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::shortcut-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shortcut-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shortcut-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shortcut-manager", ...args: any[]): void
    connect(sigName: "notify::theme-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::theme-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::theme-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::theme-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::theme-manager", ...args: any[]): void
    connect(sigName: "notify::active-window", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-window", ...args: any[]): void
    connect(sigName: "notify::app-menu", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-menu", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-menu", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-menu", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-menu", ...args: any[]): void
    connect(sigName: "notify::menubar", callback: (...args: any[]) => void): number
    on(sigName: "notify::menubar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::menubar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::menubar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::menubar", ...args: any[]): void
    connect(sigName: "notify::register-session", callback: (...args: any[]) => void): number
    on(sigName: "notify::register-session", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::register-session", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::register-session", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::register-session", ...args: any[]): void
    connect(sigName: "notify::screensaver-active", callback: (...args: any[]) => void): number
    on(sigName: "notify::screensaver-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screensaver-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screensaver-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screensaver-active", ...args: any[]): void
    connect(sigName: "notify::action-group", callback: (...args: any[]) => void): number
    on(sigName: "notify::action-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::application-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::application-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::application-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::application-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::application-id", ...args: any[]): void
    connect(sigName: "notify::flags", callback: (...args: any[]) => void): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::inactivity-timeout", callback: (...args: any[]) => void): number
    on(sigName: "notify::inactivity-timeout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inactivity-timeout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inactivity-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inactivity-timeout", ...args: any[]): void
    connect(sigName: "notify::is-busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-busy", ...args: any[]): void
    connect(sigName: "notify::is-registered", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-registered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-registered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-registered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-registered", ...args: any[]): void
    connect(sigName: "notify::is-remote", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-remote", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-remote", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-remote", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-remote", ...args: any[]): void
    connect(sigName: "notify::resource-base-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::resource-base-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resource-base-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resource-base-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resource-base-path", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Application extends Dazzle.Application {

    // Own properties of Ide-1.0.Ide.Application

    static name: string

    // Constructors of Ide-1.0.Ide.Application

    constructor(config?: Application.ConstructorProperties) 
    constructor() 
    static new(): Application

    // Overloads of new

    static new(applicationId: string | null, flags: Gio.ApplicationFlags): Dazzle.Application
    /**
     * Creates a new #GtkApplication instance.
     * 
     * When using #GtkApplication, it is not necessary to call gtk_init()
     * manually. It is called as soon as the application gets registered as
     * the primary instance.
     * 
     * Concretely, gtk_init() is called in the default handler for the
     * #GApplication::startup signal. Therefore, #GtkApplication subclasses should
     * chain up in their #GApplication::startup handler before using any GTK+ API.
     * 
     * Note that commandline arguments are not passed to gtk_init().
     * All GTK+ functionality that is available via commandline arguments
     * can also be achieved by setting suitable environment variables
     * such as `G_DEBUG`, so this should not be a big
     * problem. If you absolutely must support GTK+ commandline arguments,
     * you can explicitly call gtk_init() before creating the application
     * instance.
     * 
     * If non-%NULL, the application ID must be valid.  See
     * g_application_id_is_valid().
     * 
     * If no application ID is given then some features (most notably application
     * uniqueness) will be disabled. A null application ID is only allowed with
     * GTK+ 3.6 or later.
     * @constructor 
     * @param applicationId The application ID.
     * @param flags the application flags
     * @returns a new #GtkApplication instance
     */
    static new(applicationId: string | null, flags: Gio.ApplicationFlags): Gtk.Application
    /**
     * Creates a new #GApplication instance.
     * 
     * If non-%NULL, the application id must be valid.  See
     * g_application_id_is_valid().
     * 
     * If no application ID is given then some features of #GApplication
     * (most notably application uniqueness) will be disabled.
     * @constructor 
     * @param applicationId the application id
     * @param flags the application flags
     * @returns a new #GApplication instance
     */
    static new(applicationId: string | null, flags: Gio.ApplicationFlags): Gio.Application
    _init(config?: Application.ConstructorProperties): void
    /**
     * This function returns the thread-id of the main thread for the applicaiton.
     * This is only really useful to determine if you are in the main UI thread.
     * This is used by IDE_IS_MAIN_THREAD for assertion checks.
     * @returns A #GThread
     */
    static getMainThread(): GLib.Thread
}

module BackForwardItem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BackForwardItem

        mark?: Gtk.TextMark | null
        /**
         * The #IdeBackForwardItem:uri property contains the location for the
         * back/forward item.
         * 
         * This might be a uri to a file, including a line number.
         * 
         * #IdeWorkbenchAddin can hook how these are loaded, by implementing the
         * IdeWorkbenchAddin::can_open() vfunc and associated functions.
         */
        uri?: Uri | null
    }

}

interface BackForwardItem {

    // Own properties of Ide-1.0.Ide.BackForwardItem

    mark: Gtk.TextMark
    /**
     * The #IdeBackForwardItem:uri property contains the location for the
     * back/forward item.
     * 
     * This might be a uri to a file, including a line number.
     * 
     * #IdeWorkbenchAddin can hook how these are loaded, by implementing the
     * IdeWorkbenchAddin::can_open() vfunc and associated functions.
     */
    readonly uri: Uri
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BackForwardItem

    chain(other: BackForwardItem): boolean
    /**
     * Gets the text mark or %NULL.
     * @returns A #GtkTextMark or %NULL.
     */
    getMark(): Gtk.TextMark
    /**
     * Gets the uri for the #IdeBackForwardItem.
     * @returns An #IdeUri or %NULL.
     */
    getUri(): Uri | null

    // Class property signals of Ide-1.0.Ide.BackForwardItem

    connect(sigName: "notify::mark", callback: (...args: any[]) => void): number
    on(sigName: "notify::mark", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mark", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mark", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mark", ...args: any[]): void
    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BackForwardItem extends Object {

    // Own properties of Ide-1.0.Ide.BackForwardItem

    static name: string

    // Constructors of Ide-1.0.Ide.BackForwardItem

    constructor(config?: BackForwardItem.ConstructorProperties) 
    constructor(context: Context, uri: Uri, mark: Gtk.TextMark) 
    static new(context: Context, uri: Uri, mark: Gtk.TextMark): BackForwardItem
    _init(config?: BackForwardItem.ConstructorProperties): void
}

module BackForwardList {

    // Signal callback interfaces

    /**
     * Signal callback interface for `navigate-to`
     */
    interface NavigateToSignalCallback {
        (object: BackForwardItem): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface BackForwardList {

    // Own properties of Ide-1.0.Ide.BackForwardList

    readonly canGoBackward: boolean
    readonly canGoForward: boolean
    readonly currentItem: BackForwardItem
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BackForwardList

    /**
     * Branches `self` into a newly created #IdeBackForwardList.
     * 
     * This can be used independently and then merged back into a global
     * #IdeBackForwardList. This can be useful in situations where you have
     * multiple sets of editors.
     * @returns An #IdeBackForwardList
     */
    branch(): BackForwardList
    getCanGoBackward(): boolean
    getCanGoForward(): boolean
    /**
     * Retrieves the current #IdeBackForwardItem or %NULL if no items have been
     * added to the #IdeBackForwardList.
     * @returns An #IdeBackForwardItem or %NULL.
     */
    getCurrentItem(): BackForwardItem | null
    goBackward(): void
    goForward(): void
    merge(branch: BackForwardList): void
    push(item: BackForwardItem): void

    // Own signals of Ide-1.0.Ide.BackForwardList

    connect(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback): number
    on(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback): NodeJS.EventEmitter
    emit(sigName: "navigate-to", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BackForwardList

    connect(sigName: "notify::can-go-backward", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-go-backward", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-go-backward", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-go-backward", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-go-backward", ...args: any[]): void
    connect(sigName: "notify::can-go-forward", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-go-forward", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-go-forward", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-go-forward", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-go-forward", ...args: any[]): void
    connect(sigName: "notify::current-item", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-item", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-item", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-item", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-item", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BackForwardList extends Object {

    // Own properties of Ide-1.0.Ide.BackForwardList

    static name: string

    // Constructors of Ide-1.0.Ide.BackForwardList

    constructor(config?: BackForwardList.ConstructorProperties) 
    _init(config?: BackForwardList.ConstructorProperties): void
}

module Buffer {

    // Signal callback interfaces

    /**
     * Signal callback interface for `cursor-moved`
     */
    interface CursorMovedSignalCallback {
        (location: Gtk.TextIter): void
    }

    /**
     * Signal callback interface for `destroy`
     */
    interface DestroySignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `line-flags-changed`
     */
    interface LineFlagsChangedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `loaded`
     */
    interface LoadedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `saved`
     */
    interface SavedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `symbol-resolver-loaded`
     */
    interface SymbolResolverLoadedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.Buffer.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Buffer

        context?: Context | null
        file?: File | null
        highlightDiagnostics?: boolean | null
        styleSchemeName?: string | null
        title?: string | null
    }

}

interface Buffer {

    // Own properties of Ide-1.0.Ide.Buffer

    readonly busy: boolean
    readonly changedOnVolume: boolean
    readonly context: Context
    file: File
    readonly hasDiagnostics: boolean
    highlightDiagnostics: boolean
    readonly readOnly: boolean
    styleSchemeName: string | null
    title: string | null
    __gtype__: number

    // Conflicting properties

    priv: any & Gtk.TextBufferPrivate

    // Own fields of Ide-1.0.Ide.Buffer

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Buffer

    /**
     * Update the #IdeBuffer:read-only property and the corresponding
     * modification time (mtime).
     */
    checkForVolumeChange(): void
    formatSelectionAsync(options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    formatSelectionFinish(result: Gio.AsyncResult): boolean
    /**
     * Gets the #IdeBuffer:busy property.
     * Return whether the buffer is performing background work or not.
     * @returns %TRUE if the #IdeBuffer is performing background work. Otherwise %FALSE.
     */
    getBusy(): boolean
    getChangeCount(): number
    /**
     * Gets if the file backing the buffer has changed on the underlying storage.
     * 
     * Use ide_buffer_manager_load_file_async() to reload the buffer.
     * @returns %TRUE if the file has changed.
     */
    getChangedOnVolume(): boolean
    /**
     * Gets the contents of the buffer as GBytes.
     * 
     * By using this function to get the bytes, you allow #IdeBuffer to avoid calculating the buffer
     * text unnecessarily, potentially saving on allocations.
     * 
     * Additionally, this allows the buffer to update the state in #IdeUnsavedFiles if the content
     * is out of sync.
     * @returns A #GBytes containing the buffer content.
     */
    getContent(): any
    /**
     * Gets the #IdeBuffer:context property. This is the #IdeContext that owns the buffer.
     * @returns An #IdeContext.
     */
    getContext(): Context
    /**
     * Gets the first diagnostic that overlaps the position
     * @param iter a #GtkTextIter.
     * @returns An #IdeDiagnostic or %NULL.
     */
    getDiagnosticAtIter(iter: Gtk.TextIter): Diagnostic | null
    /**
     * Gets the underlying file behind the buffer.
     * @returns An #IdeFile.
     */
    getFile(): File
    /**
     * Gets the #IdeBuffer:highlight-diagnostics property.
     * Return whether the diagnostic warnings and errors should be highlighted.
     * @returns %TRUE if diagnostics are highlighted. Otherwise %FALSE.
     */
    getHighlightDiagnostics(): boolean
    /**
     * Gets the location of the insert mark as an #IdeSourceLocation.
     * @returns An #IdeSourceLocation
     */
    getInsertLocation(): SourceLocation
    /**
     * Fill `iter` with the position designated by `location`.
     * @param location a #IdeSourceLocation.
     */
    getIterAtSourceLocation(location: SourceLocation): /* iter */ Gtk.TextIter
    /**
     * Gets the location of the iter as an #IdeSourceLocation.
     * @param iter 
     * @returns An #IdeSourceLocation
     */
    getIterLocation(iter: Gtk.TextIter): SourceLocation
    /**
     * Return the flags set for the #IdeBuffer `line` number.
     * (diagnostics and errors messages, line changed or added, notes)
     * @param line a buffer line number.
     * @returns An #IdeBufferLineFlags struct.
     */
    getLineFlags(line: number): BufferLineFlags
    /**
     * Gets the #IdeBuffer:read-only property. This property indicate if the underlying file is read only or not.
     * @returns %TRUE if the #IdeBuffer is read only. Otherwise %FALSE.
     */
    getReadOnly(): boolean
    /**
     * Gets the #IdeRenameProvider for this buffer, or %NULL.
     * @returns An #IdeRenameProvider or %NULL if there   is no #IdeRenameProvider that can statisfy the buffer.
     */
    getRenameProvider(): RenameProvider | null
    /**
     * This function acts like gtk_text_buffer_get_selection_bounds() except that it always
     * places the location of the insert mark at `insert` and the location of the selection
     * mark at `selection`.
     * 
     * Calling gtk_text_iter_order() with the results of this function would be equivalent
     * to calling gtk_text_buffer_get_selection_bounds().
     */
    getSelectionBounds(): [ /* insert */ Gtk.TextIter, /* selection */ Gtk.TextIter ]

    // Overloads of getSelectionBounds

    /**
     * Returns %TRUE if some text is selected; places the bounds
     * of the selection in `start` and `end` (if the selection has length 0,
     * then `start` and `end` are filled in with the same value).
     * `start` and `end` will be in ascending order. If `start` and `end` are
     * NULL, then they are not filled in, but the return value still indicates
     * whether text is selected.
     * @returns whether the selection has nonzero length
     */
    getSelectionBounds(): [ /* returnType */ boolean, /* start */ Gtk.TextIter, /* end */ Gtk.TextIter ]
    getSpellChecking(): boolean
    /**
     * Gets the #IdeBuffer:style-scheme-name property.
     * This property contains the current style scheme used by the buffer.
     * @returns A string containing the name of the currently used style scheme.
     */
    getStyleSchemeName(): string | null
    /**
     * Asynchronously get a possible symbol at `location`.
     * @param location a #GtkTextIter indicating a position to search for a symbol.
     * @param cancellable A #GCancellable.
     * @param callback A #GAsyncReadyCallback.
     */
    getSymbolAtLocationAsync(location: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous request to locate a symbol at a location.
     * @param result A #GAsyncResult.
     * @returns An #IdeSymbol or %NULL.
     */
    getSymbolAtLocationFinish(result: Gio.AsyncResult): Symbol
    /**
     * Gets the symbol resolver for the buffer based on the current language.
     * @returns An #IdeSymbolResolver or %NULL.
     */
    getSymbolResolver(): SymbolResolver | null
    /**
     * Gets the #IdeBuffer:title property. This property contains a title for the buffer suitable
     * for display.
     * @returns A string containing the buffer title.
     */
    getTitle(): string | null
    getUri(): string | null
    /**
     * Gets the word found under the position denoted by `iter`.
     * @param iter A #GtkTextIter.
     * @returns A newly allocated string.
     */
    getWordAtIter(iter: Gtk.TextIter): string | null
    hold(): void
    /**
     * Force the #IdeBuffer to rebuild the highlight.
     */
    rehighlight(): void
    release(): void
    /**
     * Sets the underlying file to use when saving and loading `self` to and from storage.
     * @param file An #IdeFile.
     */
    setFile(file: File): void
    /**
     * Sets the #IdeBuffer:highlight-diagnostics property.
     * Sets whether the diagnostic warnings and errors should be highlighted.
     * @param highlightDiagnostics Whether to highlight the diagnostics or not.
     */
    setHighlightDiagnostics(highlightDiagnostics: boolean): void
    setSpellChecking(enable: boolean): void
    /**
     * Sets the #IdeBuffer:style-scheme-name property.
     * Sets the style scheme to be used by this buffer.
     * @param styleSchemeName A string containing the name of the style scheme to use.
     */
    setStyleSchemeName(styleSchemeName: string | null): void
    syncToUnsavedFiles(): void
    /**
     * Trim trailing whitespaces from the buffer.
     */
    trimTrailingWhitespace(): void

    // Own virtual methods of Ide-1.0.Ide.Buffer

    cursorMoved(location: Gtk.TextIter): void

    // Own signals of Ide-1.0.Ide.Buffer

    connect(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback): number
    on(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "cursor-moved", ...args: any[]): void
    connect(sigName: "destroy", callback: Buffer.DestroySignalCallback): number
    on(sigName: "destroy", callback: Buffer.DestroySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: Buffer.DestroySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: Buffer.DestroySignalCallback): NodeJS.EventEmitter
    emit(sigName: "destroy", ...args: any[]): void
    connect(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback): number
    on(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "line-flags-changed", ...args: any[]): void
    connect(sigName: "loaded", callback: Buffer.LoadedSignalCallback): number
    on(sigName: "loaded", callback: Buffer.LoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "loaded", callback: Buffer.LoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "loaded", callback: Buffer.LoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "loaded", ...args: any[]): void
    connect(sigName: "saved", callback: Buffer.SavedSignalCallback): number
    on(sigName: "saved", callback: Buffer.SavedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "saved", callback: Buffer.SavedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "saved", callback: Buffer.SavedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "saved", ...args: any[]): void
    connect(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback): number
    on(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "symbol-resolver-loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Buffer

    connect(sigName: "notify::busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::changed-on-volume", callback: (...args: any[]) => void): number
    on(sigName: "notify::changed-on-volume", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::changed-on-volume", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::changed-on-volume", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::changed-on-volume", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-diagnostics", ...args: any[]): void
    connect(sigName: "notify::highlight-diagnostics", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlight-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlight-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlight-diagnostics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlight-diagnostics", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::style-scheme-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::style-scheme-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style-scheme-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style-scheme-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style-scheme-name", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::can-redo", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-redo", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-redo", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-redo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-redo", ...args: any[]): void
    connect(sigName: "notify::can-undo", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-undo", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-undo", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-undo", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-undo", ...args: any[]): void
    connect(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlight-matching-brackets", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlight-matching-brackets", ...args: any[]): void
    connect(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlight-syntax", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlight-syntax", ...args: any[]): void
    connect(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void): number
    on(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implicit-trailing-newline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implicit-trailing-newline", ...args: any[]): void
    connect(sigName: "notify::language", callback: (...args: any[]) => void): number
    on(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::max-undo-levels", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-undo-levels", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-undo-levels", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-undo-levels", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-undo-levels", ...args: any[]): void
    connect(sigName: "notify::style-scheme", callback: (...args: any[]) => void): number
    on(sigName: "notify::style-scheme", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style-scheme", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style-scheme", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style-scheme", ...args: any[]): void
    connect(sigName: "notify::undo-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::undo-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::undo-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::undo-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::undo-manager", ...args: any[]): void
    connect(sigName: "notify::copy-target-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::copy-target-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::copy-target-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::copy-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::copy-target-list", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::cursor-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cursor-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cursor-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::has-selection", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-selection", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-selection", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-selection", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-selection", ...args: any[]): void
    connect(sigName: "notify::paste-target-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::paste-target-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::paste-target-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::paste-target-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::paste-target-list", ...args: any[]): void
    connect(sigName: "notify::tag-table", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-table", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-table", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-table", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-table", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Buffer extends GtkSource.Buffer {

    // Own properties of Ide-1.0.Ide.Buffer

    static name: string

    // Constructors of Ide-1.0.Ide.Buffer

    constructor(config?: Buffer.ConstructorProperties) 
    _init(config?: Buffer.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

module BufferChangeMonitor {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BufferChangeMonitor

        buffer?: Buffer | null
    }

}

interface BufferChangeMonitor {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitor

    readonly buffer: Buffer
    __gtype__: number

    // Own fields of Ide-1.0.Ide.BufferChangeMonitor

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.BufferChangeMonitor

    emitChanged(): void
    // Has conflict: getChange(iter: Gtk.TextIter): BufferLineChange
    // Has conflict: reload(): void

    // Own virtual methods of Ide-1.0.Ide.BufferChangeMonitor

    getChange(iter: Gtk.TextIter): BufferLineChange
    reload(): void
    setBuffer(buffer: Buffer): void

    // Own signals of Ide-1.0.Ide.BufferChangeMonitor

    connect(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback): number
    on(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BufferChangeMonitor

    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BufferChangeMonitor extends Object {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitor

    static name: string

    // Constructors of Ide-1.0.Ide.BufferChangeMonitor

    constructor(config?: BufferChangeMonitor.ConstructorProperties) 
    _init(config?: BufferChangeMonitor.ConstructorProperties): void
}

module BufferManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `buffer-focus-enter`
     */
    interface BufferFocusEnterSignalCallback {
        (buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-focus-leave`
     */
    interface BufferFocusLeaveSignalCallback {
        (buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-loaded`
     */
    interface BufferLoadedSignalCallback {
        (buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-saved`
     */
    interface BufferSavedSignalCallback {
        (buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-unloaded`
     */
    interface BufferUnloadedSignalCallback {
        (buffer: Buffer): void
    }

    /**
     * Signal callback interface for `create-buffer`
     */
    interface CreateBufferSignalCallback {
        (file: File): Buffer | null
    }

    /**
     * Signal callback interface for `load-buffer`
     */
    interface LoadBufferSignalCallback {
        (buffer: Buffer, createNewView: boolean): void
    }

    /**
     * Signal callback interface for `save-buffer`
     */
    interface SaveBufferSignalCallback {
        (buffer: Buffer): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BufferManager

        autoSave?: boolean | null
        autoSaveTimeout?: number | null
        focusBuffer?: Buffer | null
        minimumWordSize?: number | null
    }

}

interface BufferManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.BufferManager

    autoSave: boolean
    autoSaveTimeout: number
    focusBuffer: Buffer
    minimumWordSize: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BufferManager

    /**
     * Asynchronously requests that all of `edits` are applied to the buffers
     * in the project. If the buffer has not been loaded for a particular edit,
     * it will be loaded.
     * @param edits An #GPtrArray of #IdeProjectEdit
     * @param cancellable A #GCancellable or %NULL
     * @param callback the callback to complete the request
     */
    applyEditsAsync(edits: ProjectEdit[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    applyEditsFinish(result: Gio.AsyncResult): boolean
    /**
     * Creates a new #IdeBuffer that does not yet have a backing file attached to it. Interfaces
     * should perform a save-as operation to save the file to a real file.
     * 
     * ide_file_get_file() will return %NULL to denote this type of buffer.
     * @returns A newly created #IdeBuffer
     */
    createTemporaryBuffer(): Buffer
    /**
     * Gets the buffer for a given file. If it has not yet been loaded, %NULL is
     * returned.
     * @param file A #GFile.
     * @returns An #IdeBuffer or %NULL.
     */
    findBuffer(file: Gio.File): Buffer | null
    /**
     * Returns a newly allocated #GPtrArray of all the buffers managed by the #IdeBufferManager
     * instance.
     * 
     * Buffers are generally not added to the buffer list until they have been loaded.
     * @returns A #GPtrArray of buffers.
     */
    getBuffers(): Buffer[]
    /**
     * Gets the #IdeBufferManager:focus-buffer property. This is the buffer behind
     * the current selected view.
     * @returns An #IdeBuffer or %NULL.
     */
    getFocusBuffer(): Buffer
    /**
     * Gets the #IdeBufferManager:max-file-size property. This contains the maximum file size in bytes
     * that a file may be to be loaded by the #IdeBufferManager.
     * 
     * If zero, no size limits will be enforced.
     * @returns A #gsize in bytes or zero.
     */
    getMaxFileSize(): number
    getNBuffers(): number
    /**
     * Gets the #GtkSourceCompletionWords completion provider that will complete
     * words using the loaded documents.
     * @returns A #GtkSourceCompletionWords
     */
    getWordCompletion(): GtkSource.CompletionWords
    /**
     * Checks to see if the buffer manager has the file loaded.
     * @param file An #IdeFile.
     * @returns %TRUE if @file is loaded.
     */
    hasFile(file: Gio.File): boolean
    /**
     * Asynchronously requests that the file represented by `file` is loaded. If the file is already
     * loaded, the previously loaded version of the file will be returned, asynchronously.
     * 
     * Before loading the file, #IdeBufferManager will check the file size to help protect itself
     * from the user accidentally loading very large files. You can change the maximum size of file
     * that will be loaded with the #IdeBufferManager:max-file-size property.
     * 
     * See ide_buffer_manager_load_file_finish() for how to complete this asynchronous request.
     * @param file 
     * @param forceReload 
     * @param flags 
     * @param cancellable 
     * @param callback 
     */
    loadFileAsync(file: File, forceReload: boolean, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): /* progress */ Progress | null
    /**
     * Completes an asynchronous request to load a file via ide_buffer_manager_load_file_async().
     * If the buffer was already loaded, this function will return a reference to the previous buffer
     * with its reference count incremented by one.
     * @param result 
     * @returns An #IdeBuffer if successful; otherwise %NULL and @error is set.
     */
    loadFileFinish(result: Gio.AsyncResult): Buffer
    saveAllAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    saveAllFinish(result: Gio.AsyncResult): boolean
    /**
     * This function asynchronously requests that a buffer be saved to the storage represented by
     * `file`. `buffer` should be a previously loaded buffer owned by `self,` such as one loaded with
     * ide_buffer_manager_load_file_async().
     * 
     * Call ide_buffer_manager_save_file_finish() to complete this asynchronous request.
     * @param buffer 
     * @param file 
     * @param progress 
     * @param cancellable 
     * @param callback 
     */
    saveFileAsync(buffer: Buffer, file: File, progress: Progress, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * This function completes an asynchronous request to save a buffer to storage using
     * ide_buffer_manager_save_file_async(). Upon failure, %FALSE is returned and `error` is set.
     * @param result 
     * @returns %TRUE if successful %FALSE upon failure and @error is set.
     */
    saveFileFinish(result: Gio.AsyncResult): boolean
    setFocusBuffer(buffer: Buffer): void
    /**
     * Sets the maximum file size in bytes, that will be loaded by the #IdeBufferManager.
     * @param maxFileSize The maximum file size in bytes, or zero for no limit.
     */
    setMaxFileSize(maxFileSize: number): void

    // Own signals of Ide-1.0.Ide.BufferManager

    connect(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback): number
    on(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback): NodeJS.EventEmitter
    emit(sigName: "buffer-focus-enter", ...args: any[]): void
    connect(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback): number
    on(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback): NodeJS.EventEmitter
    emit(sigName: "buffer-focus-leave", ...args: any[]): void
    connect(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback): number
    on(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "buffer-loaded", ...args: any[]): void
    connect(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback): number
    on(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "buffer-saved", ...args: any[]): void
    connect(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback): number
    on(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "buffer-unloaded", ...args: any[]): void
    connect(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback): number
    on(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback): NodeJS.EventEmitter
    emit(sigName: "create-buffer", ...args: any[]): void
    connect(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback): number
    on(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback): NodeJS.EventEmitter
    emit(sigName: "load-buffer", createNewView: boolean, ...args: any[]): void
    connect(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback): number
    on(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-buffer", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BufferManager

    connect(sigName: "notify::auto-save", callback: (...args: any[]) => void): number
    on(sigName: "notify::auto-save", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::auto-save", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::auto-save", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::auto-save", ...args: any[]): void
    connect(sigName: "notify::auto-save-timeout", callback: (...args: any[]) => void): number
    on(sigName: "notify::auto-save-timeout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::auto-save-timeout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::auto-save-timeout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::auto-save-timeout", ...args: any[]): void
    connect(sigName: "notify::focus-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-buffer", ...args: any[]): void
    connect(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): number
    on(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::minimum-word-size", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BufferManager extends Object {

    // Own properties of Ide-1.0.Ide.BufferManager

    static name: string

    // Constructors of Ide-1.0.Ide.BufferManager

    constructor(config?: BufferManager.ConstructorProperties) 
    _init(config?: BufferManager.ConstructorProperties): void
}

module BuildManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `build-failed`
     */
    interface BuildFailedSignalCallback {
        (pipeline: BuildPipeline): void
    }

    /**
     * Signal callback interface for `build-finished`
     */
    interface BuildFinishedSignalCallback {
        (pipeline: BuildPipeline): void
    }

    /**
     * Signal callback interface for `build-started`
     */
    interface BuildStartedSignalCallback {
        (pipeline: BuildPipeline): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.Initable.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface BuildManager extends Gio.ActionGroup, Gio.Initable {

    // Own properties of Ide-1.0.Ide.BuildManager

    /**
     * The "busy" property indicates if there is currently a build
     * executing. This can be bound to UI elements to display to the
     * user that a build is active (and therefore other builds cannot
     * be activated at the moment).
     */
    readonly busy: boolean
    /**
     * Gets if the build manager can queue a build request.
     * 
     * This might be false if the required runtime is not available or other
     * errors in setting up the build pipeline.
     */
    readonly canBuild: boolean
    /**
     * The "has-diagnostics" property indicates that there have been
     * diagnostics found during the last execution of the build pipeline.
     */
    readonly hasDiagnostics: boolean
    /**
     * The "last-build-time" property contains a #GDateTime of the time
     * the last build request was submitted.
     */
    readonly lastBuildTime: GLib.DateTime
    /**
     * The "message" property contains a string message describing
     * the current state of the build process. This may be bound to
     * UI elements to notify the user of the buid progress.
     */
    readonly message: string | null
    readonly pipeline: BuildPipeline
    /**
     * The "running-time" property can be bound by UI elements that
     * want to track how long the current build has taken. g_object_notify()
     * is called on a regular interval during the build so that the UI
     * elements may automatically update.
     * 
     * The value of this property is a #GTimeSpan, which are 64-bit signed
     * integers with microsecond precision. See %G_USEC_PER_SEC for a constant
     * to tranform this to seconds.
     */
    readonly runningTime: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildManager

    /**
     * This function will cancel any in-flight builds.
     * 
     * You may also activate this using the "cancel" #GAction provided
     * by the #GActionGroup interface.
     */
    cancel(): void
    cleanAsync(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    cleanFinish(result: Gio.AsyncResult): boolean
    /**
     * This function will request that `phase` is completed in the underlying
     * build pipeline and execute a build. Upon completion, `callback` will be
     * executed and it can determine the success or failure of the operation
     * using ide_build_manager_execute_finish().
     * @param phase An #IdeBuildPhase or 0
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to execute upon completion
     */
    executeAsync(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes a request to ide_build_manager_execute_async().
     * @param result A #GAsyncResult
     * @returns %TRUE if successful, otherwise %FALSE and @error is set.
     */
    executeFinish(result: Gio.AsyncResult): boolean
    /**
     * Gets if the #IdeBuildManager is currently busy building the
     * project.
     * 
     * See #IdeBuildManager:busy for more information.
     */
    getBusy(): boolean
    getCanBuild(): boolean
    /**
     * This function returns a #GDateTime of the last build request. If
     * there has not yet been a build request, this will return %NULL.
     * 
     * See #IdeBuildManager:last-build-time for more information.
     * @returns A #GDateTime or %NULL.
     */
    getLastBuildTime(): GLib.DateTime | null
    /**
     * This function returns the current build message as a string.
     * 
     * See #IdeBuildManager:message for more information.
     * @returns A string containing the build message or %NULL
     */
    getMessage(): string | null
    /**
     * This function gets the current build pipeline. The pipeline will be
     * reloaded as build configurations change.
     * @returns An #IdeBuildPipeline.
     */
    getPipeline(): BuildPipeline | null
    /**
     * Gets the amount of elapsed time of the current build as a
     * #GTimeSpan.
     * @returns A #GTimeSpan containing the elapsed time of the build.
     */
    getRunningTime(): GLib.TimeSpan
    rebuildAsync(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    rebuildFinish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.BuildManager

    connect(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback): number
    on(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "build-failed", ...args: any[]): void
    connect(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback): number
    on(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "build-finished", ...args: any[]): void
    connect(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback): number
    on(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "build-started", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildManager

    connect(sigName: "notify::busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::can-build", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-build", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-build", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-build", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-build", ...args: any[]): void
    connect(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-diagnostics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-diagnostics", ...args: any[]): void
    connect(sigName: "notify::last-build-time", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-build-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-build-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-build-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-build-time", ...args: any[]): void
    connect(sigName: "notify::message", callback: (...args: any[]) => void): number
    on(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: "notify::pipeline", callback: (...args: any[]) => void): number
    on(sigName: "notify::pipeline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pipeline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pipeline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pipeline", ...args: any[]): void
    connect(sigName: "notify::running-time", callback: (...args: any[]) => void): number
    on(sigName: "notify::running-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::running-time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::running-time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::running-time", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildManager extends Object {

    // Own properties of Ide-1.0.Ide.BuildManager

    static name: string

    // Constructors of Ide-1.0.Ide.BuildManager

    constructor(config?: BuildManager.ConstructorProperties) 
    _init(config?: BuildManager.ConstructorProperties): void
}

module BuildPipeline {

    // Signal callback interfaces

    /**
     * Signal callback interface for `diagnostic`
     */
    interface DiagnosticSignalCallback {
        (diagnostic: Diagnostic): void
    }

    /**
     * Signal callback interface for `finished`
     */
    interface FinishedSignalCallback {
        (failed: boolean): void
    }

    /**
     * Signal callback interface for `started`
     */
    interface StartedSignalCallback {
        (phase: BuildPhase): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildPipeline

        /**
         * Gets the "busy" property. If %TRUE, the pipeline is busy executing.
         */
        busy?: boolean | null
        /**
         * The configuration to use for the build pipeline.
         */
        configuration?: Configuration | null
    }

}

interface BuildPipeline extends Gio.Initable {

    // Own properties of Ide-1.0.Ide.BuildPipeline

    /**
     * Gets the "busy" property. If %TRUE, the pipeline is busy executing.
     */
    busy: boolean
    /**
     * The configuration to use for the build pipeline.
     */
    readonly configuration: Configuration
    readonly message: string | null
    /**
     * The current build phase during execution of the pipeline.
     */
    readonly phase: BuildPhase
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildPipeline

    /**
     * This can be used to add a regex that will extract errors from
     * standard output. This is similar to the "errorformat" feature
     * of vim to extract warnings from standard output.
     * 
     * The regex should used named capture groups to pass information
     * to the extraction process.
     * 
     * Supported group names are:
     * 
     *  • filename (a string path)
     *  • line (an integer)
     *  • column (an integer)
     *  • level (a string)
     *  • message (a string)
     * 
     * For example, to extract warnings from GCC you might do something
     * like the following:
     * 
     *   "(?<filename>[a-zA-Z0-9\\-\\.\\/]+):"
     *   "(?<line>\\d+):"
     *   "(?<column>\\d+): "
     *   "(?<level>[\\w\\s]+): "
     *   "(?<message>.*)"
     * 
     * To remove the regex, use the ide_build_pipeline_remove_error_format()
     * function with the resulting format id returned from this function.
     * 
     * The resulting format id will be > 0 if successful.
     * @param regex A regex to be compiled
     * @param flags 
     * @returns an error format id that may be passed to   ide_build_pipeline_remove_error_format().
     */
    addErrorFormat(regex: string | null, flags: GLib.RegexCompileFlags): number
    addLogObserver(observer: BuildLogObserver): number
    cleanAsync(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    cleanFinish(result: Gio.AsyncResult): boolean
    /**
     * Insert `stage` into the pipeline as part of the phase denoted by `phase`.
     * 
     * If priority is non-zero, it will be used to sort the stage among other
     * stages that are part of the same phase.
     * @param phase An #IdeBuildPhase
     * @param priority an optional priority for sorting within the phase
     * @param stage An #IdeBuildStage
     * @returns A stage_id that may be passed to ide_build_pipeline_disconnect().
     */
    connect(phase: BuildPhase, priority: number, stage: BuildStage): number
    /**
     * This creates a new stage that will spawn a process using `launcher` and log
     * the output of stdin/stdout.
     * 
     * It is a programmer error to modify `launcher` after passing it to this
     * function.
     * @param phase An #IdeBuildPhase
     * @param priority an optional priority for sorting within the phase
     * @param launcher An #IdeSubprocessLauncher
     * @returns A stage_id that may be passed to ide_build_pipeline_remove().
     */
    connectLauncher(phase: BuildPhase, priority: number, launcher: SubprocessLauncher): number
    /**
     * This is a convenience function to create a new #IdeSubprocessLauncher
     * using the configuration and runtime associated with the pipeline.
     * @returns An #IdeSubprocessLauncher.
     */
    createLauncher(): SubprocessLauncher
    /**
     * This removes the stage matching `stage_id`. You are returned a `stage_id` when
     * inserting a stage with functions such as ide_build_pipeline_connect()
     * or ide_build_pipeline_connect_launcher().
     * 
     * Plugins should use this function to remove their stages when the plugin
     * is unloading.
     * @param stageId An identifier returned from adding a stage
     */
    disconnect(stageId: number): void
    emitDiagnostic(diagnostic: Diagnostic): void
    /**
     * Asynchronously starts the build pipeline.
     * 
     * Any phase that has been invalidated up to the requested phase
     * will be executed until a stage has failed.
     * 
     * Upon completion, `callback` will be executed and should call
     * ide_build_pipeline_execute_finish() to get the status of the
     * operation.
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to execute upon completion
     */
    executeAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    executeFinish(result: Gio.AsyncResult): boolean
    /**
     * This function will call `stage_callback` for every #IdeBuildStage registered
     * in the pipeline.
     * @param stageCallback A callback for each #IdePipelineStage
     */
    foreachStage(stageCallback: GLib.Func): void
    /**
     * Gets the "builddir" to be used for the build process. This is generally
     * the location that build systems will use for out-of-tree builds.
     * @returns the path of the build directory
     */
    getBuilddir(): string | null
    getBusy(): boolean
    /**
     * Gets the #IdeConfiguration to use for the pipeline.
     * @returns An #IdeConfiguration
     */
    getConfiguration(): Configuration
    /**
     * Gets the current message for the build pipeline. This can be
     * shown to users in UI elements to signify progress in the
     * build.
     * @returns A string representing the   current stage of the build, or %NULL.
     */
    getMessage(): string | null
    /**
     * Gets the "srcdir" of the project. This is equivalent to the
     * IdeVcs:working-directory property as a string.
     * @returns the path of the source directory
     */
    getSrcdir(): string | null
    /**
     * Gets the stage matching the identifier `stage_id` as returned from
     * ide_build_pipeline_connect().
     * @param stageId the identfier of the stage
     * @returns An #IdeBuildStage or %NULL if the   stage could not be found.
     */
    getStageById(stageId: number): BuildStage | null
    /**
     * Invalidates the phases matching `phases` flags.
     * 
     * If the requested phases include the phases invalidated here, the next
     * execution of the pipeline will execute thse phases.
     * 
     * This should be used by plugins to ensure a particular phase is re-executed
     * upon discovering its state is no longer valid. Such an example might be
     * invalidating the %IDE_BUILD_PHASE_AUTOGEN phase when the an autotools
     * projects autogen.sh file has been changed.
     * @param phases The phases to invalidate
     */
    invalidatePhase(phases: BuildPhase): void
    rebuildAsync(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    rebuildFinish(result: Gio.AsyncResult): boolean
    /**
     * Removes an error format that was registered with
     * ide_build_pipeline_add_error_format().
     * @param errorFormatId an identifier for the error format.
     * @returns %TRUE if the error format was removed.
     */
    removeErrorFormat(errorFormatId: number): boolean
    removeLogObserver(observerId: number): boolean
    /**
     * Requests that the next execution of the pipeline will build up to `phase`
     * including all stages that were previously invalidated.
     * @param phase An #IdeBuildPhase
     * @returns %TRUE if a stage is known to require execution.
     */
    requestPhase(phase: BuildPhase): boolean

    // Own signals of Ide-1.0.Ide.BuildPipeline

    connect(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback): number
    on(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback): NodeJS.EventEmitter
    emit(sigName: "diagnostic", ...args: any[]): void
    connect(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback): number
    on(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "finished", ...args: any[]): void
    connect(sigName: "started", callback: BuildPipeline.StartedSignalCallback): number
    on(sigName: "started", callback: BuildPipeline.StartedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "started", callback: BuildPipeline.StartedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "started", callback: BuildPipeline.StartedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "started", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildPipeline

    connect(sigName: "notify::busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::configuration", callback: (...args: any[]) => void): number
    on(sigName: "notify::configuration", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::configuration", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::configuration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::configuration", ...args: any[]): void
    connect(sigName: "notify::message", callback: (...args: any[]) => void): number
    on(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: "notify::phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::phase", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #IdeBuildPipeline is responsible for managing the build process
 * for Builder. It consists of multiple build "phases" (see #IdeBuildPhase
 * for the individual phases). An #IdeBuildStage can be attached with
 * a priority to each phase and is the primary mechanism that plugins
 * use to perform their operations in the proper ordering.
 * 
 * For example, the flatpak plugin provides its download stage as part of the
 * %IDE_BUILD_PHASE_DOWNLOAD phase. The autotools plugin provides stages to
 * phases such as %IDE_BUILD_PHASE_AUTOGEN, %IDE_BUILD_PHASE_CONFIGURE,
 * %IDE_BUILD_PHASE_BUILD, and %IDE_BUILD_PHASE_INSTALL.
 * 
 * If you want ensure a particular phase is performed as part of a build,
 * then fall ide_build_pipeline_request_phase() with the phase you are
 * interested in seeing complete successfully.
 * 
 * If your plugin has discovered that something has changed that invalidates a
 * given phase, use ide_build_pipeline_invalidate_phase() to ensure that the
 * phase is re-executed the next time a requested phase of higher precidence
 * is requested.
 * 
 * It can be useful to perform operations before or after a given stage (but
 * still be executed as part of that stage) so the %IDE_BUILD_PHASE_BEFORE and
 * %IDE_BUILD_PHASE_AFTER flags may be xor'd with the requested phase.  If more
 * precise ordering is required, you may use the priority parameter to order
 * the operation with regards to other stages in that phase.
 * 
 * Transient stages may be added to the pipeline and they will be removed after
 * the ide_build_pipeline_execute_async() operation has completed successfully
 * or has failed. You can mark a stage as trandient with
 * ide_build_stage_set_transient(). This may be useful to perform operations
 * such as an "export tarball" stage which should only run once as determined
 * by the user requesting a "make dist" style operation.
 * @class 
 */
class BuildPipeline extends Object {

    // Own properties of Ide-1.0.Ide.BuildPipeline

    static name: string

    // Constructors of Ide-1.0.Ide.BuildPipeline

    constructor(config?: BuildPipeline.ConstructorProperties) 
    _init(config?: BuildPipeline.ConstructorProperties): void
}

module BuildStage {

    // Signal callback interfaces

    /**
     * Signal callback interface for `chain`
     */
    interface ChainSignalCallback {
        (object: BuildStage): boolean
    }

    /**
     * Signal callback interface for `query`
     */
    interface QuerySignalCallback {
        (pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): void
    }

    /**
     * Signal callback interface for `reap`
     */
    interface ReapSignalCallback {
        (reaper: Dazzle.DirectoryReaper): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStage

        /**
         * Most build systems will preserve stderr for the processes they call, such
         * as gcc, clang, and others. However, if your build system redirects all
         * output to stdout, you may need to set this property to %TRUE to ensure
         * that Builder will extract errors from stdout.
         * 
         * One such example is Ninja.
         */
        checkStdout?: boolean | null
        /**
         * The "completed" property is set to %TRUE after the pipeline has
         * completed processing the stage. When the pipeline invalidates
         * phases, completed may be reset to %FALSE.
         */
        completed?: boolean | null
        /**
         * If the build stage is disabled. This allows you to have a stage that is
         * attached but will not be activated during execution.
         * 
         * You may enable it later and then re-execute the pipeline.
         * 
         * If the stage is both transient and disabled, it will not be removed during
         * the transient cleanup phase.
         */
        disabled?: boolean | null
        /**
         * The name of the build stage. This is only used by UI to view
         * the build pipeline.
         */
        name?: string | null
        /**
         * The "stdout-path" property allows a build stage to redirect its log
         * messages to a stdout file. Instead of passing stdout along to the
         * build pipeline, they will be redirected to this file.
         * 
         * For safety reasons, the contents are first redirected to a temporary
         * file and will be redirected to the stdout-path location after the
         * build stage has completed executing.
         */
        stdoutPath?: string | null
        /**
         * If the build stage is transient.
         * 
         * A transient build stage is removed after the completion of
         * ide_build_pipeline_execute_async(). This can be a convenient
         * way to add a temporary item to a build pipeline that should
         * be immediately discarded.
         */
        transient?: boolean | null
    }

}

interface BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStage

    /**
     * Most build systems will preserve stderr for the processes they call, such
     * as gcc, clang, and others. However, if your build system redirects all
     * output to stdout, you may need to set this property to %TRUE to ensure
     * that Builder will extract errors from stdout.
     * 
     * One such example is Ninja.
     */
    checkStdout: boolean
    /**
     * The "completed" property is set to %TRUE after the pipeline has
     * completed processing the stage. When the pipeline invalidates
     * phases, completed may be reset to %FALSE.
     */
    completed: boolean
    /**
     * If the build stage is disabled. This allows you to have a stage that is
     * attached but will not be activated during execution.
     * 
     * You may enable it later and then re-execute the pipeline.
     * 
     * If the stage is both transient and disabled, it will not be removed during
     * the transient cleanup phase.
     */
    disabled: boolean
    /**
     * The name of the build stage. This is only used by UI to view
     * the build pipeline.
     */
    name: string | null
    /**
     * The "stdout-path" property allows a build stage to redirect its log
     * messages to a stdout file. Instead of passing stdout along to the
     * build pipeline, they will be redirected to this file.
     * 
     * For safety reasons, the contents are first redirected to a temporary
     * file and will be redirected to the stdout-path location after the
     * build stage has completed executing.
     */
    stdoutPath: string | null
    /**
     * If the build stage is transient.
     * 
     * A transient build stage is removed after the completion of
     * ide_build_pipeline_execute_async(). This can be a convenient
     * way to add a temporary item to a build pipeline that should
     * be immediately discarded.
     */
    transient: boolean
    __gtype__: number

    // Own fields of Ide-1.0.Ide.BuildStage

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.BuildStage

    // Has conflict: chain(next: BuildStage): boolean
    // Has conflict: cleanAsync(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: cleanFinish(result: Gio.AsyncResult): boolean
    emitReap(reaper: Dazzle.DirectoryReaper): void
    // Has conflict: executeAsync(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: executeFinish(result: Gio.AsyncResult): boolean
    getCheckStdout(): boolean
    getCompleted(): boolean
    getDisabled(): boolean
    getName(): string | null
    getStdoutPath(): string | null
    getTransient(): boolean
    log(stream: BuildLogStream, message: string | null, messageLen: number): void
    /**
     * This function will begin logging `subprocess` by reading from the
     * stdout and stderr streams of the subprocess. You must have created
     * the subprocess with %G_SUBPROCESS_FLAGS_STDERR_PIPE and
     * %G_SUBPROCESS_FLAGS_STDOUT_PIPE so that the streams may be read.
     * @param subprocess An #IdeSubprocess
     */
    logSubprocess(subprocess: Subprocess): void
    pause(): void
    setCheckStdout(checkStdout: boolean): void
    setCompleted(completed: boolean): void
    setDisabled(disabled: boolean): void
    /**
     * Sets the log observer to handle calls to the various stage logging
     * functions. This will be set by the pipeline to mux logs from all
     * stages into a unified build log.
     * 
     * Plugins that need to handle logging from a build stage should set
     * an observer on the pipeline so that log distribution may be fanned
     * out to all observers.
     * @param observer The observer for the log entries
     */
    setLogObserver(observer: BuildLogObserver): void
    setName(name: string | null): void
    setStdoutPath(path: string | null): void
    setTransient(transient: boolean): void
    unpause(): void

    // Own virtual methods of Ide-1.0.Ide.BuildStage

    chain(next: BuildStage): boolean
    cleanAsync(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    cleanFinish(result: Gio.AsyncResult): boolean
    execute(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): boolean
    executeAsync(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    executeFinish(result: Gio.AsyncResult): boolean
    query(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): void
    reap(reaper: Dazzle.DirectoryReaper): void

    // Own signals of Ide-1.0.Ide.BuildStage

    connect(sigName: "chain", callback: BuildStage.ChainSignalCallback): number
    on(sigName: "chain", callback: BuildStage.ChainSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "chain", callback: BuildStage.ChainSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "chain", callback: BuildStage.ChainSignalCallback): NodeJS.EventEmitter
    emit(sigName: "chain", ...args: any[]): void
    connect(sigName: "query", callback: BuildStage.QuerySignalCallback): number
    on(sigName: "query", callback: BuildStage.QuerySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "query", callback: BuildStage.QuerySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "query", callback: BuildStage.QuerySignalCallback): NodeJS.EventEmitter
    emit(sigName: "query", cancellable: Gio.Cancellable | null, ...args: any[]): void
    connect(sigName: "reap", callback: BuildStage.ReapSignalCallback): number
    on(sigName: "reap", callback: BuildStage.ReapSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "reap", callback: BuildStage.ReapSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "reap", callback: BuildStage.ReapSignalCallback): NodeJS.EventEmitter
    emit(sigName: "reap", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildStage

    connect(sigName: "notify::check-stdout", callback: (...args: any[]) => void): number
    on(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::check-stdout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::stdout-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (...args: any[]) => void): number
    on(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transient", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildStage extends Object {

    // Own properties of Ide-1.0.Ide.BuildStage

    static name: string

    // Constructors of Ide-1.0.Ide.BuildStage

    constructor(config?: BuildStage.ConstructorProperties) 
    _init(config?: BuildStage.ConstructorProperties): void
}

module BuildStageLauncher {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStageLauncher

        cleanLauncher?: SubprocessLauncher | null
        ignoreExitStatus?: boolean | null
        launcher?: SubprocessLauncher | null
    }

}

interface BuildStageLauncher {

    // Own properties of Ide-1.0.Ide.BuildStageLauncher

    cleanLauncher: SubprocessLauncher
    ignoreExitStatus: boolean
    launcher: SubprocessLauncher
    __gtype__: number

    // Own fields of Ide-1.0.Ide.BuildStageLauncher

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.BuildStageLauncher

    getCleanLauncher(): SubprocessLauncher | null
    /**
     * Gets the "ignore-exit-status" property.
     * 
     * If set to %TRUE, a non-zero exit status from the subprocess will not cause
     * the build stage to fail.
     */
    getIgnoreExitStatus(): boolean
    getLauncher(): SubprocessLauncher
    setCleanLauncher(cleanLauncher: SubprocessLauncher): void
    /**
     * Sets the "ignore-exit-status" property.
     * 
     * If set to %TRUE, a non-zero exit status from the subprocess will not cause
     * the build stage to fail.
     * @param ignoreExitStatus 
     */
    setIgnoreExitStatus(ignoreExitStatus: boolean): void
    setLauncher(launcher: SubprocessLauncher): void

    // Class property signals of Ide-1.0.Ide.BuildStageLauncher

    connect(sigName: "notify::clean-launcher", callback: (...args: any[]) => void): number
    on(sigName: "notify::clean-launcher", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::clean-launcher", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::clean-launcher", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::clean-launcher", ...args: any[]): void
    connect(sigName: "notify::ignore-exit-status", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignore-exit-status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignore-exit-status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignore-exit-status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignore-exit-status", ...args: any[]): void
    connect(sigName: "notify::launcher", callback: (...args: any[]) => void): number
    on(sigName: "notify::launcher", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::launcher", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::launcher", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::launcher", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::check-stdout", callback: (...args: any[]) => void): number
    on(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::check-stdout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::stdout-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (...args: any[]) => void): number
    on(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transient", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildStageLauncher extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageLauncher

    static name: string

    // Constructors of Ide-1.0.Ide.BuildStageLauncher

    constructor(config?: BuildStageLauncher.ConstructorProperties) 
    /**
     * Creates a new #IdeBuildStageLauncher that can be attached to an
     * #IdeBuildPipeline.
     * @constructor 
     * @param context An #IdeContext
     * @param launcher An #IdeSubprocessLauncher or %NULL
     * @returns An #IdeBuildStageLauncher
     */
    constructor(context: Context, launcher: SubprocessLauncher | null) 
    /**
     * Creates a new #IdeBuildStageLauncher that can be attached to an
     * #IdeBuildPipeline.
     * @constructor 
     * @param context An #IdeContext
     * @param launcher An #IdeSubprocessLauncher or %NULL
     * @returns An #IdeBuildStageLauncher
     */
    static new(context: Context, launcher: SubprocessLauncher | null): BuildStageLauncher
    _init(config?: BuildStageLauncher.ConstructorProperties): void
}

module BuildStageMkdirs {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {
    }

}

interface BuildStageMkdirs {

    // Own properties of Ide-1.0.Ide.BuildStageMkdirs

    __gtype__: number

    // Own fields of Ide-1.0.Ide.BuildStageMkdirs

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.BuildStageMkdirs

    addPath(path: string | null, withParents: boolean, mode: number): void

    // Class property signals of Ide-1.0.Ide.BuildStageMkdirs

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::check-stdout", callback: (...args: any[]) => void): number
    on(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::check-stdout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::stdout-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (...args: any[]) => void): number
    on(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transient", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildStageMkdirs extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageMkdirs

    static name: string

    // Constructors of Ide-1.0.Ide.BuildStageMkdirs

    constructor(config?: BuildStageMkdirs.ConstructorProperties) 
    constructor(context: Context) 
    static new(context: Context): BuildStageMkdirs
    _init(config?: BuildStageMkdirs.ConstructorProperties): void
}

module BuildStageTransfer {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStageTransfer

        disableWhenMetered?: boolean | null
        transfer?: Transfer | null
    }

}

interface BuildStageTransfer {

    // Own properties of Ide-1.0.Ide.BuildStageTransfer

    disableWhenMetered: boolean
    readonly transfer: Transfer
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Class property signals of Ide-1.0.Ide.BuildStageTransfer

    connect(sigName: "notify::disable-when-metered", callback: (...args: any[]) => void): number
    on(sigName: "notify::disable-when-metered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disable-when-metered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disable-when-metered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disable-when-metered", ...args: any[]): void
    connect(sigName: "notify::transfer", callback: (...args: any[]) => void): number
    on(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transfer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::check-stdout", callback: (...args: any[]) => void): number
    on(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::check-stdout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::check-stdout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (...args: any[]) => void): number
    on(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disabled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disabled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::stdout-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::stdout-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (...args: any[]) => void): number
    on(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transient", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transient", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildStageTransfer extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageTransfer

    static name: string

    // Constructors of Ide-1.0.Ide.BuildStageTransfer

    constructor(config?: BuildStageTransfer.ConstructorProperties) 
    constructor(context: Context, transfer: Transfer) 
    static new(context: Context, transfer: Transfer): BuildStageTransfer
    _init(config?: BuildStageTransfer.ConstructorProperties): void
}

module BuildconfigConfiguration {

    // Constructor properties interface

    interface ConstructorProperties extends Configuration.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildconfigConfiguration

        postbuild?: string[] | null
        prebuild?: string[] | null
    }

}

interface BuildconfigConfiguration {

    // Own properties of Ide-1.0.Ide.BuildconfigConfiguration

    postbuild: string[]
    prebuild: string[]
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.BuildconfigConfiguration

    getPostbuild(): string[]
    getPrebuild(): string[]
    setPostbuild(postbuild: string | null): void
    setPrebuild(prebuild: string | null): void

    // Class property signals of Ide-1.0.Ide.BuildconfigConfiguration

    connect(sigName: "notify::postbuild", callback: (...args: any[]) => void): number
    on(sigName: "notify::postbuild", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::postbuild", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::postbuild", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::postbuild", ...args: any[]): void
    connect(sigName: "notify::prebuild", callback: (...args: any[]) => void): number
    on(sigName: "notify::prebuild", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prebuild", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prebuild", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prebuild", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::app-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-id", ...args: any[]): void
    connect(sigName: "notify::build-commands", callback: (...args: any[]) => void): number
    on(sigName: "notify::build-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::build-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::build-commands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::build-commands", ...args: any[]): void
    connect(sigName: "notify::config-opts", callback: (...args: any[]) => void): number
    on(sigName: "notify::config-opts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::config-opts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::config-opts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::config-opts", ...args: any[]): void
    connect(sigName: "notify::debug", callback: (...args: any[]) => void): number
    on(sigName: "notify::debug", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::debug", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::debug", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::debug", ...args: any[]): void
    connect(sigName: "notify::device", callback: (...args: any[]) => void): number
    on(sigName: "notify::device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device", ...args: any[]): void
    connect(sigName: "notify::device-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-id", ...args: any[]): void
    connect(sigName: "notify::dirty", callback: (...args: any[]) => void): number
    on(sigName: "notify::dirty", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dirty", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dirty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dirty", ...args: any[]): void
    connect(sigName: "notify::display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (...args: any[]) => void): number
    on(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::environ", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::parallelism", callback: (...args: any[]) => void): number
    on(sigName: "notify::parallelism", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parallelism", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parallelism", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parallelism", ...args: any[]): void
    connect(sigName: "notify::post-install-commands", callback: (...args: any[]) => void): number
    on(sigName: "notify::post-install-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::post-install-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::post-install-commands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::post-install-commands", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::ready", callback: (...args: any[]) => void): number
    on(sigName: "notify::ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ready", ...args: any[]): void
    connect(sigName: "notify::runtime", callback: (...args: any[]) => void): number
    on(sigName: "notify::runtime", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::runtime", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::runtime", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::runtime", ...args: any[]): void
    connect(sigName: "notify::runtime-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::runtime-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::runtime-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::runtime-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::runtime-id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildconfigConfiguration extends Configuration {

    // Own properties of Ide-1.0.Ide.BuildconfigConfiguration

    static name: string

    // Constructors of Ide-1.0.Ide.BuildconfigConfiguration

    constructor(config?: BuildconfigConfiguration.ConstructorProperties) 
    _init(config?: BuildconfigConfiguration.ConstructorProperties): void
}

module BuildconfigConfigurationProvider {

    // Constructor properties interface

    interface ConstructorProperties extends ConfigurationProvider.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildconfigConfigurationProvider extends ConfigurationProvider {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationProvider

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.BuildconfigConfigurationProvider

    trackConfig(config: BuildconfigConfiguration): void

    // Class property signals of Ide-1.0.Ide.BuildconfigConfigurationProvider

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BuildconfigConfigurationProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationProvider

    static name: string

    // Constructors of Ide-1.0.Ide.BuildconfigConfigurationProvider

    constructor(config?: BuildconfigConfigurationProvider.ConstructorProperties) 
    _init(config?: BuildconfigConfigurationProvider.ConstructorProperties): void
}

module CompletionItem {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface CompletionItem {

    // Own properties of Ide-1.0.Ide.CompletionItem

    __gtype__: number

    // Own fields of Ide-1.0.Ide.CompletionItem

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.CompletionItem

    // Has conflict: match(query: string | null, casefold: string | null): boolean
    setPriority(priority: number): void

    // Own virtual methods of Ide-1.0.Ide.CompletionItem

    match(query: string | null, casefold: string | null): boolean

    // Class property signals of Ide-1.0.Ide.CompletionItem

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CompletionItem extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionItem

    static name: string

    // Constructors of Ide-1.0.Ide.CompletionItem

    constructor(config?: CompletionItem.ConstructorProperties) 
    constructor() 
    static new(): CompletionItem
    _init(config?: CompletionItem.ConstructorProperties): void
    static fuzzyHighlight(haystack: string | null, casefoldQuery: string | null): string | null
    /**
     * This helper function can do a fuzzy match for you giving a haystack and
     * casefolded needle. Casefold your needle using g_utf8_casefold() before
     * running the query against a batch of #IdeCompletionItem for the best performance.
     * 
     * score will be set with the score of the match upon success. Otherwise,
     * it will be set to zero.
     * @param haystack the string to be searched.
     * @param casefoldNeedle A g_utf8_casefold() version of the needle.
     * @returns %TRUE if @haystack matched @casefold_needle, otherwise %FALSE.
     */
    static fuzzyMatch(haystack: string | null, casefoldNeedle: string | null): [ /* returnType */ boolean, /* priority */ number ]
}

module CompletionResults {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.CompletionResults

        query?: string | null
    }

}

interface CompletionResults {

    // Own properties of Ide-1.0.Ide.CompletionResults

    readonly query: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.CompletionResults

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.CompletionResults

    getQuery(): string | null
    getSize(): number
    invalidateSort(): void
    present(provider: GtkSource.CompletionProvider, context: GtkSource.CompletionContext): void
    replay(query: string | null): boolean
    takeProposal(proposal: CompletionItem): void

    // Own virtual methods of Ide-1.0.Ide.CompletionResults

    compare(left: CompletionItem, right: CompletionItem): number

    // Class property signals of Ide-1.0.Ide.CompletionResults

    connect(sigName: "notify::query", callback: (...args: any[]) => void): number
    on(sigName: "notify::query", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::query", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::query", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::query", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CompletionResults extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionResults

    static name: string

    // Constructors of Ide-1.0.Ide.CompletionResults

    constructor(config?: CompletionResults.ConstructorProperties) 
    constructor(query: string | null) 
    static new(query: string | null): CompletionResults
    _init(config?: CompletionResults.ConstructorProperties): void
}

module CompletionWords {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, GtkSource.CompletionWords.ConstructorProperties {
    }

}

interface CompletionWords extends GtkSource.CompletionProvider {

    // Own properties of Ide-1.0.Ide.CompletionWords

    __gtype__: number

    // Class property signals of Ide-1.0.Ide.CompletionWords

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::activation", callback: (...args: any[]) => void): number
    on(sigName: "notify::activation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::activation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::activation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::activation", ...args: any[]): void
    connect(sigName: "notify::icon", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::interactive-delay", callback: (...args: any[]) => void): number
    on(sigName: "notify::interactive-delay", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::interactive-delay", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::interactive-delay", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::interactive-delay", ...args: any[]): void
    connect(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): number
    on(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::minimum-word-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::minimum-word-size", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::priority", callback: (...args: any[]) => void): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::priority", ...args: any[]): void
    connect(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void): number
    on(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::proposals-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::proposals-batch-size", ...args: any[]): void
    connect(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void): number
    on(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scan-batch-size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scan-batch-size", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CompletionWords extends GtkSource.CompletionWords {

    // Own properties of Ide-1.0.Ide.CompletionWords

    static name: string

    // Constructors of Ide-1.0.Ide.CompletionWords

    constructor(config?: CompletionWords.ConstructorProperties) 
    _init(config?: CompletionWords.ConstructorProperties): void
}

module Configuration {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Configuration

        appId?: string | null
        buildCommands?: string[] | null
        configOpts?: string | null
        debug?: boolean | null
        device?: Device | null
        deviceId?: string | null
        dirty?: boolean | null
        displayName?: string | null
        id?: string | null
        parallelism?: number | null
        postInstallCommands?: string[] | null
        prefix?: string | null
        runtime?: Runtime | null
        runtimeId?: string | null
    }

}

interface Configuration {

    // Own properties of Ide-1.0.Ide.Configuration

    appId: string | null
    buildCommands: string[]
    configOpts: string | null
    debug: boolean
    device: Device
    deviceId: string | null
    dirty: boolean
    displayName: string | null
    readonly environ: string[]
    readonly id: string | null
    parallelism: number
    postInstallCommands: string[]
    prefix: string | null
    readonly ready: boolean
    runtime: Runtime
    runtimeId: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Configuration

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Configuration

    /**
     * Copies the configuration into a new configuration.
     * @returns An #IdeConfiguration.
     */
    duplicate(): Configuration
    /**
     * Gets the application ID for the configuration.
     * @returns A string.
     */
    getAppId(): string | null
    getBuildCommands(): string[]
    getConfigOpts(): string | null
    getDebug(): boolean
    // Has conflict: getDevice(): Device | null
    getDeviceId(): string | null
    getDirty(): boolean
    getDisplayName(): string | null
    /**
     * Gets the environment to use when spawning processes.
     * @returns An array of key=value environment variables.
     */
    getEnviron(): string[]
    getEnvironment(): Environment
    getId(): string | null
    getInternalBoolean(key: string | null): boolean
    getInternalInt(key: string | null): number
    getInternalInt64(key: string | null): number
    /**
     * Gets the value associated with `key` if it is a #GObject.
     * @param key The key to get
     * @returns A #GObject or %NULL.
     */
    getInternalObject(key: string | null): GObject.Object | null
    getInternalString(key: string | null): string | null
    getInternalStrv(key: string | null): string[]
    getParallelism(): number
    getPostInstallCommands(): string[]
    getPrefix(): string | null
    /**
     * Determines if the configuration is ready for use. That means that the
     * build device can be accessed and the runtime is loaded. This may change
     * at runtime as devices and runtimes are added or removed.
     * @returns %TRUE if the configuration is ready for use.
     */
    getReady(): boolean
    // Has conflict: getRuntime(): Runtime | null
    getRuntimeId(): string | null
    /**
     * This returns a sequence number for the configuration. This is useful
     * for build systems that want to clear the "dirty" bit on the configuration
     * so that they need not bootstrap a second time. This should be done by
     * checking the sequence number before executing the bootstrap, and only
     * cleared if the sequence number matches after performing the bootstrap.
     * This indicates no changes have been made to the configuration in the
     * mean time.
     * @returns A monotonic sequence number.
     */
    getSequence(): number
    getenv(key: string | null): string | null
    setAppId(appId: string | null): void
    setBuildCommands(buildCommands: string | null): void
    setConfigOpts(configOpts: string | null): void
    setDebug(debug: boolean): void
    // Has conflict: setDevice(device: Device): void
    setDeviceId(deviceId: string | null): void
    setDirty(dirty: boolean): void
    setDisplayName(displayName: string | null): void
    setEnvironment(environment: Environment): void
    setInternalBoolean(key: string | null, value: boolean): void
    setInternalInt(key: string | null, value: number): void
    setInternalInt64(key: string | null, value: number): void
    /**
     * Sets the value for `key` to `instance`.
     * @param key the key to set
     * @param instance A #GObject or %NULL
     */
    setInternalObject(key: string | null, instance: GObject.Object | null): void
    setInternalString(key: string | null, value: string | null): void
    setInternalStrv(key: string | null, value: string | null): void
    setParallelism(parallelism: number): void
    setPostInstallCommands(postInstallCommands: string | null): void
    setPrefix(prefix: string | null): void
    // Has conflict: setRuntime(runtime: Runtime): void
    setRuntimeId(runtimeId: string | null): void
    setenv(key: string | null, value: string | null): void
    /**
     * Makes a snapshot of the configuration that can be used by build processes
     * to build the project without synchronizing with other threads.
     * @returns A newly allocated #IdeConfiguration.
     */
    snapshot(): Configuration
    // Has conflict: supportsDevice(device: Device): boolean
    // Has conflict: supportsRuntime(runtime: Runtime): boolean

    // Own virtual methods of Ide-1.0.Ide.Configuration

    /**
     * Gets the device for the configuration.
     * @virtual 
     * @returns An #IdeDevice.
     */
    getDevice(): Device | null
    /**
     * Gets the runtime for the configuration.
     * @virtual 
     * @returns An #IdeRuntime
     */
    getRuntime(): Runtime | null
    setDevice(device: Device): void
    setRuntime(runtime: Runtime): void
    supportsDevice(device: Device): boolean
    supportsRuntime(runtime: Runtime): boolean

    // Own signals of Ide-1.0.Ide.Configuration

    connect(sigName: "changed", callback: Configuration.ChangedSignalCallback): number
    on(sigName: "changed", callback: Configuration.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: Configuration.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: Configuration.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Configuration

    connect(sigName: "notify::app-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-id", ...args: any[]): void
    connect(sigName: "notify::build-commands", callback: (...args: any[]) => void): number
    on(sigName: "notify::build-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::build-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::build-commands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::build-commands", ...args: any[]): void
    connect(sigName: "notify::config-opts", callback: (...args: any[]) => void): number
    on(sigName: "notify::config-opts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::config-opts", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::config-opts", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::config-opts", ...args: any[]): void
    connect(sigName: "notify::debug", callback: (...args: any[]) => void): number
    on(sigName: "notify::debug", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::debug", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::debug", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::debug", ...args: any[]): void
    connect(sigName: "notify::device", callback: (...args: any[]) => void): number
    on(sigName: "notify::device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device", ...args: any[]): void
    connect(sigName: "notify::device-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-id", ...args: any[]): void
    connect(sigName: "notify::dirty", callback: (...args: any[]) => void): number
    on(sigName: "notify::dirty", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::dirty", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::dirty", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::dirty", ...args: any[]): void
    connect(sigName: "notify::display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (...args: any[]) => void): number
    on(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::environ", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::parallelism", callback: (...args: any[]) => void): number
    on(sigName: "notify::parallelism", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parallelism", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parallelism", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parallelism", ...args: any[]): void
    connect(sigName: "notify::post-install-commands", callback: (...args: any[]) => void): number
    on(sigName: "notify::post-install-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::post-install-commands", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::post-install-commands", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::post-install-commands", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::ready", callback: (...args: any[]) => void): number
    on(sigName: "notify::ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ready", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ready", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ready", ...args: any[]): void
    connect(sigName: "notify::runtime", callback: (...args: any[]) => void): number
    on(sigName: "notify::runtime", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::runtime", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::runtime", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::runtime", ...args: any[]): void
    connect(sigName: "notify::runtime-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::runtime-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::runtime-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::runtime-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::runtime-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Configuration extends Object {

    // Own properties of Ide-1.0.Ide.Configuration

    static name: string

    // Constructors of Ide-1.0.Ide.Configuration

    constructor(config?: Configuration.ConstructorProperties) 
    constructor(context: Context, id: string | null, deviceId: string | null, runtimeId: string | null) 
    static new(context: Context, id: string | null, deviceId: string | null, runtimeId: string | null): Configuration
    _init(config?: Configuration.ConstructorProperties): void
}

module ConfigurationManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `invalidate`
     */
    interface InvalidateSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ConfigurationManager

        current?: Configuration | null
    }

}

interface ConfigurationManager extends Gio.AsyncInitable, Gio.ListModel {

    // Own properties of Ide-1.0.Ide.ConfigurationManager

    current: Configuration
    readonly currentDisplayName: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ConfigurationManager

    add(configuration: Configuration): void
    /**
     * Gets the #IdeConfiguration by id. See ide_configuration_get_id().
     * @param id The string identifier of the configuration
     * @returns An #IdeConfiguration or %NULL if   the configuration could not be found.
     */
    getConfiguration(id: string | null): Configuration | null
    /**
     * Gets the current configuration to use for building.
     * 
     * Many systems allow you to pass a configuration in instead of relying on the
     * default configuration. This gets the default configuration that various
     * background items might use, such as tags builders which need to discover
     * settings.
     * @returns An #IdeConfiguration
     */
    getCurrent(): Configuration
    remove(configuration: Configuration): void
    saveAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    saveFinish(result: Gio.AsyncResult): boolean
    setCurrent(configuration: Configuration): void

    // Own signals of Ide-1.0.Ide.ConfigurationManager

    connect(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback): number
    on(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback): NodeJS.EventEmitter
    emit(sigName: "invalidate", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ConfigurationManager

    connect(sigName: "notify::current", callback: (...args: any[]) => void): number
    on(sigName: "notify::current", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current", ...args: any[]): void
    connect(sigName: "notify::current-display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-display-name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ConfigurationManager extends Object {

    // Own properties of Ide-1.0.Ide.ConfigurationManager

    static name: string

    // Constructors of Ide-1.0.Ide.ConfigurationManager

    constructor(config?: ConfigurationManager.ConstructorProperties) 
    _init(config?: ConfigurationManager.ConstructorProperties): void
}

module Context {

    // Signal callback interfaces

    /**
     * Signal callback interface for `loaded`
     */
    interface LoadedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Context

        projectFile?: Gio.File | null
        rootBuildDir?: string | null
        snippetsManager?: SourceSnippetsManager | null
    }

}

interface Context extends Gio.AsyncInitable {

    // Own properties of Ide-1.0.Ide.Context

    readonly backForwardList: BackForwardList
    readonly bufferManager: BufferManager
    readonly buildSystem: BuildSystem
    readonly configurationManager: ConfigurationManager
    readonly deviceManager: DeviceManager
    readonly project: Project
    readonly projectFile: Gio.File
    rootBuildDir: string | null
    readonly runtimeManager: RuntimeManager
    readonly searchEngine: SearchEngine
    snippetsManager: SourceSnippetsManager
    readonly unsavedFiles: UnsavedFiles
    readonly vcs: Vcs
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Context

    /**
     * Retrieves the global back forward list for the #IdeContext.
     * 
     * Consumers of this should branch the #IdeBackForwardList and merge them
     * when their document stack is closed.
     * 
     * See ide_back_forward_list_branch() and ide_back_forward_list_merge() for
     * more information.
     * @returns An #IdeBackForwardList.
     */
    getBackForwardList(): BackForwardList
    /**
     * Gets the #IdeContext:buffer-manager property. The buffer manager is responsible for loading
     * and saving buffers (files) within the #IdeContext. It provides a convenient place for scripts
     * to hook into the load and save process.
     * @returns An #IdeBufferManager.
     */
    getBufferManager(): BufferManager
    getBuildManager(): BuildManager
    /**
     * Fetches the "build-system" property of `context`.
     * @returns An #IdeBuildSystem.
     */
    getBuildSystem(): BuildSystem
    /**
     * Gets the #IdeConfigurationManager for the context.
     * 
     * The configuration manager is responsible for loading and saving
     * configurations. Configurations consist of information about how to
     * perform a particular build. Such information includes the target
     * #IdeDevice, the #IdeRuntime to use, and various other build options.
     * @returns An #IdeConfigurationManager.
     */
    getConfigurationManager(): ConfigurationManager
    /**
     * Retrieves the "device-manager" property. The device manager is responsible
     * for connecting and disconnecting to physical or virtual devices within
     * LibIDE.
     * @returns An #IdeDeviceManager.
     */
    getDeviceManager(): DeviceManager
    /**
     * Gets the #IdeDiagnosticsManager for the context.
     * @returns An #IdeDiagnosticsManager.
     */
    getDiagnosticsManager(): DiagnosticsManager
    /**
     * Retrieves the #IdeProject for the context.
     * @returns An #IdeContext.
     */
    getProject(): Project
    /**
     * Retrieves a #GFile containing the project file that was used to load
     * the context.
     * @returns A #GFile.
     */
    getProjectFile(): Gio.File
    /**
     * Gets the IdeContext:recent-manager property. The recent manager is a GtkRecentManager instance
     * that should be used for the workbench.
     * @returns A #GtkRecentManager.
     */
    getRecentManager(): Gtk.RecentManager
    /**
     * Retrieves the "root-build-dir" for the context. This is the root directory
     * that will contain builds made for various devices.
     * @returns A string containing the "root-build-dir" property.
     */
    getRootBuildDir(): string | null
    /**
     * Gets the #IdeRunManager for the context. This manager object simplifies
     * the process of running an #IdeBuildTarget from the build system. Primarily,
     * it enforces that only a single target may be run at a time, since that is
     * what the UI will expect.
     * @returns An #IdeRunManager.
     */
    getRunManager(): RunManager
    /**
     * Gets the #IdeRuntimeManager for the LibIDE context.
     * 
     * The runtime manager provies access to #IdeRuntime instances via the
     * #GListModel interface. These can provide support for building projects
     * in various runtimes such as xdg-app.
     * @returns An #IdeRuntimeManager.
     */
    getRuntimeManager(): RuntimeManager
    /**
     * Retrieves the search engine for the context.
     * @returns An #IdeSearchEngine.
     */
    getSearchEngine(): SearchEngine
    /**
     * Retrieves a service matching `service_type`. If no match was found, a type
     * implementing the requested service type will be returned. If no matching
     * service type could be found, then an instance of the service will be
     * created, started, and returned.
     * @param serviceType A #GType of the service desired.
     * @returns An #IdeService or %NULL.
     */
    getServiceTyped(serviceType: GObject.GType): Service | null
    /**
     * Gets an #IdeSettings representing the given #GSettingsSchema.
     * 
     * relative_path will be used to apply multiple layers of settings. Project settings will be
     * applied to first, followed by global settings.
     * @param schemaId 
     * @param relativePath 
     * @returns An #IdeSettings.
     */
    getSettings(schemaId: string | null, relativePath: string | null): Settings
    /**
     * Gets the #IdeContext:snippets-manager property.
     * @returns An #IdeSourceSnippetsManager.
     */
    getSnippetsManager(): SourceSnippetsManager
    /**
     * Gets the #IdeTransferManager for the context.
     * @returns An #IdeTransferManager.
     */
    getTransferManager(): TransferManager
    /**
     * Returns the unsaved files for the #IdeContext. These are the contents of
     * open buffers in the IDE.
     * @returns An #IdeUnsavedFiles.
     */
    getUnsavedFiles(): UnsavedFiles
    /**
     * Retrieves the #IdeVcs used to load the project. If no version control system
     * could be found, this will return an #IdeDirectoryVcs.
     * @returns An #IdeVcs.
     */
    getVcs(): Vcs
    /**
     * Puts a hold on the #IdeContext, preventing the context from being unloaded
     * until a call to ide_context_release().
     * 
     * If ide_context_unload_async() is called while a hold is in progress, the
     * unload will be delayed until ide_context_release() has been called the
     * same number of times as ide_context_hold().
     */
    hold(): void
    /**
     * Adds a hold on `self` for the lifetime of `instance`.
     * @param instance A #GObject instance
     */
    holdForObject(instance: GObject.Object): void
    /**
     * Releases a hold on the context previously created with ide_context_hold().
     * 
     * If a pending unload of the context has been requested, it will be dispatched
     * once the hold count reaches zero.
     */
    release(): void
    restoreAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    restoreFinish(result: Gio.AsyncResult): boolean
    /**
     * Sets the "root-build-dir" property. This is the root directory that will
     * be used when building projects for projects that support building out of
     * tree.
     * @param rootBuildDir the path to the root build directory.
     */
    setRootBuildDir(rootBuildDir: string | null): void
    /**
     * This function attempts to unload various components in the #IdeContext. This
     * should be called before you dispose the context. Unsaved buffers will be
     * persisted to the drafts directory.  More operations may be added in the
     * future.
     * 
     * If there is a hold on the #IdeContext, created by ide_context_hold(), then
     * the unload request will be delayed until the appropriate number of calls to
     * ide_context_release() have been called.
     * @param cancellable 
     * @param callback 
     */
    unloadAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    unloadFinish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.Context

    connect(sigName: "loaded", callback: Context.LoadedSignalCallback): number
    on(sigName: "loaded", callback: Context.LoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "loaded", callback: Context.LoadedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "loaded", callback: Context.LoadedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Context

    connect(sigName: "notify::back-forward-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::back-forward-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::back-forward-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::back-forward-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::back-forward-list", ...args: any[]): void
    connect(sigName: "notify::buffer-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer-manager", ...args: any[]): void
    connect(sigName: "notify::build-system", callback: (...args: any[]) => void): number
    on(sigName: "notify::build-system", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::build-system", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::build-system", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::build-system", ...args: any[]): void
    connect(sigName: "notify::configuration-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::configuration-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::configuration-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::configuration-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::configuration-manager", ...args: any[]): void
    connect(sigName: "notify::device-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-manager", ...args: any[]): void
    connect(sigName: "notify::project", callback: (...args: any[]) => void): number
    on(sigName: "notify::project", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::project", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::project", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::project", ...args: any[]): void
    connect(sigName: "notify::project-file", callback: (...args: any[]) => void): number
    on(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::project-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: "notify::root-build-dir", callback: (...args: any[]) => void): number
    on(sigName: "notify::root-build-dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root-build-dir", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root-build-dir", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root-build-dir", ...args: any[]): void
    connect(sigName: "notify::runtime-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::runtime-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::runtime-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::runtime-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::runtime-manager", ...args: any[]): void
    connect(sigName: "notify::search-engine", callback: (...args: any[]) => void): number
    on(sigName: "notify::search-engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::search-engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::search-engine", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::search-engine", ...args: any[]): void
    connect(sigName: "notify::snippets-manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::snippets-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::snippets-manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::snippets-manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::snippets-manager", ...args: any[]): void
    connect(sigName: "notify::unsaved-files", callback: (...args: any[]) => void): number
    on(sigName: "notify::unsaved-files", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unsaved-files", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unsaved-files", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unsaved-files", ...args: any[]): void
    connect(sigName: "notify::vcs", callback: (...args: any[]) => void): number
    on(sigName: "notify::vcs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vcs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vcs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vcs", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Context extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Context

    static name: string

    // Constructors of Ide-1.0.Ide.Context

    constructor(config?: Context.ConstructorProperties) 
    static newFinish(result: Gio.AsyncResult): Context
    _init(config?: Context.ConstructorProperties): void
    static newAsync(projectFile: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
}

module Cursor {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Cursor

        ideSourceView?: SourceView | null
    }

}

interface Cursor {

    // Own properties of Ide-1.0.Ide.Cursor

    ideSourceView: SourceView
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Cursor

    addCursor(type: number): void
    insertText(text: string | null, len: number): void
    isEnabled(): boolean
    removeCursors(): void

    // Class property signals of Ide-1.0.Ide.Cursor

    connect(sigName: "notify::ide-source-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::ide-source-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ide-source-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ide-source-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ide-source-view", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Cursor extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Cursor

    static name: string

    // Constructors of Ide-1.0.Ide.Cursor

    constructor(config?: Cursor.ConstructorProperties) 
    _init(config?: Cursor.ConstructorProperties): void
}

module Device {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Device

        displayName?: string | null
        id?: string | null
    }

}

interface Device {

    // Own properties of Ide-1.0.Ide.Device

    displayName: string | null
    id: string | null
    readonly systemType: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Device

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Device

    /**
     * This function returns the name of the device. If no name has been set, then
     * %NULL is returned.
     * 
     * In some cases, this value wont be available until additional information
     * has been probed from the device.
     * @returns A string containing the display name for the device.
     */
    getDisplayName(): string | null
    /**
     * Retrieves the "id" property of the #IdeDevice. This is generally not a
     * user friendly name as it is often a guid.
     * @returns A unique identifier for the device.
     */
    getId(): string | null
    // Has conflict: getSystemType(): string | null
    // Has conflict: prepareConfiguration(configuration: Configuration): void
    setDisplayName(displayName: string | null): void
    setId(id: string | null): void

    // Own virtual methods of Ide-1.0.Ide.Device

    /**
     * This is the description of the system we are building for. Commonly, this
     * is referred to as a "system_type". A combination of the machine architecture
     * such as x86_64, the operating system, and the libc.
     * 
     * "x86_64-linux-gnu" might be one such system.
     * @virtual 
     * @returns A string containing the system type.
     */
    getSystemType(): string | null
    prepareConfiguration(configuration: Configuration): void

    // Class property signals of Ide-1.0.Ide.Device

    connect(sigName: "notify::display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::system-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Device extends Object {

    // Own properties of Ide-1.0.Ide.Device

    static name: string

    // Constructors of Ide-1.0.Ide.Device

    constructor(config?: Device.ConstructorProperties) 
    _init(config?: Device.ConstructorProperties): void
}

module DeviceManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `device-added`
     */
    interface DeviceAddedSignalCallback {
        (object: DeviceProvider, p0: Device): void
    }

    /**
     * Signal callback interface for `device-removed`
     */
    interface DeviceRemovedSignalCallback {
        (object: DeviceProvider, p0: Device): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DeviceManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.DeviceManager

    readonly settled: boolean
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.DeviceManager

    addProvider(provider: DeviceProvider): void
    /**
     * Fetches the first device that matches the device identifier `device_id`.
     * @param deviceId The device identifier string.
     * @returns An #IdeDevice or %NULL.
     */
    getDevice(deviceId: string | null): Device
    /**
     * Retrieves all of the devices that are registered with the #IdeDeviceManager.
     * @returns An array of devices   registered with the #IdeManager.
     */
    getDevices(): Device[]
    getSettled(): boolean
    removeProvider(provider: DeviceProvider): void

    // Own signals of Ide-1.0.Ide.DeviceManager

    connect(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback): number
    on(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "device-added", p0: Device, ...args: any[]): void
    connect(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback): number
    on(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "device-removed", p0: Device, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DeviceManager

    connect(sigName: "notify::settled", callback: (...args: any[]) => void): number
    on(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::settled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DeviceManager extends Object {

    // Own properties of Ide-1.0.Ide.DeviceManager

    static name: string

    // Constructors of Ide-1.0.Ide.DeviceManager

    constructor(config?: DeviceManager.ConstructorProperties) 
    _init(config?: DeviceManager.ConstructorProperties): void
}

module DiagnosticsManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DiagnosticsManager extends Gio.Initable {

    // Own properties of Ide-1.0.Ide.DiagnosticsManager

    readonly busy: boolean
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.DiagnosticsManager

    /**
     * Gets if the diagnostics manager is currently executing a diagnosis.
     * @returns %TRUE if the #IdeDiagnosticsManager is busy diagnosing.
     */
    getBusy(): boolean
    /**
     * This function collects all of the diagnostics that have been collected
     * for `file` and returns them as a new #IdeDiagnostics to the caller.
     * 
     * The #IdeDiagnostics structure will contain zero items if there are
     * no diagnostics discovered. Therefore, this function will never return
     * a %NULL value.
     * @param file A #GFile to retrieve diagnostics for
     * @returns A new #IdeDiagnostics.
     */
    getDiagnosticsForFile(file: Gio.File): Diagnostics
    getSequenceForFile(file: Gio.File): number
    updateGroupByFile(buffer: Buffer, newFile: Gio.File): void

    // Own signals of Ide-1.0.Ide.DiagnosticsManager

    connect(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback): number
    on(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DiagnosticsManager

    connect(sigName: "notify::busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DiagnosticsManager extends Object {

    // Own properties of Ide-1.0.Ide.DiagnosticsManager

    static name: string

    // Constructors of Ide-1.0.Ide.DiagnosticsManager

    constructor(config?: DiagnosticsManager.ConstructorProperties) 
    _init(config?: DiagnosticsManager.ConstructorProperties): void
}

module DirectoryBuildSystem {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, BuildSystem.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DirectoryBuildSystem

        projectFile?: Gio.File | null
    }

}

interface DirectoryBuildSystem extends Gio.AsyncInitable, BuildSystem {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystem

    readonly projectFile: Gio.File
    __gtype__: number

    // Class property signals of Ide-1.0.Ide.DirectoryBuildSystem

    connect(sigName: "notify::project-file", callback: (...args: any[]) => void): number
    on(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::project-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::project-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DirectoryBuildSystem extends Object {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystem

    static name: string

    // Constructors of Ide-1.0.Ide.DirectoryBuildSystem

    constructor(config?: DirectoryBuildSystem.ConstructorProperties) 
    _init(config?: DirectoryBuildSystem.ConstructorProperties): void
}

module DirectoryVcs {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, Vcs.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DirectoryVcs extends Gio.AsyncInitable, Vcs {

    // Own properties of Ide-1.0.Ide.DirectoryVcs

    __gtype__: number

    // Class property signals of Ide-1.0.Ide.DirectoryVcs

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::branch-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::branch-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::branch-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::branch-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::branch-name", ...args: any[]): void
    connect(sigName: "notify::working-directory", callback: (...args: any[]) => void): number
    on(sigName: "notify::working-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::working-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::working-directory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::working-directory", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DirectoryVcs extends Object {

    // Own properties of Ide-1.0.Ide.DirectoryVcs

    static name: string

    // Constructors of Ide-1.0.Ide.DirectoryVcs

    constructor(config?: DirectoryVcs.ConstructorProperties) 
    _init(config?: DirectoryVcs.ConstructorProperties): void
}

module Doap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Doap

        bugDatabase?: string | null
        category?: string | null
        description?: string | null
        downloadPage?: string | null
        homepage?: string | null
        languages?: string | null
        name?: string | null
        shortdesc?: string | null
    }

}

interface Doap {

    // Own properties of Ide-1.0.Ide.Doap

    bugDatabase: string | null
    category: string | null
    description: string | null
    downloadPage: string | null
    homepage: string | null
    languages: string | null
    name: string | null
    shortdesc: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Doap

    getBugDatabase(): string | null
    getCategory(): string | null
    getDescription(): string | null
    getDownloadPage(): string | null
    getHomepage(): string | null
    getLanguages(): string[]
    getMaintainers(): DoapPerson[]
    getName(): string | null
    getShortdesc(): string | null
    loadFromData(data: string | null, length: number): boolean
    loadFromFile(file: Gio.File, cancellable: Gio.Cancellable | null): boolean

    // Class property signals of Ide-1.0.Ide.Doap

    connect(sigName: "notify::bug-database", callback: (...args: any[]) => void): number
    on(sigName: "notify::bug-database", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bug-database", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bug-database", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bug-database", ...args: any[]): void
    connect(sigName: "notify::category", callback: (...args: any[]) => void): number
    on(sigName: "notify::category", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::category", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::category", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::category", ...args: any[]): void
    connect(sigName: "notify::description", callback: (...args: any[]) => void): number
    on(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::download-page", callback: (...args: any[]) => void): number
    on(sigName: "notify::download-page", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::download-page", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::download-page", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::download-page", ...args: any[]): void
    connect(sigName: "notify::homepage", callback: (...args: any[]) => void): number
    on(sigName: "notify::homepage", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homepage", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homepage", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homepage", ...args: any[]): void
    connect(sigName: "notify::languages", callback: (...args: any[]) => void): number
    on(sigName: "notify::languages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::languages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::languages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::languages", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::shortdesc", callback: (...args: any[]) => void): number
    on(sigName: "notify::shortdesc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shortdesc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shortdesc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shortdesc", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Doap extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Doap

    static name: string

    // Constructors of Ide-1.0.Ide.Doap

    constructor(config?: Doap.ConstructorProperties) 
    constructor() 
    static new(): Doap
    _init(config?: Doap.ConstructorProperties): void
}

module DoapPerson {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DoapPerson

        email?: string | null
        name?: string | null
    }

}

interface DoapPerson {

    // Own properties of Ide-1.0.Ide.DoapPerson

    email: string | null
    name: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.DoapPerson

    getEmail(): string | null
    getName(): string | null
    setEmail(email: string | null): void
    setName(name: string | null): void

    // Class property signals of Ide-1.0.Ide.DoapPerson

    connect(sigName: "notify::email", callback: (...args: any[]) => void): number
    on(sigName: "notify::email", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::email", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::email", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::email", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DoapPerson extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DoapPerson

    static name: string

    // Constructors of Ide-1.0.Ide.DoapPerson

    constructor(config?: DoapPerson.ConstructorProperties) 
    constructor() 
    static new(): DoapPerson
    _init(config?: DoapPerson.ConstructorProperties): void
}

module EditorPerspective {

    // Signal callback interfaces

    /**
     * Signal callback interface for `view-added`
     */
    interface ViewAddedSignalCallback {
        (object: Gtk.Widget): void
    }

    /**
     * Signal callback interface for `view-removed`
     */
    interface ViewRemovedSignalCallback {
        (object: Gtk.Widget): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Dock.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Perspective.ConstructorProperties, Dazzle.DockOverlay.ConstructorProperties {
    }

}

interface EditorPerspective extends Atk.ImplementorIface, Dazzle.Dock, Dazzle.DockItem, Gtk.Buildable, Perspective {

    // Own properties of Ide-1.0.Ide.EditorPerspective

    readonly activeView: Gtk.Widget
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.EditorPerspective

    focusBufferInCurrentStack(buffer: Buffer): void
    focusLocation(location: SourceLocation): void
    getActiveView(): Gtk.Widget | null
    getBottomEdge(): Gtk.Widget
    /**
     * Gets the center widget for the editor perspective.
     * @returns A #GtkWidget or %NULL.
     */
    getCenterWidget(): Gtk.Widget | null
    /**
     * Gets the #IdeLayout widget for the editor perspective.
     * @returns A #IdeLayout or %NULL.
     */
    getLayout(): Layout | null
    getLeftEdge(): Gtk.Widget
    /**
     * self: an #IdeEditorPerspective.
     * position: a #GtkPositionType.
     * @param position 
     * @returns A #DzlDockOverlayEdge
     */
    getOverlayEdge(position: Gtk.PositionType): Dazzle.DockOverlayEdge
    getRightEdge(): Gtk.Widget
    getTopEdge(): Gtk.Widget
    showSpellchecker(sourceView: SourceView): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    getChildVisible(child: Dazzle.DockItem): boolean

    // Overloads of getChildVisible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    getParent(): Dazzle.DockItem | null

    // Overloads of getParent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    setChildVisible(child: Dazzle.DockItem, childVisible: boolean): void

    // Overloads of setChildVisible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Gets the icon_name for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "icon-name" property
     * you can set. But this can be helpful for integration of various container
     * widgets.
     * @virtual 
     * @returns A newly allocated string or %NULL.
     */
    getIconName(): string | null
    /**
     * This interface methods retrieves the icon name to use when displaying the
     * perspective selection sidebar.
     * 
     * If you implement an "icon-name" property, the icon may change at runtime.
     * @virtual 
     * @returns A newly allcoated string that contains the icon-name   to use for the perspective.
     */
    getIconName(): string | null
    /**
     * Gets the title for the #DzlDockItem.
     * 
     * Generally, you want to use a #DzlDockWidget which has a "title" property you
     * can set. But this can be helpful for integration of various container
     * widgets.
     * @virtual 
     * @returns A newly allocated string or %NULL.
     */
    getTitle(): string | null
    /**
     * This interface method gets the title of the perspective. This is used for tooltips
     * in the perspective selector and potentially other UI components.
     * @virtual 
     * @returns A string which will not be modified or freed.
     */
    getTitle(): string | null

    // Own signals of Ide-1.0.Ide.EditorPerspective

    connect(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback): number
    on(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "view-added", ...args: any[]): void
    connect(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback): number
    on(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "view-removed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.EditorPerspective

    connect(sigName: "notify::active-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::above-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::above-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::above-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::above-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::above-child", ...args: any[]): void
    connect(sigName: "notify::visible-window", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible-window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible-window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible-window", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::manager", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class EditorPerspective extends Dazzle.DockOverlay {

    // Own properties of Ide-1.0.Ide.EditorPerspective

    static name: string

    // Constructors of Ide-1.0.Ide.EditorPerspective

    constructor(config?: EditorPerspective.ConstructorProperties) 
    _init(config?: EditorPerspective.ConstructorProperties): void
}

module EditorView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        (object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, LayoutView.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.EditorView

        document?: Buffer | null
    }

}

interface EditorView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.EditorView

    readonly document: Buffer
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.EditorView

    getActiveSourceView(): SourceView
    getDocument(): Buffer

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.EditorView

    connect(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback): number
    on(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "request-documentation", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.EditorView

    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::can-split", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-split", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-split", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-split", ...args: any[]): void
    connect(sigName: "notify::modified", callback: (...args: any[]) => void): number
    on(sigName: "notify::modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::modified", ...args: any[]): void
    connect(sigName: "notify::special-title", callback: (...args: any[]) => void): number
    on(sigName: "notify::special-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::special-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::special-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::special-title", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class EditorView extends LayoutView {

    // Own properties of Ide-1.0.Ide.EditorView

    static name: string

    // Constructors of Ide-1.0.Ide.EditorView

    constructor(config?: EditorView.ConstructorProperties) 
    _init(config?: EditorView.ConstructorProperties): void
}

module Environment {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Environment extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.Environment

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Environment

    append(variable: EnvironmentVariable): void
    /**
     * Copies the contents of #IdeEnvironment into a newly allocated #IdeEnvironment.
     * @returns An #IdeEnvironment.
     */
    copy(): Environment
    /**
     * Gets the environment as a set of key=value pairs, suitable for use
     * in various GLib process functions.
     * @returns A newly allocated string array.
     */
    getEnviron(): string[]
    getenv(key: string | null): string | null
    remove(variable: EnvironmentVariable): void
    setenv(key: string | null, value: string | null): void

    // Own signals of Ide-1.0.Ide.Environment

    connect(sigName: "changed", callback: Environment.ChangedSignalCallback): number
    on(sigName: "changed", callback: Environment.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: Environment.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: Environment.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Environment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Environment extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Environment

    static name: string

    // Constructors of Ide-1.0.Ide.Environment

    constructor(config?: Environment.ConstructorProperties) 
    constructor() 
    static new(): Environment
    _init(config?: Environment.ConstructorProperties): void
}

module EnvironmentVariable {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.EnvironmentVariable

        key?: string | null
        value?: string | null
    }

}

interface EnvironmentVariable {

    // Own properties of Ide-1.0.Ide.EnvironmentVariable

    key: string | null
    value: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.EnvironmentVariable

    getKey(): string | null
    getValue(): string | null
    setKey(key: string | null): void
    setValue(value: string | null): void

    // Class property signals of Ide-1.0.Ide.EnvironmentVariable

    connect(sigName: "notify::key", callback: (...args: any[]) => void): number
    on(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class EnvironmentVariable extends GObject.Object {

    // Own properties of Ide-1.0.Ide.EnvironmentVariable

    static name: string

    // Constructors of Ide-1.0.Ide.EnvironmentVariable

    constructor(config?: EnvironmentVariable.ConstructorProperties) 
    constructor(key: string | null, value: string | null) 
    static new(key: string | null, value: string | null): EnvironmentVariable
    _init(config?: EnvironmentVariable.ConstructorProperties): void
}

module ExtensionAdapter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ExtensionAdapter

        engine?: Peas.Engine | null
        interfaceType?: GObject.GType | null
        key?: string | null
        value?: string | null
    }

}

interface ExtensionAdapter {

    // Own properties of Ide-1.0.Ide.ExtensionAdapter

    readonly engine: Peas.Engine
    readonly extension: GObject.Object
    readonly interfaceType: GObject.GType
    key: string | null
    value: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ExtensionAdapter

    /**
     * Gets the #IdeExtensionAdapter:engine property.
     * @returns A #PeasEngine.
     */
    getEngine(): Peas.Engine
    /**
     * Gets the extension object managed by the adapter.
     * @returns A #GObject or %NULL.
     */
    getExtension(): GObject.Object
    getInterfaceType(): GObject.GType
    getKey(): string | null
    getValue(): string | null
    setKey(key: string | null): void
    setValue(value: string | null): void

    // Class property signals of Ide-1.0.Ide.ExtensionAdapter

    connect(sigName: "notify::engine", callback: (...args: any[]) => void): number
    on(sigName: "notify::engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::engine", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::engine", ...args: any[]): void
    connect(sigName: "notify::extension", callback: (...args: any[]) => void): number
    on(sigName: "notify::extension", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::extension", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::extension", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::extension", ...args: any[]): void
    connect(sigName: "notify::interface-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::interface-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::interface-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::interface-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::interface-type", ...args: any[]): void
    connect(sigName: "notify::key", callback: (...args: any[]) => void): number
    on(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ExtensionAdapter extends Object {

    // Own properties of Ide-1.0.Ide.ExtensionAdapter

    static name: string

    // Constructors of Ide-1.0.Ide.ExtensionAdapter

    constructor(config?: ExtensionAdapter.ConstructorProperties) 
    /**
     * Creates a new #IdeExtensionAdapter.
     * 
     * The #IdeExtensionAdapter object can be used to wrap an extension that might need to change
     * at runtime based on various changing parameters. For example, it can watch the loading and
     * unloading of plugins and reload the #IdeExtensionAdapter:extension property.
     * 
     * Additionally, it can match a specific plugin based on the `value` provided.
     * 
     * This uses #IdeExtensionPoint to create the extension implementation, which means that
     * extension points that are disabled (such as from the plugins GSettings) will be ignored.
     * As such, if one plugin that is higher priority than another, but is disabled, will be
     * ignored and the secondary plugin will be used.
     * @constructor 
     * @param context An #IdeContext.
     * @param engine A #PeasEngine or %NULL.
     * @param interfaceType The #GType of the interface to be implemented.
     * @param key The key for matching extensions from plugin info external data.
     * @param value The value to use when matching keys.
     * @returns A newly created #IdeExtensionAdapter.
     */
    constructor(context: Context, engine: Peas.Engine | null, interfaceType: GObject.GType, key: string | null, value: string | null) 
    /**
     * Creates a new #IdeExtensionAdapter.
     * 
     * The #IdeExtensionAdapter object can be used to wrap an extension that might need to change
     * at runtime based on various changing parameters. For example, it can watch the loading and
     * unloading of plugins and reload the #IdeExtensionAdapter:extension property.
     * 
     * Additionally, it can match a specific plugin based on the `value` provided.
     * 
     * This uses #IdeExtensionPoint to create the extension implementation, which means that
     * extension points that are disabled (such as from the plugins GSettings) will be ignored.
     * As such, if one plugin that is higher priority than another, but is disabled, will be
     * ignored and the secondary plugin will be used.
     * @constructor 
     * @param context An #IdeContext.
     * @param engine A #PeasEngine or %NULL.
     * @param interfaceType The #GType of the interface to be implemented.
     * @param key The key for matching extensions from plugin info external data.
     * @param value The value to use when matching keys.
     * @returns A newly created #IdeExtensionAdapter.
     */
    static new(context: Context, engine: Peas.Engine | null, interfaceType: GObject.GType, key: string | null, value: string | null): ExtensionAdapter
    _init(config?: ExtensionAdapter.ConstructorProperties): void
}

module ExtensionSetAdapter {

    // Signal callback interfaces

    /**
     * Signal callback interface for `extension-added`
     */
    interface ExtensionAddedSignalCallback {
        (object: Peas.PluginInfo, p0: GObject.Object): void
    }

    /**
     * Signal callback interface for `extension-removed`
     */
    interface ExtensionRemovedSignalCallback {
        (object: Peas.PluginInfo, p0: GObject.Object): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ExtensionSetAdapter

        engine?: Peas.Engine | null
        interfaceType?: GObject.GType | null
        key?: string | null
        value?: string | null
    }

}

interface ExtensionSetAdapter {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapter

    readonly engine: Peas.Engine
    readonly interfaceType: GObject.GType
    key: string | null
    value: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ExtensionSetAdapter

    /**
     * Calls `foreach_func` for every extension loaded by the extension set.
     * @param foreachFunc A callback
     */
    foreach(foreachFunc: ExtensionSetAdapterForeachFunc): void
    /**
     * Gets the #IdeExtensionSetAdapter:engine property.
     * @returns A #PeasEngine.
     */
    getEngine(): Peas.Engine
    getInterfaceType(): GObject.GType
    getKey(): string | null
    getNExtensions(): number
    getValue(): string | null
    setKey(key: string | null): void
    setValue(value: string | null): void

    // Own signals of Ide-1.0.Ide.ExtensionSetAdapter

    connect(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback): number
    on(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "extension-added", p0: GObject.Object, ...args: any[]): void
    connect(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback): number
    on(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "extension-removed", p0: GObject.Object, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ExtensionSetAdapter

    connect(sigName: "notify::engine", callback: (...args: any[]) => void): number
    on(sigName: "notify::engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::engine", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::engine", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::engine", ...args: any[]): void
    connect(sigName: "notify::interface-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::interface-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::interface-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::interface-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::interface-type", ...args: any[]): void
    connect(sigName: "notify::key", callback: (...args: any[]) => void): number
    on(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ExtensionSetAdapter extends Object {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapter

    static name: string

    // Constructors of Ide-1.0.Ide.ExtensionSetAdapter

    constructor(config?: ExtensionSetAdapter.ConstructorProperties) 
    constructor(context: Context, engine: Peas.Engine, interfaceType: GObject.GType, key: string | null, value: string | null) 
    static new(context: Context, engine: Peas.Engine, interfaceType: GObject.GType, key: string | null, value: string | null): ExtensionSetAdapter
    _init(config?: ExtensionSetAdapter.ConstructorProperties): void
}

module File {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.File

        file?: Gio.File | null
        path?: string | null
        temporaryId?: number | null
    }

}

interface File {

    // Own properties of Ide-1.0.Ide.File

    readonly file: Gio.File
    readonly isTemporary: boolean
    readonly language: GtkSource.Language
    readonly path: string | null
    readonly temporaryId: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.File

    compare(b: File): number
    equal(other: File): boolean
    findOtherAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes an asynchronous call to ide_file_find_other_async(). This function
     * will try to find a matching file for languages where this exists. Such cases
     * include C and C++ where a .c or .cpp file may have a .h or .hh header. Additional
     * suffixes are implemented including (.c, .cc, .cpp, .cxx, .h, .hh, .hpp, and .hxx).
     * 
     * Returns an #IdeFile if successful, otherwise %NULL and `error` is set.
     * @param result 
     * @returns An #IdeFIle or %NULL.
     */
    findOtherFinish(result: Gio.AsyncResult): File | null
    /**
     * Retrieves the underlying #GFile represented by `self`.
     * @returns A #GFile.
     */
    getFile(): Gio.File
    getIsTemporary(): boolean
    /**
     * Retrieves the #GtkSourceLanguage that was discovered for the file.
     * @returns A #GtkSourceLanguage or %NULL.
     */
    getLanguage(): GtkSource.Language | null
    getLanguageId(): string | null
    getPath(): string | null
    /**
     * Gets the #IdeFile:temporary-id property for the file.
     * 
     * Temporary files have unique identifiers associated with them so that we can
     * display names such as "unsaved file 1" and know that it will not collide with
     * another temporary file.
     * 
     * Files that are not temporary, will return zero.
     * @returns A positive integer greater than zero if the file is a temporary file.
     */
    getTemporaryId(): number
    hash(): number
    loadSettingsAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    loadSettingsFinish(result: Gio.AsyncResult): FileSettings

    // Class property signals of Ide-1.0.Ide.File

    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::is-temporary", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-temporary", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-temporary", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-temporary", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-temporary", ...args: any[]): void
    connect(sigName: "notify::language", callback: (...args: any[]) => void): number
    on(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::path", callback: (...args: any[]) => void): number
    on(sigName: "notify::path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::path", ...args: any[]): void
    connect(sigName: "notify::temporary-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::temporary-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::temporary-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::temporary-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::temporary-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class File extends Object {

    // Own properties of Ide-1.0.Ide.File

    static name: string

    // Constructors of Ide-1.0.Ide.File

    constructor(config?: File.ConstructorProperties) 
    /**
     * Creates a new file.
     * @constructor 
     * @param context An #IdeContext or %NULL.
     * @param file a #GFile.
     * @returns An #IdeFile.
     */
    constructor(context: Context | null, file: Gio.File) 
    /**
     * Creates a new file.
     * @constructor 
     * @param context An #IdeContext or %NULL.
     * @param file a #GFile.
     * @returns An #IdeFile.
     */
    static new(context: Context | null, file: Gio.File): File
    static newForPath(context: Context, path: string | null): File
    _init(config?: File.ConstructorProperties): void
}

module FileSettings {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.FileSettings

        encoding?: string | null
        encodingSet?: boolean | null
        file?: File | null
        indentStyle?: IndentStyle | null
        indentStyleSet?: boolean | null
        indentWidth?: number | null
        indentWidthSet?: boolean | null
        insertTrailingNewline?: boolean | null
        insertTrailingNewlineSet?: boolean | null
        newlineType?: GtkSource.NewlineType | null
        newlineTypeSet?: boolean | null
        overwriteBraces?: boolean | null
        overwriteBracesSet?: boolean | null
        rightMarginPosition?: number | null
        rightMarginPositionSet?: boolean | null
        settled?: boolean | null
        showRightMargin?: boolean | null
        showRightMarginSet?: boolean | null
        tabWidth?: number | null
        tabWidthSet?: boolean | null
        trimTrailingWhitespace?: boolean | null
        trimTrailingWhitespaceSet?: boolean | null
    }

}

interface FileSettings {

    // Own properties of Ide-1.0.Ide.FileSettings

    encoding: string | null
    encodingSet: boolean
    readonly file: File
    indentStyle: IndentStyle
    indentStyleSet: boolean
    indentWidth: number
    indentWidthSet: boolean
    insertTrailingNewline: boolean
    insertTrailingNewlineSet: boolean
    newlineType: GtkSource.NewlineType
    newlineTypeSet: boolean
    overwriteBraces: boolean
    overwriteBracesSet: boolean
    rightMarginPosition: number
    rightMarginPositionSet: boolean
    settled: boolean
    showRightMargin: boolean
    showRightMarginSet: boolean
    tabWidth: number
    tabWidthSet: boolean
    trimTrailingWhitespace: boolean
    trimTrailingWhitespaceSet: boolean
    __gtype__: number

    // Own fields of Ide-1.0.Ide.FileSettings

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.FileSettings

    /**
     * Retrieves the underlying file that `self` refers to.
     * 
     * This may be used by #IdeFileSettings implementations to discover additional
     * information about the settings. For example, a modeline parser might load
     * some portion of the file looking for modelines. An editorconfig
     * implementation might look for ".editorconfig" files.
     * @returns An #IdeFile.
     */
    getFile(): File
    /**
     * Gets the #IdeFileSettings:settled property.
     * 
     * This property is %TRUE when all of the children file settings have completed loading.
     * 
     * Some file setting implementations require that various I/O be performed on disk in
     * the background. This property will change to %TRUE when all of the settings have
     * been loaded.
     * 
     * Normally, this is not a problem, since the editor will respond to changes and update them
     * accordingly. However, if you are writing a tool that prints the file settings
     * (such as ide-list-file-settings), you probably want to wait until the values have
     * settled.
     * @returns %TRUE if all the settings have loaded.
     */
    getSettled(): boolean

    // Class property signals of Ide-1.0.Ide.FileSettings

    connect(sigName: "notify::encoding", callback: (...args: any[]) => void): number
    on(sigName: "notify::encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::encoding", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::encoding", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::encoding", ...args: any[]): void
    connect(sigName: "notify::encoding-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::encoding-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::encoding-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::encoding-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::encoding-set", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::indent-style", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-style", ...args: any[]): void
    connect(sigName: "notify::indent-style-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-style-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-style-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-style-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-style-set", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::indent-width-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-width-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-width-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-width-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-width-set", ...args: any[]): void
    connect(sigName: "notify::insert-trailing-newline", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-trailing-newline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-trailing-newline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-trailing-newline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-trailing-newline", ...args: any[]): void
    connect(sigName: "notify::insert-trailing-newline-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-trailing-newline-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-trailing-newline-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-trailing-newline-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-trailing-newline-set", ...args: any[]): void
    connect(sigName: "notify::newline-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::newline-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::newline-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::newline-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::newline-type", ...args: any[]): void
    connect(sigName: "notify::newline-type-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::newline-type-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::newline-type-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::newline-type-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::newline-type-set", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite-braces", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite-braces-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite-braces-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite-braces-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite-braces-set", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::right-margin-position-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin-position-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin-position-set", ...args: any[]): void
    connect(sigName: "notify::settled", callback: (...args: any[]) => void): number
    on(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::settled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::settled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::show-right-margin-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-right-margin-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-right-margin-set", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::tab-width-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-width-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-width-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-width-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-width-set", ...args: any[]): void
    connect(sigName: "notify::trim-trailing-whitespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::trim-trailing-whitespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::trim-trailing-whitespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::trim-trailing-whitespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::trim-trailing-whitespace", ...args: any[]): void
    connect(sigName: "notify::trim-trailing-whitespace-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::trim-trailing-whitespace-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::trim-trailing-whitespace-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::trim-trailing-whitespace-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::trim-trailing-whitespace-set", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class FileSettings extends Object {

    // Own properties of Ide-1.0.Ide.FileSettings

    static name: string

    // Constructors of Ide-1.0.Ide.FileSettings

    constructor(config?: FileSettings.ConstructorProperties) 
    constructor(file: File) 
    static new(file: File): FileSettings
    _init(config?: FileSettings.ConstructorProperties): void
}

module FormatterOptions {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.FormatterOptions

        insertSpaces?: boolean | null
        tabWidth?: number | null
    }

}

interface FormatterOptions {

    // Own properties of Ide-1.0.Ide.FormatterOptions

    insertSpaces: boolean
    tabWidth: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.FormatterOptions

    getInsertSpaces(): boolean
    getTabWidth(): number
    setInsertSpaces(insertSpaces: boolean): void
    setTabWidth(tabWidth: number): void

    // Class property signals of Ide-1.0.Ide.FormatterOptions

    connect(sigName: "notify::insert-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-spaces", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class FormatterOptions extends GObject.Object {

    // Own properties of Ide-1.0.Ide.FormatterOptions

    static name: string

    // Constructors of Ide-1.0.Ide.FormatterOptions

    constructor(config?: FormatterOptions.ConstructorProperties) 
    constructor() 
    static new(): FormatterOptions
    _init(config?: FormatterOptions.ConstructorProperties): void
}

module HighlightEngine {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.HighlightEngine

        buffer?: Buffer | null
    }

}

interface HighlightEngine {

    // Own properties of Ide-1.0.Ide.HighlightEngine

    readonly buffer: Buffer
    readonly highlighter: Highlighter
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.HighlightEngine

    clear(): void
    /**
     * Gets the IdeHighlightEngine:buffer property.
     * @returns An #IdeBuffer.
     */
    getBuffer(): Buffer
    /**
     * Gets the IdeHighlightEngine:highlighter property.
     * @returns An #IdeHighlighter.
     */
    getHighlighter(): Highlighter
    /**
     * A #GtkTextTag for `style_name`.
     * @param styleName the name of the style to retrieve
     * @returns A #GtkTextTag.
     */
    getStyle(styleName: string | null): Gtk.TextTag
    /**
     * This function will extend the invalidated range of the buffer to include
     * the range of `begin` to `end`.
     * 
     * The highlighter will be queued to interactively update the invalidated
     * region.
     * 
     * Updating the invalidated region of the buffer may take some time, as it is
     * important that the highlighter does not block for more than 1-2 milliseconds
     * to avoid dropping frames.
     * @param begin the beginning of the range to invalidate
     * @param end the end of the range to invalidate
     */
    invalidate(begin: Gtk.TextIter, end: Gtk.TextIter): void
    rebuild(): void

    // Class property signals of Ide-1.0.Ide.HighlightEngine

    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::highlighter", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlighter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlighter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlighter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlighter", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HighlightEngine extends Object {

    // Own properties of Ide-1.0.Ide.HighlightEngine

    static name: string

    // Constructors of Ide-1.0.Ide.HighlightEngine

    constructor(config?: HighlightEngine.ConstructorProperties) 
    constructor(buffer: Buffer) 
    static new(buffer: Buffer): HighlightEngine
    _init(config?: HighlightEngine.ConstructorProperties): void
}

module LangservClient {

    // Signal callback interfaces

    /**
     * Signal callback interface for `notification`
     */
    interface NotificationSignalCallback {
        (object: string | null, p0: GLib.Variant): void
    }

    /**
     * Signal callback interface for `published-diagnostics`
     */
    interface PublishedDiagnosticsSignalCallback {
        (object: Gio.File, p0: Diagnostics): void
    }

    /**
     * Signal callback interface for `supports-language`
     */
    interface SupportsLanguageSignalCallback {
        (object: string | null): boolean
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservClient

        ioStream?: Gio.IOStream | null
    }

}

interface LangservClient {

    // Own properties of Ide-1.0.Ide.LangservClient

    readonly ioStream: Gio.IOStream
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservClient

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservClient

    addLanguage(languageId: string | null): void
    /**
     * Asynchronously queries the Language Server using the JSON-RPC protocol.
     * @param method the method to call
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @param callback the callback to receive the result, or %NULL
     */
    callAsync(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    callFinish(result: Gio.AsyncResult, returnValue: GLib.Variant): boolean
    getDiagnosticsAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes a request to ide_langserv_client_get_diagnostics_async().
     * @param result A #GAsyncResult
     * @returns %TRUE if successful and @diagnostics is set, otherwise %FALSE   and @error is set.
     */
    getDiagnosticsFinish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* diagnostics */ Diagnostics | null ]
    /**
     * Asynchronously sends a notification to the Language Server.
     * @param method the method to notification
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @param notificationback the notificationback to receive the result, or %NULL
     */
    sendNotificationAsync(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null, notificationback: Gio.AsyncReadyCallback | null): void
    sendNotificationFinish(result: Gio.AsyncResult): boolean
    start(): void
    stop(): void

    // Own virtual methods of Ide-1.0.Ide.LangservClient

    notification(method: string | null, params: GLib.Variant): void
    publishedDiagnostics(file: Gio.File, diagnostics: Diagnostics): void
    supportsLanguage(languageId: string | null): boolean

    // Own signals of Ide-1.0.Ide.LangservClient

    connect(sigName: "notification", callback: LangservClient.NotificationSignalCallback): number
    on(sigName: "notification", callback: LangservClient.NotificationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notification", callback: LangservClient.NotificationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notification", callback: LangservClient.NotificationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "notification", p0: GLib.Variant, ...args: any[]): void
    connect(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback): number
    on(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "published-diagnostics", p0: Diagnostics, ...args: any[]): void
    connect(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback): number
    on(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback): NodeJS.EventEmitter
    emit(sigName: "supports-language", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LangservClient

    connect(sigName: "notify::io-stream", callback: (...args: any[]) => void): number
    on(sigName: "notify::io-stream", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::io-stream", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::io-stream", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::io-stream", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservClient extends Object {

    // Own properties of Ide-1.0.Ide.LangservClient

    static name: string

    // Constructors of Ide-1.0.Ide.LangservClient

    constructor(config?: LangservClient.ConstructorProperties) 
    constructor(context: Context, ioStream: Gio.IOStream) 
    static new(context: Context, ioStream: Gio.IOStream): LangservClient
    _init(config?: LangservClient.ConstructorProperties): void
}

module LangservCompletionProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, CompletionProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservCompletionProvider

        client?: LangservClient | null
    }

}

interface LangservCompletionProvider extends GtkSource.CompletionProvider, CompletionProvider {

    // Own properties of Ide-1.0.Ide.LangservCompletionProvider

    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservCompletionProvider

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservCompletionProvider

    /**
     * Gets the client for the completion provider.
     * @returns An #IdeLangservClient or %NULL
     */
    getClient(): LangservClient | null
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservCompletionProvider

    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservCompletionProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservCompletionProvider

    static name: string

    // Constructors of Ide-1.0.Ide.LangservCompletionProvider

    constructor(config?: LangservCompletionProvider.ConstructorProperties) 
    _init(config?: LangservCompletionProvider.ConstructorProperties): void
}

module LangservDiagnosticProvider {

    // Constructor properties interface

    interface ConstructorProperties extends DiagnosticProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservDiagnosticProvider

        client?: LangservClient | null
    }

}

interface LangservDiagnosticProvider extends DiagnosticProvider {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProvider

    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservDiagnosticProvider

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservDiagnosticProvider

    /**
     * Gets the client used by diagnostic provider.
     * @returns An #IdeLangservClient or %NULL.
     */
    getClient(): LangservClient | null
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservDiagnosticProvider

    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservDiagnosticProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProvider

    static name: string

    // Constructors of Ide-1.0.Ide.LangservDiagnosticProvider

    constructor(config?: LangservDiagnosticProvider.ConstructorProperties) 
    _init(config?: LangservDiagnosticProvider.ConstructorProperties): void
}

module LangservFormatter {

    // Constructor properties interface

    interface ConstructorProperties extends Formatter.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservFormatter

        client?: LangservClient | null
    }

}

interface LangservFormatter extends Formatter {

    // Own properties of Ide-1.0.Ide.LangservFormatter

    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservFormatter

    parentClass: Object
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any

    // Owm methods of Ide-1.0.Ide.LangservFormatter

    /**
     * Gets the client to use for the formatter.
     * @returns An #IdeLangservClient or %NULL.
     */
    getClient(): LangservClient
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservFormatter

    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservFormatter extends Object {

    // Own properties of Ide-1.0.Ide.LangservFormatter

    static name: string

    // Constructors of Ide-1.0.Ide.LangservFormatter

    constructor(config?: LangservFormatter.ConstructorProperties) 
    _init(config?: LangservFormatter.ConstructorProperties): void
}

module LangservHighlighter {

    // Constructor properties interface

    interface ConstructorProperties extends Highlighter.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservHighlighter

        client?: LangservClient | null
    }

}

interface LangservHighlighter extends Highlighter {

    // Own properties of Ide-1.0.Ide.LangservHighlighter

    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservHighlighter

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservHighlighter

    getClient(): LangservClient | null
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservHighlighter

    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservHighlighter extends Object {

    // Own properties of Ide-1.0.Ide.LangservHighlighter

    static name: string

    // Constructors of Ide-1.0.Ide.LangservHighlighter

    constructor(config?: LangservHighlighter.ConstructorProperties) 
    _init(config?: LangservHighlighter.ConstructorProperties): void
}

module LangservRenameProvider {

    // Constructor properties interface

    interface ConstructorProperties extends RenameProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservRenameProvider

        buffer?: Buffer | null
        client?: LangservClient | null
    }

}

interface LangservRenameProvider extends RenameProvider {

    // Own properties of Ide-1.0.Ide.LangservRenameProvider

    buffer: Buffer
    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservRenameProvider

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservRenameProvider

    getClient(): LangservClient | null
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservRenameProvider

    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservRenameProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservRenameProvider

    static name: string

    // Constructors of Ide-1.0.Ide.LangservRenameProvider

    constructor(config?: LangservRenameProvider.ConstructorProperties) 
    _init(config?: LangservRenameProvider.ConstructorProperties): void
}

module LangservSymbolNode {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolNode.ConstructorProperties {
    }

}

interface LangservSymbolNode {

    // Own properties of Ide-1.0.Ide.LangservSymbolNode

    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservSymbolNode

    parentInstance: any
    gnode: GLib.Node

    // Owm methods of Ide-1.0.Ide.LangservSymbolNode

    getParentName(): string | null
    isParentOf(other: LangservSymbolNode): boolean

    // Class property signals of Ide-1.0.Ide.LangservSymbolNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::flags", callback: (...args: any[]) => void): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::kind", callback: (...args: any[]) => void): number
    on(sigName: "notify::kind", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::kind", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::kind", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservSymbolNode extends SymbolNode {

    // Own properties of Ide-1.0.Ide.LangservSymbolNode

    static name: string

    // Constructors of Ide-1.0.Ide.LangservSymbolNode

    constructor(config?: LangservSymbolNode.ConstructorProperties) 
    constructor(file: Gio.File, name: string | null, parentName: string | null, kind: number, beginLine: number, beginColumn: number, endLine: number, endColumn: number) 
    static new(file: Gio.File, name: string | null, parentName: string | null, kind: number, beginLine: number, beginColumn: number, endLine: number, endColumn: number): LangservSymbolNode
    _init(config?: LangservSymbolNode.ConstructorProperties): void
}

module LangservSymbolResolver {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolResolver.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservSymbolResolver

        client?: LangservClient | null
    }

}

interface LangservSymbolResolver extends SymbolResolver {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolver

    client: LangservClient
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LangservSymbolResolver

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LangservSymbolResolver

    /**
     * Gets the client used by the symbol resolver.
     * @returns An #IdeLangservClient or %NULL.
     */
    getClient(): LangservClient | null
    setClient(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservSymbolResolver

    connect(sigName: "notify::client", callback: (...args: any[]) => void): number
    on(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservSymbolResolver extends Object {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolver

    static name: string

    // Constructors of Ide-1.0.Ide.LangservSymbolResolver

    constructor(config?: LangservSymbolResolver.ConstructorProperties) 
    _init(config?: LangservSymbolResolver.ConstructorProperties): void
}

module LangservSymbolTree {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolTree.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface LangservSymbolTree extends SymbolTree {

    // Own properties of Ide-1.0.Ide.LangservSymbolTree

    __gtype__: number

    // Class property signals of Ide-1.0.Ide.LangservSymbolTree

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LangservSymbolTree extends GObject.Object {

    // Own properties of Ide-1.0.Ide.LangservSymbolTree

    static name: string

    // Constructors of Ide-1.0.Ide.LangservSymbolTree

    constructor(config?: LangservSymbolTree.ConstructorProperties) 
    /**
     * Creates a new #IdeLangservSymbolTree but takes ownership of `ar`.
     * @constructor 
     * @param symbols The symbols
     * @returns A newly allocated #IdeLangservSymbolTree.
     */
    constructor(symbols: LangservSymbolNode[]) 
    /**
     * Creates a new #IdeLangservSymbolTree but takes ownership of `ar`.
     * @constructor 
     * @param symbols The symbols
     * @returns A newly allocated #IdeLangservSymbolTree.
     */
    static new(symbols: LangservSymbolNode[]): LangservSymbolTree
    _init(config?: LangservSymbolTree.ConstructorProperties): void
}

module Layout {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Dock.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.DockBin.ConstructorProperties {
    }

}

interface Layout extends Atk.ImplementorIface, Dazzle.Dock, Dazzle.DockItem, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.Layout

    readonly activeView: Gtk.Widget
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Layout

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Layout

    getActiveView(): Gtk.Widget | null

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    getChildVisible(child: Dazzle.DockItem): boolean

    // Overloads of getChildVisible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    getParent(): Dazzle.DockItem | null

    // Overloads of getParent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    setChildVisible(child: Dazzle.DockItem, childVisible: boolean): void

    // Overloads of setChildVisible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void

    // Class property signals of Ide-1.0.Ide.Layout

    connect(sigName: "notify::active-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::bottom-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::bottom-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bottom-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bottom-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bottom-visible", ...args: any[]): void
    connect(sigName: "notify::left-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::left-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::left-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::left-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::left-visible", ...args: any[]): void
    connect(sigName: "notify::right-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-visible", ...args: any[]): void
    connect(sigName: "notify::top-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::top-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::top-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::top-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::top-visible", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::manager", callback: (...args: any[]) => void): number
    on(sigName: "notify::manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::manager", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::manager", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::manager", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Layout extends Dazzle.DockBin {

    // Own properties of Ide-1.0.Ide.Layout

    static name: string

    // Constructors of Ide-1.0.Ide.Layout

    constructor(config?: Layout.ConstructorProperties) 
    _init(config?: Layout.ConstructorProperties): void
}

module LayoutGrid {

    // Signal callback interfaces

    /**
     * Signal callback interface for `empty`
     */
    interface EmptySignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Bin.ConstructorProperties {
    }

}

interface LayoutGrid extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.LayoutGrid

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.LayoutGrid

    addStackAfter(stack: LayoutStack): LayoutStack
    addStackBefore(stack: LayoutStack): LayoutStack
    /**
     * Calls `callback` for every view found in the #IdeLayoutGrid.
     * @param callback A #GtkCallback
     */
    foreachView(callback: Gtk.Callback): void
    /**
     * Gets the last focused #IdeLayoutStack.
     * @returns A #IdeLayoutStack or %NULL.
     */
    getLastFocus(): Gtk.Widget | null
    getStackAfter(stack: LayoutStack): LayoutStack | null
    getStackBefore(stack: LayoutStack): LayoutStack | null
    /**
     * Fetches all of the stacks in the grid. The resulting #GList should be
     * freed with g_list_free().
     * @returns A #GList.
     */
    getStacks(): LayoutStack[]

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.LayoutGrid

    connect(sigName: "empty", callback: LayoutGrid.EmptySignalCallback): number
    on(sigName: "empty", callback: LayoutGrid.EmptySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "empty", callback: LayoutGrid.EmptySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "empty", callback: LayoutGrid.EmptySignalCallback): NodeJS.EventEmitter
    emit(sigName: "empty", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LayoutGrid

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LayoutGrid extends Gtk.Bin {

    // Own properties of Ide-1.0.Ide.LayoutGrid

    static name: string

    // Constructors of Ide-1.0.Ide.LayoutGrid

    constructor(config?: LayoutGrid.ConstructorProperties) 
    constructor() 
    static new(): LayoutGrid
    _init(config?: LayoutGrid.ConstructorProperties): void
}

module LayoutPane {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.DockBinEdge.ConstructorProperties {
    }

}

interface LayoutPane extends Atk.ImplementorIface, Dazzle.DockItem, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.LayoutPane

    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Conflicting methods

    getChildVisible(child: Dazzle.DockItem): boolean

    // Overloads of getChildVisible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    getChildVisible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    getParent(): Dazzle.DockItem | null

    // Overloads of getParent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    getParent(): Gtk.Widget | null
    setChildVisible(child: Dazzle.DockItem, childVisible: boolean): void

    // Overloads of setChildVisible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param isVisible if %TRUE, `widget` should be mapped along with its parent.
     */
    setChildVisible(isVisible: boolean): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void

    // Class property signals of Ide-1.0.Ide.LayoutPane

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::edge", callback: (...args: any[]) => void): number
    on(sigName: "notify::edge", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::edge", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::edge", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::edge", ...args: any[]): void
    connect(sigName: "notify::child-revealed", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-revealed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-revealed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-revealed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-revealed", ...args: any[]): void
    connect(sigName: "notify::position", callback: (...args: any[]) => void): number
    on(sigName: "notify::position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::position", ...args: any[]): void
    connect(sigName: "notify::position-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::position-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::position-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::position-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::position-set", ...args: any[]): void
    connect(sigName: "notify::reveal-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::reveal-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reveal-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reveal-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reveal-child", ...args: any[]): void
    connect(sigName: "notify::transition-duration", callback: (...args: any[]) => void): number
    on(sigName: "notify::transition-duration", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transition-duration", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transition-duration", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transition-duration", ...args: any[]): void
    connect(sigName: "notify::transition-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::transition-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transition-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transition-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transition-type", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LayoutPane extends Dazzle.DockBinEdge {

    // Own properties of Ide-1.0.Ide.LayoutPane

    static name: string

    // Constructors of Ide-1.0.Ide.LayoutPane

    constructor(config?: LayoutPane.ConstructorProperties) 
    _init(config?: LayoutPane.ConstructorProperties): void
}

module LayoutStack {

    // Signal callback interfaces

    /**
     * Signal callback interface for `empty`
     */
    interface EmptySignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `split`
     */
    interface SplitSignalCallback {
        (view: LayoutView, splitType: number, file: Gio.File): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Bin.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LayoutStack

        activeView?: LayoutView | null
    }

}

interface LayoutStack extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.LayoutStack

    activeView: LayoutView
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.LayoutStack

    addControl(control: Gtk.Widget, priority: number): void
    foreachView(callback: Gtk.Callback): void
    getActiveView(): Gtk.Widget | null
    remove(view: Gtk.Widget): void

    // Overloads of remove

    /**
     * Removes `widget` from `container`. `widget` must be inside `container`.
     * Note that `container` will own a reference to `widget,` and that this
     * may be the last reference held; so removing a widget from its
     * container can destroy that widget. If you want to use `widget`
     * again, you need to add a reference to it before removing it from
     * a container, using g_object_ref(). If you don’t want to use `widget`
     * again it’s usually more efficient to simply destroy it directly
     * using gtk_widget_destroy() since this will remove it from the
     * container and help break any circular reference count cycles.
     * @virtual 
     * @param widget a current child of `container`
     */
    remove(widget: Gtk.Widget): void
    setActiveView(activeView: Gtk.Widget): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.LayoutStack

    connect(sigName: "empty", callback: LayoutStack.EmptySignalCallback): number
    on(sigName: "empty", callback: LayoutStack.EmptySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "empty", callback: LayoutStack.EmptySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "empty", callback: LayoutStack.EmptySignalCallback): NodeJS.EventEmitter
    emit(sigName: "empty", ...args: any[]): void
    connect(sigName: "split", callback: LayoutStack.SplitSignalCallback): number
    on(sigName: "split", callback: LayoutStack.SplitSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "split", callback: LayoutStack.SplitSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "split", callback: LayoutStack.SplitSignalCallback): NodeJS.EventEmitter
    emit(sigName: "split", splitType: number, file: Gio.File, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LayoutStack

    connect(sigName: "notify::active-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LayoutStack extends Gtk.Bin {

    // Own properties of Ide-1.0.Ide.LayoutStack

    static name: string

    // Constructors of Ide-1.0.Ide.LayoutStack

    constructor(config?: LayoutStack.ConstructorProperties) 
    constructor() 
    static new(): LayoutStack
    _init(config?: LayoutStack.ConstructorProperties): void
}

module LayoutView {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface LayoutView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.LayoutView

    readonly canSplit: boolean
    readonly modified: boolean
    readonly specialTitle: string | null
    readonly title: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.LayoutView

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.LayoutView

    // Has conflict: agreeToClose(): boolean
    // Has conflict: createSplit(file: Gio.File): LayoutView
    // Has conflict: getCanPreview(): boolean
    // Has conflict: getCanSplit(): boolean
    // Has conflict: getModified(): boolean
    // Has conflict: getSpecialTitle(): string | null
    // Has conflict: getSplitView(): boolean
    // Has conflict: getTitle(): string | null
    // Has conflict: navigateTo(location: SourceLocation): void
    // Has conflict: setBackForwardList(backForwardList: BackForwardList): void
    // Has conflict: setSplitView(splitView: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own virtual methods of Ide-1.0.Ide.LayoutView

    agreeToClose(): boolean
    /**
     * Creates a new view that can be displayed in a split, potentially with a different
     * buffer. If the view does not support splits, %NULL will be returned.
     * @virtual 
     * @param file A #GFile already loaded by the #IdeBufferManager, or %NULL to use the existing buffer.
     * @returns A #IdeLayoutView.
     */
    createSplit(file: Gio.File): LayoutView
    /**
     * Checks if `self` can create a preview view (such as html, markdown, etc).
     * @virtual 
     * @returns %TRUE if @self can create a preview view.
     */
    getCanPreview(): boolean
    /**
     * Checks if `self` can create a split view. If so, %TRUE is returned. Otherwise, %FALSE.
     * @virtual 
     * @returns %TRUE if @self can create a split.
     */
    getCanSplit(): boolean
    getModified(): boolean
    getSpecialTitle(): string | null
    /**
     * Returns whether view is split or not.
     * @virtual 
     */
    getSplitView(): boolean
    getTitle(): string | null
    navigateTo(location: SourceLocation): void
    setBackForwardList(backForwardList: BackForwardList): void
    /**
     * Set a split view using GtkPaned style split with %GTK_ORIENTATION_VERTICAL.
     * @virtual 
     * @param splitView if the split should be enabled.
     */
    setSplitView(splitView: boolean): void

    // Class property signals of Ide-1.0.Ide.LayoutView

    connect(sigName: "notify::can-split", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-split", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-split", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-split", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-split", ...args: any[]): void
    connect(sigName: "notify::modified", callback: (...args: any[]) => void): number
    on(sigName: "notify::modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::modified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::modified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::modified", ...args: any[]): void
    connect(sigName: "notify::special-title", callback: (...args: any[]) => void): number
    on(sigName: "notify::special-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::special-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::special-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::special-title", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LayoutView extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.LayoutView

    static name: string

    // Constructors of Ide-1.0.Ide.LayoutView

    constructor(config?: LayoutView.ConstructorProperties) 
    _init(config?: LayoutView.ConstructorProperties): void
}

module LocalDevice {

    // Constructor properties interface

    interface ConstructorProperties extends Device.ConstructorProperties {
    }

}

interface LocalDevice {

    // Own properties of Ide-1.0.Ide.LocalDevice

    __gtype__: number

    // Own fields of Ide-1.0.Ide.LocalDevice

    parentInstance: any

    // Class property signals of Ide-1.0.Ide.LocalDevice

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::system-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-type", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LocalDevice extends Device {

    // Own properties of Ide-1.0.Ide.LocalDevice

    static name: string

    // Constructors of Ide-1.0.Ide.LocalDevice

    constructor(config?: LocalDevice.ConstructorProperties) 
    _init(config?: LocalDevice.ConstructorProperties): void
}

module Object {

    // Signal callback interfaces

    /**
     * Signal callback interface for `destroy`
     */
    interface DestroySignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Object

        context?: Context | null
    }

}

interface Object {

    // Own properties of Ide-1.0.Ide.Object

    readonly context: Context
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Object

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.Object

    // Has conflict: getContext(): Context
    /**
     * This function will acquire a reference to the IdeContext that the object
     * is a part of. This is useful if you are going to be doing a long running
     * task (such as something in a thread) and want to ensure the context cannot
     * be unloaded during your operation.
     * 
     * You should call ide_object_release() an equivalent number of times to
     * ensure the context may be freed afterwards.
     * 
     * You should check the return value of this function to ensure that the
     * context is not already in shutdown.
     * @returns %TRUE if a hold was successfully created.
     */
    hold(): boolean
    /**
     * Releases a successful hold on the context previously created with ide_object_hold().
     */
    release(): void
    // Has conflict: setContext(context: Context): void

    // Own virtual methods of Ide-1.0.Ide.Object

    destroy(): void
    /**
     * Fetches the #IdeObject:context property.
     * @virtual 
     * @returns An #IdeContext.
     */
    getContext(): Context
    setContext(context: Context): void

    // Own signals of Ide-1.0.Ide.Object

    connect(sigName: "destroy", callback: Object.DestroySignalCallback): number
    on(sigName: "destroy", callback: Object.DestroySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "destroy", callback: Object.DestroySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "destroy", callback: Object.DestroySignalCallback): NodeJS.EventEmitter
    emit(sigName: "destroy", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Object

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Object extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Object

    static name: string

    // Constructors of Ide-1.0.Ide.Object

    constructor(config?: Object.ConstructorProperties) 
    static newFinish(result: Gio.AsyncResult): Object
    _init(config?: Object.ConstructorProperties): void
    static notifyInMain(instance: any | null, pspec: GObject.ParamSpec): void
}

module OmniBar {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface OmniBar extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.OmniBar

    __gtype__: number

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.OmniBar

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class OmniBar extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniBar

    static name: string

    // Constructors of Ide-1.0.Ide.OmniBar

    constructor(config?: OmniBar.ConstructorProperties) 
    constructor() 
    static new(): OmniBar

    // Overloads of new

    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: OmniBar.ConstructorProperties): void
}

module OmniSearchDisplay {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    interface ActivateSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `result-activated`
     */
    interface ResultActivatedSignalCallback {
        (object: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchDisplay

        context?: SearchContext | null
    }

}

interface OmniSearchDisplay extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplay

    context: SearchContext
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.OmniSearchDisplay

    getContext(): SearchContext
    getCount(): number
    moveNextResult(): void
    movePreviousResult(): void
    setContext(context: SearchContext): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.OmniSearchDisplay

    connect(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback): number
    on(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback): NodeJS.EventEmitter
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback): number
    on(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "result-activated", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchDisplay

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class OmniSearchDisplay extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplay

    static name: string

    // Constructors of Ide-1.0.Ide.OmniSearchDisplay

    constructor(config?: OmniSearchDisplay.ConstructorProperties) 
    _init(config?: OmniSearchDisplay.ConstructorProperties): void
}

module OmniSearchEntry {

    // Signal callback interfaces

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move-next-result`
     */
    interface MoveNextResultSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move-previous-result`
     */
    interface MovePreviousResultSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.CellEditable.ConstructorProperties, Gtk.Editable.ConstructorProperties, Gtk.Entry.ConstructorProperties {
    }

}

interface OmniSearchEntry extends Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {

    // Own properties of Ide-1.0.Ide.OmniSearchEntry

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.OmniSearchEntry

    /**
     * Gets the search engine to use with the current workbench.
     * @returns An #IdeSearchEngine.
     */
    getSearchEngine(): SearchEngine
    setSearchEngine(searchEngine: SearchEngine): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    copyClipboard(): void

    // Overloads of copyClipboard

    /**
     * Copies the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    copyClipboard(): void
    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    cutClipboard(): void

    // Overloads of cutClipboard

    /**
     * Removes the contents of the currently selected content in the editable and
     * puts it on the clipboard.
     */
    cutClipboard(): void
    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void
    pasteClipboard(): void

    // Overloads of pasteClipboard

    /**
     * Pastes the content of the clipboard to the current position of the
     * cursor in the editable.
     */
    pasteClipboard(): void

    // Own signals of Ide-1.0.Ide.OmniSearchEntry

    connect(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback): number
    on(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback): number
    on(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-next-result", ...args: any[]): void
    connect(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback): number
    on(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-previous-result", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchEntry

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::activates-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::activates-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::activates-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::activates-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::activates-default", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::caps-lock-warning", callback: (...args: any[]) => void): number
    on(sigName: "notify::caps-lock-warning", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::caps-lock-warning", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::caps-lock-warning", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::caps-lock-warning", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::cursor-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cursor-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cursor-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::enable-emoji-completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::enable-emoji-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enable-emoji-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enable-emoji-completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enable-emoji-completion", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-frame", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-frame", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-frame", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (...args: any[]) => void): number
    on(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::inner-border", callback: (...args: any[]) => void): number
    on(sigName: "notify::inner-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inner-border", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inner-border", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inner-border", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::invisible-char", callback: (...args: any[]) => void): number
    on(sigName: "notify::invisible-char", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::invisible-char", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::invisible-char", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::invisible-char", ...args: any[]): void
    connect(sigName: "notify::invisible-char-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::invisible-char-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::invisible-char-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::invisible-char-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::invisible-char-set", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::max-width-chars", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-width-chars", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-width-chars", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-width-chars", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-width-chars", ...args: any[]): void
    connect(sigName: "notify::overwrite-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite-mode", ...args: any[]): void
    connect(sigName: "notify::placeholder-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::placeholder-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::placeholder-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::placeholder-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::placeholder-text", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::populate-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::primary-icon-activatable", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-activatable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::primary-icon-gicon", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-gicon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-gicon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::primary-icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-name", ...args: any[]): void
    connect(sigName: "notify::primary-icon-pixbuf", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-pixbuf", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-pixbuf", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::primary-icon-sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::primary-icon-stock", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-stock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::primary-icon-storage-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-storage-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-storage-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-storage-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-icon-tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-icon-tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-icon-tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::progress-fraction", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress-fraction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress-fraction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress-fraction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress-fraction", ...args: any[]): void
    connect(sigName: "notify::progress-pulse-step", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress-pulse-step", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress-pulse-step", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress-pulse-step", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress-pulse-step", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-activatable", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-activatable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-gicon", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-gicon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-gicon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-gicon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-name", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-pixbuf", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-pixbuf", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-pixbuf", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-pixbuf", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-stock", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-stock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-storage-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-storage-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-storage-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-storage-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-icon-tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-icon-tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-icon-tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: (...args: any[]) => void): number
    on(sigName: "notify::selection-bound", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selection-bound", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selection-bound", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::shadow-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::shadow-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::shadow-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::shadow-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::shadow-type", ...args: any[]): void
    connect(sigName: "notify::show-emoji-icon", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-emoji-icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-emoji-icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-emoji-icon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-emoji-icon", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (...args: any[]) => void): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-length", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-length", ...args: any[]): void
    connect(sigName: "notify::truncate-multiline", callback: (...args: any[]) => void): number
    on(sigName: "notify::truncate-multiline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::truncate-multiline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::truncate-multiline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::truncate-multiline", ...args: any[]): void
    connect(sigName: "notify::visibility", callback: (...args: any[]) => void): number
    on(sigName: "notify::visibility", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visibility", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visibility", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visibility", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-chars", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-chars", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-chars", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (...args: any[]) => void): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: (...args: any[]) => void): number
    on(sigName: "notify::editing-canceled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::editing-canceled", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::editing-canceled", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class OmniSearchEntry extends Gtk.Entry {

    // Own properties of Ide-1.0.Ide.OmniSearchEntry

    static name: string

    // Constructors of Ide-1.0.Ide.OmniSearchEntry

    constructor(config?: OmniSearchEntry.ConstructorProperties) 
    constructor() 
    static new(): OmniSearchEntry
    _init(config?: OmniSearchEntry.ConstructorProperties): void
}

module OmniSearchGroup {

    // Signal callback interfaces

    /**
     * Signal callback interface for `result-activated`
     */
    interface ResultActivatedSignalCallback {
        (object: Gtk.Widget, p0: SearchResult): void
    }

    /**
     * Signal callback interface for `result-selected`
     */
    interface ResultSelectedSignalCallback {
        (object: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchGroup

        provider?: SearchProvider | null
    }

}

interface OmniSearchGroup extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.OmniSearchGroup

    readonly provider: SearchProvider
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.OmniSearchGroup

    activate(): boolean
    addResult(result: SearchResult): void
    clear(): void
    getCount(): number
    getFirst(): SearchResult | null
    getProvider(): SearchProvider
    hasSelection(): boolean
    moveNext(): boolean
    movePrevious(): boolean
    removeResult(result: SearchResult): void
    selectFirst(): void
    selectLast(): void
    unselect(): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.OmniSearchGroup

    connect(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback): number
    on(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "result-activated", p0: SearchResult, ...args: any[]): void
    connect(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback): number
    on(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "result-selected", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchGroup

    connect(sigName: "notify::provider", callback: (...args: any[]) => void): number
    on(sigName: "notify::provider", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::provider", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::provider", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::provider", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class OmniSearchGroup extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniSearchGroup

    static name: string

    // Constructors of Ide-1.0.Ide.OmniSearchGroup

    constructor(config?: OmniSearchGroup.ConstructorProperties) 
    _init(config?: OmniSearchGroup.ConstructorProperties): void
}

module OmniSearchRow {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ListBoxRow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchRow

        iconName?: string | null
        result?: SearchResult | null
    }

}

interface OmniSearchRow extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.OmniSearchRow

    iconName: string | null
    result: SearchResult
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.OmniSearchRow

    getResult(): SearchResult
    setResult(result: SearchResult): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.OmniSearchRow

    connect(sigName: "notify::icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::result", callback: (...args: any[]) => void): number
    on(sigName: "notify::result", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::result", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::result", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::result", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::activatable", callback: (...args: any[]) => void): number
    on(sigName: "notify::activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::activatable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::activatable", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: (...args: any[]) => void): number
    on(sigName: "notify::selectable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selectable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class OmniSearchRow extends Gtk.ListBoxRow {

    // Own properties of Ide-1.0.Ide.OmniSearchRow

    static name: string

    // Constructors of Ide-1.0.Ide.OmniSearchRow

    constructor(config?: OmniSearchRow.ConstructorProperties) 
    _init(config?: OmniSearchRow.ConstructorProperties): void
}

module PkconTransfer {

    // Constructor properties interface

    interface ConstructorProperties extends Transfer.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.PkconTransfer

        packages?: string[] | null
    }

}

interface PkconTransfer {

    // Own properties of Ide-1.0.Ide.PkconTransfer

    readonly packages: string[]
    __gtype__: number

    // Class property signals of Ide-1.0.Ide.PkconTransfer

    connect(sigName: "notify::packages", callback: (...args: any[]) => void): number
    on(sigName: "notify::packages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::packages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::packages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::packages", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::active", callback: (...args: any[]) => void): number
    on(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::status", callback: (...args: any[]) => void): number
    on(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class PkconTransfer extends Transfer {

    // Own properties of Ide-1.0.Ide.PkconTransfer

    static name: string

    // Constructors of Ide-1.0.Ide.PkconTransfer

    constructor(config?: PkconTransfer.ConstructorProperties) 
    constructor(packages: string | null) 
    static new(packages: string | null): PkconTransfer
    _init(config?: PkconTransfer.ConstructorProperties): void
}

module PreferencesPerspective {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Preferences.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Perspective.ConstructorProperties, Dazzle.PreferencesView.ConstructorProperties {
    }

}

interface PreferencesPerspective extends Atk.ImplementorIface, Dazzle.Preferences, Gtk.Buildable, Perspective {

    // Own properties of Ide-1.0.Ide.PreferencesPerspective

    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.PreferencesPerspective

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::show-search-entry", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-search-entry", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-search-entry", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-search-entry", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-search-entry", ...args: any[]): void
    connect(sigName: "notify::use-sidebar", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-sidebar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-sidebar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-sidebar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-sidebar", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class PreferencesPerspective extends Dazzle.PreferencesView {

    // Own properties of Ide-1.0.Ide.PreferencesPerspective

    static name: string

    // Constructors of Ide-1.0.Ide.PreferencesPerspective

    constructor(config?: PreferencesPerspective.ConstructorProperties) 
    _init(config?: PreferencesPerspective.ConstructorProperties): void
}

module Progress {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Progress

        fraction?: number | null
        message?: string | null
    }

}

interface Progress {

    // Own properties of Ide-1.0.Ide.Progress

    readonly completed: boolean
    fraction: number
    message: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Progress

    getFraction(): number
    getMessage(): string | null
    setFraction(fraction: number): void
    setMessage(message: string | null): void

    // Class property signals of Ide-1.0.Ide.Progress

    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::fraction", callback: (...args: any[]) => void): number
    on(sigName: "notify::fraction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fraction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fraction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fraction", ...args: any[]): void
    connect(sigName: "notify::message", callback: (...args: any[]) => void): number
    on(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::message", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::message", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Progress extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Progress

    static name: string

    // Constructors of Ide-1.0.Ide.Progress

    constructor(config?: Progress.ConstructorProperties) 
    constructor() 
    static new(): Progress
    _init(config?: Progress.ConstructorProperties): void
    /**
     * This function is a #GFileProgressCallback helper that will update the
     * #IdeProgress:fraction property. `user_data` must be an #IdeProgress.
     * 
     * Remember to make sure to unref the #IdeProgress instance with
     * g_object_unref() during the #GDestroyNotify.
     * @param currentNumBytes 
     * @param totalNumBytes 
     * @param userData 
     */
    static fileProgressCallback(currentNumBytes: number, totalNumBytes: number, userData: any | null): void
    static flatpakProgressCallback(status: string | null, progress: number, estimating: boolean, userData: any | null): void
}

module Project {

    // Signal callback interfaces

    /**
     * Signal callback interface for `file-renamed`
     */
    interface FileRenamedSignalCallback {
        (object: Gio.File, p0: Gio.File): void
    }

    /**
     * Signal callback interface for `file-trashed`
     */
    interface FileTrashedSignalCallback {
        (object: Gio.File): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Project

        root?: ProjectItem | null
    }

}

interface Project {

    // Own properties of Ide-1.0.Ide.Project

    readonly id: string | null
    readonly name: string | null
    readonly root: ProjectItem
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Project

    addFile(file: ProjectFile): void
    /**
     * Retrieves an #IdeFile for the path specified. #IdeFile provides access to
     * language specific features via ide_file_get_language().
     * 
     * You must hold the reader lock while calling this function. See
     * ide_project_reader_lock() and ide_project_reader_unlock() for more
     * information.
     * @param path A relative path from the project root.
     * @returns An #IdeFile or %NULL if no matching   file could be found.
     */
    getFileForPath(path: string | null): File | null
    /**
     * Gets the #IdeProjectFiles instance within the project tree.
     * If it has not yet been loaded, %NULL is returned.
     * @returns An #IdeProjectFiles or %NULL.
     */
    getFiles(): ProjectFiles | null
    getId(): string | null
    getName(): string | null
    /**
     * Gets a new #IdeFile representing `gfile`.
     * @param gfile A #GFile.
     * @returns An #IdeFile.
     */
    getProjectFile(gfile: Gio.File): File
    /**
     * Retrieves the root item of the project tree.
     * 
     * You must be holding the reader lock while calling and using the result of
     * this function. Other thread may be accessing or modifying the tree without
     * your knowledge. See ide_project_reader_lock() and ide_project_reader_unlock()
     * for more information.
     * 
     * If you need to modify the tree, you must hold a writer lock that has been
     * acquired with ide_project_writer_lock() and released with
     * ide_project_writer_unlock() when you are no longer modifiying the tree.
     * @returns An #IdeProjectItem.
     */
    getRoot(): ProjectItem
    readerLock(): void
    readerUnlock(): void
    renameFileAsync(origFile: Gio.File, newFile: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    renameFileFinish(result: Gio.AsyncResult): boolean
    trashFileAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    trashFileFinish(result: Gio.AsyncResult): boolean
    writerLock(): void
    writerUnlock(): void

    // Own signals of Ide-1.0.Ide.Project

    connect(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback): number
    on(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "file-renamed", p0: Gio.File, ...args: any[]): void
    connect(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback): number
    on(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "file-trashed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Project

    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Project extends Object {

    // Own properties of Ide-1.0.Ide.Project

    static name: string

    // Constructors of Ide-1.0.Ide.Project

    constructor(config?: Project.ConstructorProperties) 
    _init(config?: Project.ConstructorProperties): void
}

module ProjectEdit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectEdit

        range?: SourceRange | null
        replacement?: string | null
    }

}

interface ProjectEdit {

    // Own properties of Ide-1.0.Ide.ProjectEdit

    range: SourceRange
    replacement: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.ProjectEdit

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.ProjectEdit

    /**
     * Returns the range for the edit.
     * @returns An #IdeSourceRange
     */
    getRange(): SourceRange | null
    getReplacement(): string | null
    setRange(range: SourceRange): void
    setReplacement(replacement: string | null): void

    // Class property signals of Ide-1.0.Ide.ProjectEdit

    connect(sigName: "notify::range", callback: (...args: any[]) => void): number
    on(sigName: "notify::range", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::range", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::range", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::range", ...args: any[]): void
    connect(sigName: "notify::replacement", callback: (...args: any[]) => void): number
    on(sigName: "notify::replacement", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::replacement", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::replacement", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::replacement", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectEdit extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectEdit

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectEdit

    constructor(config?: ProjectEdit.ConstructorProperties) 
    constructor() 
    static new(): ProjectEdit
    _init(config?: ProjectEdit.ConstructorProperties): void
}

module ProjectFile {

    // Constructor properties interface

    interface ConstructorProperties extends ProjectItem.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectFile

        file?: Gio.File | null
        fileInfo?: Gio.FileInfo | null
        path?: string | null
    }

}

interface ProjectFile {

    // Own properties of Ide-1.0.Ide.ProjectFile

    file: Gio.File
    fileInfo: Gio.FileInfo
    readonly isDirectory: boolean
    readonly name: string | null
    path: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.ProjectFile

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.ProjectFile

    /**
     * Retrieves the underlying #GFile represented by `file`.
     * @returns Retrieves the #GFile represented by @file.
     */
    getFile(): Gio.File
    /**
     * Retrieves a #GFileInfo containing the basic information about `file`. This
     * includes the name, display name, and file type.
     * @returns A #GFileInfo
     */
    getFileInfo(): Gio.FileInfo
    getIsDirectory(): boolean
    getName(): string | null
    getPath(): string | null

    // Class property signals of Ide-1.0.Ide.ProjectFile

    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::file-info", callback: (...args: any[]) => void): number
    on(sigName: "notify::file-info", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file-info", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file-info", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file-info", ...args: any[]): void
    connect(sigName: "notify::is-directory", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-directory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-directory", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::path", callback: (...args: any[]) => void): number
    on(sigName: "notify::path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::path", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectFile extends ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectFile

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectFile

    constructor(config?: ProjectFile.ConstructorProperties) 
    _init(config?: ProjectFile.ConstructorProperties): void
}

module ProjectFiles {

    // Constructor properties interface

    interface ConstructorProperties extends ProjectItem.ConstructorProperties {
    }

}

interface ProjectFiles {

    // Own properties of Ide-1.0.Ide.ProjectFiles

    __gtype__: number

    // Own fields of Ide-1.0.Ide.ProjectFiles

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.ProjectFiles

    addFile(file: ProjectFile): void
    /**
     * Tries to locate an #IdeProjectFile matching the given file.
     * If `file` is the working directory, `self` is returned.
     * @param file A #GFile.
     * @returns An #IdeProjectItem or %NULL.
     */
    findFile(file: Gio.File): ProjectItem | null
    /**
     * Retrieves an #IdeFile for the path. If no such path exists within the
     * project, %NULL is returned.
     * @param path 
     * @returns An #IdeFile or %NULL.
     */
    getFileForPath(path: string | null): File | null

    // Class property signals of Ide-1.0.Ide.ProjectFiles

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectFiles extends ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectFiles

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectFiles

    constructor(config?: ProjectFiles.ConstructorProperties) 
    _init(config?: ProjectFiles.ConstructorProperties): void
}

module ProjectInfo {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectInfo

        buildSystemName?: string | null
        description?: string | null
        directory?: Gio.File | null
        doap?: Doap | null
        file?: Gio.File | null
        isRecent?: boolean | null
        languages?: string[] | null
        lastModifiedAt?: GLib.DateTime | null
        name?: string | null
        priority?: number | null
    }

}

interface ProjectInfo {

    // Own properties of Ide-1.0.Ide.ProjectInfo

    buildSystemName: string | null
    description: string | null
    directory: Gio.File
    doap: Doap
    file: Gio.File
    isRecent: boolean
    languages: string[]
    lastModifiedAt: GLib.DateTime
    name: string | null
    priority: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.ProjectInfo

    compare(info2: ProjectInfo): number
    getBuildSystemName(): string | null
    getDescription(): string | null
    /**
     * Gets the #IdeProjectInfo:directory property.
     * This is the directory containing the project (if known).
     * @returns A #GFile.
     */
    getDirectory(): Gio.File | null
    getDoap(): Doap | null
    /**
     * Gets the #IdeProjectInfo:file property.
     * This is the project file (such as configure.ac) of the project.
     * @returns A #GFile.
     */
    getFile(): Gio.File | null
    getIsRecent(): boolean
    getLanguages(): string[]
    getLastModifiedAt(): GLib.DateTime | null
    getName(): string | null
    getPriority(): number
    setBuildSystemName(buildSystemName: string | null): void
    setDescription(description: string | null): void
    setDirectory(directory: Gio.File): void
    setFile(file: Gio.File): void
    setIsRecent(isRecent: boolean): void
    setLanguages(languages: string | null): void
    setName(name: string | null): void
    setPriority(priority: number): void

    // Class property signals of Ide-1.0.Ide.ProjectInfo

    connect(sigName: "notify::build-system-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::build-system-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::build-system-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::build-system-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::build-system-name", ...args: any[]): void
    connect(sigName: "notify::description", callback: (...args: any[]) => void): number
    on(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::directory", callback: (...args: any[]) => void): number
    on(sigName: "notify::directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::directory", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::directory", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::directory", ...args: any[]): void
    connect(sigName: "notify::doap", callback: (...args: any[]) => void): number
    on(sigName: "notify::doap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doap", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::is-recent", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-recent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-recent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-recent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-recent", ...args: any[]): void
    connect(sigName: "notify::languages", callback: (...args: any[]) => void): number
    on(sigName: "notify::languages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::languages", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::languages", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::languages", ...args: any[]): void
    connect(sigName: "notify::last-modified-at", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-modified-at", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-modified-at", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-modified-at", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-modified-at", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::priority", callback: (...args: any[]) => void): number
    on(sigName: "notify::priority", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::priority", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::priority", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::priority", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * This class contains information about a project that can be loaded.
 * This information should be used to display a list of available projects.
 * @class 
 */
class ProjectInfo extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectInfo

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectInfo

    constructor(config?: ProjectInfo.ConstructorProperties) 
    _init(config?: ProjectInfo.ConstructorProperties): void
}

module ProjectItem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectItem

        parent?: ProjectItem | null
    }

}

interface ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectItem

    parent: ProjectItem
    __gtype__: number

    // Own fields of Ide-1.0.Ide.ProjectItem

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.ProjectItem

    append(child: ProjectItem): void
    /**
     * A scalable list containing the children of the item.
     * @returns A #GSequence.
     */
    getChildren(): GLib.Sequence
    /**
     * Retrieves the parent #IdeProjectItem of `item,` or %NULL if `item` is the root
     * of the project tree.
     * @returns An #IdeProjectItem or %NULL if the item   is the root of the tree.
     */
    getParent(): ProjectItem | null
    remove(child: ProjectItem): void

    // Class property signals of Ide-1.0.Ide.ProjectItem

    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProjectItem extends Object {

    // Own properties of Ide-1.0.Ide.ProjectItem

    static name: string

    // Constructors of Ide-1.0.Ide.ProjectItem

    constructor(config?: ProjectItem.ConstructorProperties) 
    _init(config?: ProjectItem.ConstructorProperties): void
}

module RecentProjects {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface RecentProjects extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.RecentProjects

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RecentProjects

    discoverAsync(recentOnly: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    discoverFinish(result: Gio.AsyncResult): boolean
    getBusy(): boolean
    /**
     * Gets a #GPtrArray containing the #IdeProjectInfo that have been discovered.
     * @returns A #GPtrArray of #IdeProjectInfo.
     */
    getProjects(): ProjectInfo[]
    /**
     * Removes the provided projects from the recent projects file.
     * @param projectInfos A #GList of #IdeProjectInfo.
     */
    remove(projectInfos: ProjectInfo[]): void

    // Class property signals of Ide-1.0.Ide.RecentProjects

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RecentProjects extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RecentProjects

    static name: string

    // Constructors of Ide-1.0.Ide.RecentProjects

    constructor(config?: RecentProjects.ConstructorProperties) 
    constructor() 
    static new(): RecentProjects
    _init(config?: RecentProjects.ConstructorProperties): void
}

module RunButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface RunButton extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.RunButton

    __gtype__: number

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.RunButton

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RunButton extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.RunButton

    static name: string

    // Constructors of Ide-1.0.Ide.RunButton

    constructor(config?: RunButton.ConstructorProperties) 
    constructor() 
    static new(): RunButton

    // Overloads of new

    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: RunButton.ConstructorProperties): void
}

module RunManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `run`
     */
    interface RunSignalCallback {
        (runner: Runner): void
    }

    /**
     * Signal callback interface for `stopped`
     */
    interface StoppedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.Initable.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.RunManager

        buildTarget?: BuildTarget | null
    }

}

interface RunManager extends Gio.ActionGroup, Gio.Initable {

    // Own properties of Ide-1.0.Ide.RunManager

    buildTarget: BuildTarget
    readonly busy: boolean
    readonly handler: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RunManager

    addHandler(id: string | null, title: string | null, iconName: string | null, accel: string | null, runHandler: RunHandler): void
    cancel(): void
    discoverDefaultTargetAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    discoverDefaultTargetFinish(result: Gio.AsyncResult): BuildTarget
    /**
     * Gets the build target that will be executed by the run manager which
     * was either specified to ide_run_manager_run_async() or determined by
     * the build system.
     * @returns An #IdeBuildTarget or %NULL if no build target   has been set.
     */
    getBuildTarget(): BuildTarget
    getBusy(): boolean
    getHandler(): string | null
    removeHandler(id: string | null): void
    runAsync(buildTarget: BuildTarget, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    runFinish(result: Gio.AsyncResult): boolean
    setBuildTarget(buildTarget: BuildTarget): void
    setHandler(id: string | null): void

    // Own signals of Ide-1.0.Ide.RunManager

    connect(sigName: "run", callback: RunManager.RunSignalCallback): number
    on(sigName: "run", callback: RunManager.RunSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "run", callback: RunManager.RunSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "run", callback: RunManager.RunSignalCallback): NodeJS.EventEmitter
    emit(sigName: "run", ...args: any[]): void
    connect(sigName: "stopped", callback: RunManager.StoppedSignalCallback): number
    on(sigName: "stopped", callback: RunManager.StoppedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "stopped", callback: RunManager.StoppedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "stopped", callback: RunManager.StoppedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "stopped", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.RunManager

    connect(sigName: "notify::build-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::build-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::build-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::build-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::build-target", ...args: any[]): void
    connect(sigName: "notify::busy", callback: (...args: any[]) => void): number
    on(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::busy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::busy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::handler", callback: (...args: any[]) => void): number
    on(sigName: "notify::handler", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::handler", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::handler", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::handler", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RunManager extends Object {

    // Own properties of Ide-1.0.Ide.RunManager

    static name: string

    // Constructors of Ide-1.0.Ide.RunManager

    constructor(config?: RunManager.ConstructorProperties) 
    _init(config?: RunManager.ConstructorProperties): void
}

module Runner {

    // Signal callback interfaces

    /**
     * Signal callback interface for `exited`
     */
    interface ExitedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `spawned`
     */
    interface SpawnedSignalCallback {
        (object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Runner

        argv?: string[] | null
        clearEnv?: boolean | null
        /**
         * If the runner has "failed". This should be set if a plugin can determine
         * that the runner cannot be executed due to an external issue. One such
         * example might be a debugger plugin that cannot locate a suitable debugger
         * to run the program.
         */
        failed?: boolean | null
        /**
         * The "run-on-host" property indicates the program should be run on the
         * host machine rather than inside the application sandbox.
         */
        runOnHost?: boolean | null
    }

}

interface Runner {

    // Own properties of Ide-1.0.Ide.Runner

    argv: string[]
    clearEnv: boolean
    readonly environment: Environment
    /**
     * If the runner has "failed". This should be set if a plugin can determine
     * that the runner cannot be executed due to an external issue. One such
     * example might be a debugger plugin that cannot locate a suitable debugger
     * to run the program.
     */
    failed: boolean
    /**
     * The "run-on-host" property indicates the program should be run on the
     * host machine rather than inside the application sandbox.
     */
    runOnHost: boolean
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Runner

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Runner

    appendArgv(param: string | null): void
    // Has conflict: forceQuit(): void
    /**
     * Gets the argument list as a newly allocated string array.
     * @returns A newly allocated string array that should   be freed with g_strfreev().
     */
    getArgv(): string[]
    getClearEnv(): boolean
    getEnvironment(): Environment
    getFailed(): boolean
    getFlags(): Gio.SubprocessFlags
    getRunOnHost(): boolean
    // Has conflict: getRuntime(): Runtime | null
    // Has conflict: getStderr(): Gio.InputStream | null
    // Has conflict: getStdin(): Gio.OutputStream | null
    // Has conflict: getStdout(): Gio.InputStream | null
    prependArgv(param: string | null): void
    // Has conflict: runAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: runFinish(result: Gio.AsyncResult): boolean
    setArgv(argv: string | null): void
    setClearEnv(clearEnv: boolean): void
    setFailed(failed: boolean): void
    setFlags(flags: Gio.SubprocessFlags): void
    setRunOnHost(runOnHost: boolean): void
    // Has conflict: setTty(ttyFd: number): void
    /**
     * This will ensure that `source_fd` is mapped into the new process as `dest_fd`.
     * If `dest_fd` is -1, then the next fd will be used and that value will be
     * returned. Note that this is not a valid fd in the calling process, only
     * within the destination process.
     * @param sourceFd the fd to map, this will be closed by #IdeRunner
     * @param destFd the target FD in the spawned process, or -1 for next available
     * @returns @dest_fd or the FD or the next available dest_fd.
     */
    takeFd(sourceFd: number, destFd: number): number

    // Own virtual methods of Ide-1.0.Ide.Runner

    fixupLauncher(launcher: SubprocessLauncher): void
    forceQuit(): void
    /**
     * This function will get the #IdeRuntime that will be used to execute the
     * application. Consumers may want to use this to determine if a particular
     * program is available (such as gdb, perf, strace, etc).
     * @virtual 
     * @returns An #IdeRuntime or %NULL.
     */
    getRuntime(): Runtime | null
    getStderr(): Gio.InputStream | null
    getStdin(): Gio.OutputStream | null
    getStdout(): Gio.InputStream | null
    runAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    runFinish(result: Gio.AsyncResult): boolean
    setTty(ttyFd: number): void

    // Own signals of Ide-1.0.Ide.Runner

    connect(sigName: "exited", callback: Runner.ExitedSignalCallback): number
    on(sigName: "exited", callback: Runner.ExitedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "exited", callback: Runner.ExitedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "exited", callback: Runner.ExitedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "exited", ...args: any[]): void
    connect(sigName: "spawned", callback: Runner.SpawnedSignalCallback): number
    on(sigName: "spawned", callback: Runner.SpawnedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "spawned", callback: Runner.SpawnedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "spawned", callback: Runner.SpawnedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "spawned", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Runner

    connect(sigName: "notify::argv", callback: (...args: any[]) => void): number
    on(sigName: "notify::argv", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::argv", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::argv", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::argv", ...args: any[]): void
    connect(sigName: "notify::clear-env", callback: (...args: any[]) => void): number
    on(sigName: "notify::clear-env", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::clear-env", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::clear-env", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::clear-env", ...args: any[]): void
    connect(sigName: "notify::environment", callback: (...args: any[]) => void): number
    on(sigName: "notify::environment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::environment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::environment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::environment", ...args: any[]): void
    connect(sigName: "notify::failed", callback: (...args: any[]) => void): number
    on(sigName: "notify::failed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::failed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::failed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::failed", ...args: any[]): void
    connect(sigName: "notify::run-on-host", callback: (...args: any[]) => void): number
    on(sigName: "notify::run-on-host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::run-on-host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::run-on-host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::run-on-host", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Runner extends Object {

    // Own properties of Ide-1.0.Ide.Runner

    static name: string

    // Constructors of Ide-1.0.Ide.Runner

    constructor(config?: Runner.ConstructorProperties) 
    constructor(context: Context) 
    static new(context: Context): Runner
    _init(config?: Runner.ConstructorProperties): void
}

module Runtime {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Runtime

        displayName?: string | null
        id?: string | null
    }

}

interface Runtime {

    // Own properties of Ide-1.0.Ide.Runtime

    displayName: string | null
    id: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Runtime

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Runtime

    // Has conflict: containsProgramInPath(program: string | null, cancellable: Gio.Cancellable | null): boolean
    // Has conflict: createLauncher(): SubprocessLauncher
    // Has conflict: createRunner(buildTarget: BuildTarget): Runner | null
    getDisplayName(): string | null
    getId(): string | null
    // Has conflict: prepareConfiguration(configuration: Configuration): void
    setDisplayName(displayName: string | null): void
    setId(id: string | null): void
    // Has conflict: translateFile(file: Gio.File): Gio.File

    // Own virtual methods of Ide-1.0.Ide.Runtime

    containsProgramInPath(program: string | null, cancellable: Gio.Cancellable | null): boolean
    /**
     * Creates a launcher for the runtime.
     * 
     * This can be used to execute a command within a runtime.
     * 
     * It is important that this function can be run from a thread without
     * side effects.
     * @virtual 
     * @returns An #IdeSubprocessLauncher or %NULL upon failure.
     */
    createLauncher(): SubprocessLauncher
    /**
     * Creates a new runner that can be used to execute the build target within
     * the runtime. This should be used to implement such features as "run target"
     * or "run unit test" inside the target runtime.
     * @virtual 
     * @param buildTarget 
     * @returns An #IdeRunner if successful, otherwise   %NULL and @error is set.
     */
    createRunner(buildTarget: BuildTarget): Runner | null
    prepareConfiguration(configuration: Configuration): void
    /**
     * Translates the file from a path within the runtime to a path that can
     * be accessed from the host system.
     * @virtual 
     * @param file A #GFile
     * @returns A #GFile.
     */
    translateFile(file: Gio.File): Gio.File

    // Class property signals of Ide-1.0.Ide.Runtime

    connect(sigName: "notify::display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Runtime extends Object {

    // Own properties of Ide-1.0.Ide.Runtime

    static name: string

    // Constructors of Ide-1.0.Ide.Runtime

    constructor(config?: Runtime.ConstructorProperties) 
    constructor(context: Context, id: string | null, title: string | null) 
    static new(context: Context, id: string | null, title: string | null): Runtime
    _init(config?: Runtime.ConstructorProperties): void
}

module RuntimeManager {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface RuntimeManager extends Gio.Initable, Gio.ListModel {

    // Own properties of Ide-1.0.Ide.RuntimeManager

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.RuntimeManager

    add(runtime: Runtime): void
    /**
     * This function will asynchronously check if a runtime is installed.
     * 
     * If it is not installed, it will check to see if any runtime provider
     * can provide the runtime by installing it. If so, the runtime will be
     * installed.
     * 
     * Call ide_runtime_manager_ensure_finish() to get the resulting runtime
     * or a #GError in case of failure.
     * @param runtimeId the id for an expected runtime
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to call after execution
     */
    ensureAsync(runtimeId: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    ensureFinish(result: Gio.AsyncResult): Runtime
    /**
     * Gets the runtime by its internal identifier.
     * @param id the identifier of the runtime
     * @returns An #IdeRuntime.
     */
    getRuntime(id: string | null): Runtime
    remove(runtime: Runtime): void

    // Class property signals of Ide-1.0.Ide.RuntimeManager

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class RuntimeManager extends Object {

    // Own properties of Ide-1.0.Ide.RuntimeManager

    static name: string

    // Constructors of Ide-1.0.Ide.RuntimeManager

    constructor(config?: RuntimeManager.ConstructorProperties) 
    _init(config?: RuntimeManager.ConstructorProperties): void
}

module SearchContext {

    // Signal callback interfaces

    /**
     * Signal callback interface for `completed`
     */
    interface CompletedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `count-set`
     */
    interface CountSetSignalCallback {
        (object: SearchProvider, p0: number): void
    }

    /**
     * Signal callback interface for `result-added`
     */
    interface ResultAddedSignalCallback {
        (object: SearchProvider, p0: SearchResult): void
    }

    /**
     * Signal callback interface for `result-removed`
     */
    interface ResultRemovedSignalCallback {
        (object: SearchProvider, p0: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface SearchContext {

    // Own properties of Ide-1.0.Ide.SearchContext

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SearchContext

    addResult(provider: SearchProvider, result: SearchResult): void
    cancel(): void
    execute(searchTerms: string | null, maxResults: number): void
    getMaxResults(): number
    /**
     * Retrieve the list of providers for the search context.
     * @returns A #GList of   #IdeSearchProvider.
     */
    getProviders(): SearchProvider[]
    providerCompleted(provider: SearchProvider): void
    removeResult(provider: SearchProvider, result: SearchResult): void
    setProviderCount(provider: SearchProvider, count: number): void

    // Own signals of Ide-1.0.Ide.SearchContext

    connect(sigName: "completed", callback: SearchContext.CompletedSignalCallback): number
    on(sigName: "completed", callback: SearchContext.CompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "completed", callback: SearchContext.CompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "completed", callback: SearchContext.CompletedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "completed", ...args: any[]): void
    connect(sigName: "count-set", callback: SearchContext.CountSetSignalCallback): number
    on(sigName: "count-set", callback: SearchContext.CountSetSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "count-set", callback: SearchContext.CountSetSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "count-set", callback: SearchContext.CountSetSignalCallback): NodeJS.EventEmitter
    emit(sigName: "count-set", p0: number, ...args: any[]): void
    connect(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback): number
    on(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "result-added", p0: SearchResult, ...args: any[]): void
    connect(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback): number
    on(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "result-removed", p0: SearchResult, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SearchContext

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SearchContext extends Object {

    // Own properties of Ide-1.0.Ide.SearchContext

    static name: string

    // Constructors of Ide-1.0.Ide.SearchContext

    constructor(config?: SearchContext.ConstructorProperties) 
    _init(config?: SearchContext.ConstructorProperties): void
}

module SearchEngine {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface SearchEngine {

    // Own properties of Ide-1.0.Ide.SearchEngine

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SearchEngine

    /**
     * Begins a query against the requested search providers.
     * 
     * If `providers` is %NULL, all registered providers will be used.
     * @param searchTerms The search terms.
     * @returns An #IdeSearchContext or %NULL if no   providers could be loaded.
     */
    search(searchTerms: string | null): SearchContext | null

    // Class property signals of Ide-1.0.Ide.SearchEngine

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SearchEngine extends Object {

    // Own properties of Ide-1.0.Ide.SearchEngine

    static name: string

    // Constructors of Ide-1.0.Ide.SearchEngine

    constructor(config?: SearchEngine.ConstructorProperties) 
    _init(config?: SearchEngine.ConstructorProperties): void
}

module SearchResult {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SearchResult

        provider?: SearchProvider | null
        score?: number | null
        subtitle?: string | null
        title?: string | null
    }

}

interface SearchResult {

    // Own properties of Ide-1.0.Ide.SearchResult

    provider: SearchProvider
    readonly score: number
    readonly subtitle: string | null
    readonly title: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.SearchResult

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.SearchResult

    // Has conflict: activate(): void
    compare(b: SearchResult): number
    /**
     * Gets the provider that created the search result.
     * @returns An #IdeSearchProvider.
     */
    getProvider(): SearchProvider
    getScore(): number
    getSubtitle(): string | null
    getTitle(): string | null

    // Own virtual methods of Ide-1.0.Ide.SearchResult

    activate(): void

    // Class property signals of Ide-1.0.Ide.SearchResult

    connect(sigName: "notify::provider", callback: (...args: any[]) => void): number
    on(sigName: "notify::provider", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::provider", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::provider", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::provider", ...args: any[]): void
    connect(sigName: "notify::score", callback: (...args: any[]) => void): number
    on(sigName: "notify::score", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::score", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::score", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::score", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (...args: any[]) => void): number
    on(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::subtitle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SearchResult extends Object {

    // Own properties of Ide-1.0.Ide.SearchResult

    static name: string

    // Constructors of Ide-1.0.Ide.SearchResult

    constructor(config?: SearchResult.ConstructorProperties) 
    constructor(provider: SearchProvider, title: string | null, subtitle: string | null, score: number) 
    static new(provider: SearchProvider, title: string | null, subtitle: string | null, score: number): SearchResult
    _init(config?: SearchResult.ConstructorProperties): void
}

module Settings {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Settings

        ignoreProjectSettings?: boolean | null
        relativePath?: string | null
        schemaId?: string | null
    }

}

interface Settings {

    // Own properties of Ide-1.0.Ide.Settings

    readonly ignoreProjectSettings: boolean
    readonly relativePath: string | null
    readonly schemaId: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.Settings

    bind(key: string | null, object: any | null, property: string | null, flags: Gio.SettingsBindFlags): void
    /**
     * Like ide_settings_bind() but allows transforming to and from settings storage using
     * `get_mapping` and `set_mapping` transformation functions.
     * 
     * Call ide_settings_unbind() to unbind the mapping.
     * @param key The settings key
     * @param object the object to bind to
     * @param property the property of `object` to bind to
     * @param flags flags for the binding
     * @param getMapping variant to value mapping
     * @param setMapping value to variant mapping
     */
    bindWithMapping(key: string | null, object: any | null, property: string | null, flags: Gio.SettingsBindFlags, getMapping: Gio.SettingsBindGetMapping | null, setMapping: Gio.SettingsBindSetMapping | null): void
    getBoolean(key: string | null): boolean
    getDefaultValue(key: string | null): GLib.Variant
    getDouble(key: string | null): number
    getIgnoreProjectSettings(): boolean
    getInt(key: string | null): number
    getRelativePath(): string | null
    getSchemaId(): string | null
    getString(key: string | null): string | null
    getUint(key: string | null): number
    getUserValue(key: string | null): GLib.Variant
    getValue(key: string | null): GLib.Variant
    setBoolean(key: string | null, val: boolean): void
    setDouble(key: string | null, val: number): void
    setInt(key: string | null, val: number): void
    setString(key: string | null, val: string | null): void
    setUint(key: string | null, val: number): void
    setValue(key: string | null, value: GLib.Variant): void
    unbind(property: string | null): void

    // Own signals of Ide-1.0.Ide.Settings

    connect(sigName: "changed", callback: Settings.ChangedSignalCallback): number
    on(sigName: "changed", callback: Settings.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: Settings.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: Settings.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Settings

    connect(sigName: "notify::ignore-project-settings", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignore-project-settings", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignore-project-settings", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignore-project-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignore-project-settings", ...args: any[]): void
    connect(sigName: "notify::relative-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::relative-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::relative-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::relative-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::relative-path", ...args: any[]): void
    connect(sigName: "notify::schema-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::schema-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::schema-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::schema-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::schema-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * In Builder, we need support for settings at the user level (their chosen defaults) as well
 * as defaults for a project. #IdeSettings attempts to simplify this by providing a layered
 * approach to settings.
 * 
 * If a setting has been set for the current project, it will be returned. If not, the users
 * preference will be returned. Setting a preference via #IdeSettings will always modify the
 * projects setting, not the users default settings.
 * @class 
 */
class Settings extends Object {

    // Own properties of Ide-1.0.Ide.Settings

    static name: string

    // Constructors of Ide-1.0.Ide.Settings

    constructor(config?: Settings.ConstructorProperties) 
    _init(config?: Settings.ConstructorProperties): void
}

module SourceMap {

    // Signal callback interfaces

    /**
     * Signal callback interface for `hide-map`
     */
    interface HideMapSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `show-map`
     */
    interface ShowMapSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Scrollable.ConstructorProperties, GtkSource.Map.ConstructorProperties {
    }

}

interface SourceMap extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable {

    // Own properties of Ide-1.0.Ide.SourceMap

    __gtype__: number

    // Conflicting properties

    parent: Gtk.TextView & Gtk.Container & Gtk.Container
    parentInstance: any

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Retrieves the #GdkWindow corresponding to an area of the text view;
     * possible windows include the overall widget window, child windows
     * on the left, right, top, bottom, and the window that displays the
     * text buffer. Windows are %NULL and nonexistent if their width or
     * height is 0, and are nonexistent before the widget has been
     * realized.
     * @param win window to get
     * @returns a #GdkWindow, or %NULL
     */
    getWindow(win: Gtk.TextWindowType): Gdk.Window | null

    // Overloads of getWindow

    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    getWindow(): Gdk.Window | null
    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    getWindow(): Gdk.Window | null
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.SourceMap

    connect(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback): number
    on(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback): NodeJS.EventEmitter
    emit(sigName: "hide-map", ...args: any[]): void
    connect(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback): number
    on(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback): NodeJS.EventEmitter
    emit(sigName: "show-map", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: (...args: any[]) => void): number
    on(sigName: "notify::font-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::font-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::view", callback: (...args: any[]) => void): number
    on(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::auto-indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::auto-indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::auto-indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::auto-indent", ...args: any[]): void
    connect(sigName: "notify::background-pattern", callback: (...args: any[]) => void): number
    on(sigName: "notify::background-pattern", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::background-pattern", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::background-pattern", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::draw-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draw-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draw-spaces", ...args: any[]): void
    connect(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlight-current-line", ...args: any[]): void
    connect(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-on-tab", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-spaces-instead-of-tabs", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-marks", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-marks", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-marks", ...args: any[]): void
    connect(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-numbers", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::smart-backspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::smart-backspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::smart-backspace", ...args: any[]): void
    connect(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::smart-home-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::smart-home-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::smart-home-end", ...args: any[]): void
    connect(sigName: "notify::space-drawer", callback: (...args: any[]) => void): number
    on(sigName: "notify::space-drawer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::space-drawer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::space-drawer", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): number
    on(sigName: "notify::accepts-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::accepts-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::accepts-tab", ...args: any[]): void
    connect(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::bottom-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bottom-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bottom-margin", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::cursor-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cursor-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cursor-visible", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (...args: any[]) => void): number
    on(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::justification", callback: (...args: any[]) => void): number
    on(sigName: "notify::justification", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::justification", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::left-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::left-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::left-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::left-margin", ...args: any[]): void
    connect(sigName: "notify::monospace", callback: (...args: any[]) => void): number
    on(sigName: "notify::monospace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::monospace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::monospace", ...args: any[]): void
    connect(sigName: "notify::overwrite", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite", ...args: any[]): void
    connect(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-above-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-below-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-inside-wrap", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::populate-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::right-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (...args: any[]) => void): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::top-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::top-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::top-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::top-margin", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::hadjustment", callback: (...args: any[]) => void): number
    on(sigName: "notify::hadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): number
    on(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hscroll-policy", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: (...args: any[]) => void): number
    on(sigName: "notify::vadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): number
    on(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vscroll-policy", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceMap extends GtkSource.Map {

    // Own properties of Ide-1.0.Ide.SourceMap

    static name: string

    // Constructors of Ide-1.0.Ide.SourceMap

    constructor(config?: SourceMap.ConstructorProperties) 
    _init(config?: SourceMap.ConstructorProperties): void

    // Conflicting static methods

    static newWithBuffer(...args: any[]): any
}

module SourceSnippet {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceSnippet

        description?: string | null
        language?: string | null
        snippetText?: string | null
        trigger?: string | null
    }

}

interface SourceSnippet {

    // Own properties of Ide-1.0.Ide.SourceSnippet

    readonly buffer: Gtk.TextBuffer
    description: string | null
    language: string | null
    readonly markBegin: Gtk.TextMark
    readonly markEnd: Gtk.TextMark
    snippetText: string | null
    readonly tabStop: number
    trigger: string | null
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceSnippet

    addChunk(chunk: SourceSnippetChunk): void
    copy(): SourceSnippet
    getChunkRange(chunk: SourceSnippetChunk, begin: Gtk.TextIter, end: Gtk.TextIter): void
    getContext(): SourceSnippetContext
    getDescription(): string | null
    getLanguage(): string | null
    getMarkBegin(): Gtk.TextMark
    getMarkEnd(): Gtk.TextMark
    getNChunks(): number
    getNthChunk(n: number): SourceSnippetChunk
    getSnippetText(): string | null
    getTabStop(): number
    getTrigger(): string | null
    setDescription(description: string | null): void
    setLanguage(language: string | null): void
    setSnippetText(snippetText: string | null): void
    setTrigger(trigger: string | null): void

    // Class property signals of Ide-1.0.Ide.SourceSnippet

    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::description", callback: (...args: any[]) => void): number
    on(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::description", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::description", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::language", callback: (...args: any[]) => void): number
    on(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::language", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::language", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::mark-begin", callback: (...args: any[]) => void): number
    on(sigName: "notify::mark-begin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mark-begin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mark-begin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mark-begin", ...args: any[]): void
    connect(sigName: "notify::mark-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::mark-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mark-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mark-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mark-end", ...args: any[]): void
    connect(sigName: "notify::snippet-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::snippet-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::snippet-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::snippet-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::snippet-text", ...args: any[]): void
    connect(sigName: "notify::tab-stop", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-stop", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-stop", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-stop", ...args: any[]): void
    connect(sigName: "notify::trigger", callback: (...args: any[]) => void): number
    on(sigName: "notify::trigger", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::trigger", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::trigger", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::trigger", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceSnippet extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippet

    static name: string

    // Constructors of Ide-1.0.Ide.SourceSnippet

    constructor(config?: SourceSnippet.ConstructorProperties) 
    constructor(trigger: string | null, language: string | null) 
    static new(trigger: string | null, language: string | null): SourceSnippet
    _init(config?: SourceSnippet.ConstructorProperties): void
}

module SourceSnippetChunk {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceSnippetChunk

        context?: SourceSnippetContext | null
        spec?: string | null
        tabStop?: number | null
        text?: string | null
        textSet?: boolean | null
    }

}

interface SourceSnippetChunk {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunk

    context: SourceSnippetContext
    spec: string | null
    tabStop: number
    text: string | null
    textSet: boolean
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceSnippetChunk

    /**
     * Copies the source snippet.
     * @returns An #IdeSourceSnippetChunk.
     */
    copy(): SourceSnippetChunk
    /**
     * Gets the context for the snippet insertion.
     * @returns An #IdeSourceSnippetContext.
     */
    getContext(): SourceSnippetContext
    getSpec(): string | null
    getTabStop(): number
    getText(): string | null
    getTextSet(): boolean
    setContext(context: SourceSnippetContext): void
    setSpec(spec: string | null): void
    setTabStop(tabStop: number): void
    setText(text: string | null): void
    setTextSet(textSet: boolean): void

    // Class property signals of Ide-1.0.Ide.SourceSnippetChunk

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::spec", callback: (...args: any[]) => void): number
    on(sigName: "notify::spec", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spec", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spec", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spec", ...args: any[]): void
    connect(sigName: "notify::tab-stop", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-stop", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-stop", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-stop", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-stop", ...args: any[]): void
    connect(sigName: "notify::text", callback: (...args: any[]) => void): number
    on(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-set", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceSnippetChunk extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunk

    static name: string

    // Constructors of Ide-1.0.Ide.SourceSnippetChunk

    constructor(config?: SourceSnippetChunk.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippetChunk
    _init(config?: SourceSnippetChunk.ConstructorProperties): void
}

module SourceSnippetContext {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippetContext {

    // Own properties of Ide-1.0.Ide.SourceSnippetContext

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceSnippetContext

    addSharedVariable(key: string | null, value: string | null): void
    addVariable(key: string | null, value: string | null): void
    clearVariables(): void
    dump(): void
    emitChanged(): void
    expand(input: string | null): string | null
    getVariable(key: string | null): string | null
    setLinePrefix(linePrefix: string | null): void
    setTabWidth(tabSize: number): void
    setUseSpaces(useSpaces: boolean): void

    // Own signals of Ide-1.0.Ide.SourceSnippetContext

    connect(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback): number
    on(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceSnippetContext

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * This class is currently used primary as a hashtable. However, the longer
 * term goal is to have it hold onto a GjsContext as well as other languages
 * so that #IdeSourceSnippetChunk<!-- -->'s can expand themselves by executing
 * script within the context.
 * 
 * The #IdeSourceSnippet will build the context and then expand each of the
 * chunks during the insertion/edit phase.
 * @class 
 */
class SourceSnippetContext extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetContext

    static name: string

    // Constructors of Ide-1.0.Ide.SourceSnippetContext

    constructor(config?: SourceSnippetContext.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippetContext
    _init(config?: SourceSnippetContext.ConstructorProperties): void
}

module SourceSnippets {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippets {

    // Own properties of Ide-1.0.Ide.SourceSnippets

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceSnippets

    add(snippet: SourceSnippet): void
    clear(): void
    count(): number
    foreach(prefix: string | null, foreachFunc: GLib.Func): void
    merge(other: SourceSnippets): void

    // Class property signals of Ide-1.0.Ide.SourceSnippets

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceSnippets extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippets

    static name: string

    // Constructors of Ide-1.0.Ide.SourceSnippets

    constructor(config?: SourceSnippets.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippets
    _init(config?: SourceSnippets.ConstructorProperties): void
}

module SourceSnippetsManager {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippetsManager {

    // Own properties of Ide-1.0.Ide.SourceSnippetsManager

    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceSnippetsManager

    /**
     * Gets the snippets for a given source language.
     * @param language 
     * @returns An #IdeSourceSnippets or %NULL.
     */
    getForLanguage(language: GtkSource.Language): SourceSnippets | null
    /**
     * Gets the snippets for a given source language.
     * @param languageId 
     * @returns An #IdeSourceSnippets or %NULL.
     */
    getForLanguageId(languageId: string | null): SourceSnippets | null
    loadAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    loadFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.SourceSnippetsManager

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceSnippetsManager extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetsManager

    static name: string

    // Constructors of Ide-1.0.Ide.SourceSnippetsManager

    constructor(config?: SourceSnippetsManager.ConstructorProperties) 
    _init(config?: SourceSnippetsManager.ConstructorProperties): void
}

module SourceView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        (object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `add-cursor`
     */
    interface AddCursorSignalCallback {
        (object: CursorType): void
    }

    /**
     * Signal callback interface for `append-to-count`
     */
    interface AppendToCountSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `begin-macro`
     */
    interface BeginMacroSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `begin-rename`
     */
    interface BeginRenameSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `begin-user-action`
     */
    interface BeginUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `capture-modifier`
     */
    interface CaptureModifierSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-count`
     */
    interface ClearCountSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-modifier`
     */
    interface ClearModifierSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-selection`
     */
    interface ClearSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-snippets`
     */
    interface ClearSnippetsSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cycle-completion`
     */
    interface CycleCompletionSignalCallback {
        (object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `decrease-font-size`
     */
    interface DecreaseFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-selection`
     */
    interface DeleteSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `duplicate-entire-line`
     */
    interface DuplicateEntireLineSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `end-macro`
     */
    interface EndMacroSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `end-user-action`
     */
    interface EndUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `find-references`
     */
    interface FindReferencesSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `focus-location`
     */
    interface FocusLocationSignalCallback {
        (object: SourceLocation): void
    }

    /**
     * Signal callback interface for `format-selection`
     */
    interface FormatSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `goto-definition`
     */
    interface GotoDefinitionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `hide-completion`
     */
    interface HideCompletionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `increase-font-size`
     */
    interface IncreaseFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `indent-selection`
     */
    interface IndentSelectionSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `insert-modifier`
     */
    interface InsertModifierSignalCallback {
        (useCount: boolean): void
    }

    /**
     * Signal callback interface for `jump`
     */
    interface JumpSignalCallback {
        (object: Gtk.TextIter): void
    }

    /**
     * Signal callback interface for `move-error`
     */
    interface MoveErrorSignalCallback {
        (dir: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `move-search`
     */
    interface MoveSearchSignalCallback {
        (object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number): void
    }

    /**
     * Signal callback interface for `movement`
     */
    interface MovementSignalCallback {
        (object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard-extended`
     */
    interface PasteClipboardExtendedSignalCallback {
        (object: boolean, p0: boolean, p1: boolean): void
    }

    /**
     * Signal callback interface for `pop-selection`
     */
    interface PopSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `pop-snippet`
     */
    interface PopSnippetSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `push-selection`
     */
    interface PushSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `push-snippet`
     */
    interface PushSnippetSignalCallback {
        (snippet: SourceSnippet, iter: Gtk.TextIter | null): void
    }

    /**
     * Signal callback interface for `rebuild-highlight`
     */
    interface RebuildHighlightSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `reindent`
     */
    interface ReindentSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `remove-cursors`
     */
    interface RemoveCursorsSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `replay-macro`
     */
    interface ReplayMacroSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `reset-font-size`
     */
    interface ResetFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `restore-insert-mark`
     */
    interface RestoreInsertMarkSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-command`
     */
    interface SaveCommandSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-insert-mark`
     */
    interface SaveInsertMarkSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-search-char`
     */
    interface SaveSearchCharSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `select-inner`
     */
    interface SelectInnerSignalCallback {
        (object: string | null, p0: string | null, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `select-tag`
     */
    interface SelectTagSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `selection-theatric`
     */
    interface SelectionTheatricSignalCallback {
        (object: SourceViewTheatric): void
    }

    /**
     * Signal callback interface for `set-mode`
     */
    interface SetModeSignalCallback {
        (object: string | null, p0: SourceViewModeType): void
    }

    /**
     * Signal callback interface for `set-overwrite`
     */
    interface SetOverwriteSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `set-search-text`
     */
    interface SetSearchTextSignalCallback {
        (object: string | null, p0: boolean): void
    }

    /**
     * Signal callback interface for `sort`
     */
    interface SortSignalCallback {
        (ignoreCase: boolean, reverse: boolean): void
    }

    /**
     * Signal callback interface for `swap-selection-bounds`
     */
    interface SwapSelectionBoundsSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Scrollable.ConstructorProperties, GtkSource.View.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceView

        backForwardList?: BackForwardList | null
        count?: number | null
        enableWordCompletion?: boolean | null
        fontDesc?: Pango.FontDescription | null
        fontName?: string | null
        indentStyle?: IndentStyle | null
        insertMatchingBrace?: boolean | null
        overscroll?: number | null
        overwriteBraces?: boolean | null
        rubberbandSearch?: boolean | null
        scrollOffset?: number | null
        searchDirection?: Gtk.DirectionType | null
        showGridLines?: boolean | null
        showLineChanges?: boolean | null
        /**
         * If the diagnostics gutter should be visible.
         * 
         * This also requires that IdeBuffer:highlight-diagnostics is set to %TRUE
         * to generate diagnostics.
         */
        showLineDiagnostics?: boolean | null
        showSearchBubbles?: boolean | null
        showSearchShadow?: boolean | null
        snippetCompletion?: boolean | null
        spellChecking?: boolean | null
    }

}

interface SourceView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable {

    // Own properties of Ide-1.0.Ide.SourceView

    backForwardList: BackForwardList
    count: number
    enableWordCompletion: boolean
    readonly fileSettings: FileSettings
    fontDesc: Pango.FontDescription
    fontName: string | null
    indentStyle: IndentStyle
    readonly indenter: Indenter
    insertMatchingBrace: boolean
    readonly modeDisplayName: string | null
    overscroll: number
    overwriteBraces: boolean
    rubberbandSearch: boolean
    scrollOffset: number
    readonly searchContext: GtkSource.SearchContext
    searchDirection: Gtk.DirectionType
    showGridLines: boolean
    showLineChanges: boolean
    /**
     * If the diagnostics gutter should be visible.
     * 
     * This also requires that IdeBuffer:highlight-diagnostics is set to %TRUE
     * to generate diagnostics.
     */
    showLineDiagnostics: boolean
    showSearchBubbles: boolean
    showSearchShadow: boolean
    snippetCompletion: boolean
    spellChecking: boolean
    __gtype__: number

    // Conflicting properties

    parent: Gtk.TextView & Gtk.Container & Gtk.Container

    // Own fields of Ide-1.0.Ide.SourceView

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.SourceView

    // Has conflict: clearSearch(): void
    // Has conflict: clearSnippets(): void
    /**
     * Gets the #IdeSourceView:back-forward-list property. This is the list that is used to manage
     * navigation history between multiple #IdeSourceView.
     * @returns An #IdeBackForwardList or %NULL.
     */
    getBackForwardList(): BackForwardList | null
    getCount(): number
    /**
     * Gets the current snippet if there is one, otherwise %NULL.
     * @returns An #IdeSourceSnippet or %NULL.
     */
    getCurrentSnippet(): SourceSnippet | null
    getEnableWordCompletion(): boolean
    /**
     * Gets the #IdeSourceView:file-settings property. This contains various
     * settings for how the file should be rendered in the view, and preferences
     * such as spaces vs tabs.
     * @returns An #IdeFileSettings or %NULL.
     */
    getFileSettings(): FileSettings | null
    getFontDesc(): Pango.FontDescription
    getHighlightCurrentLine(): boolean
    getInsertMatchingBrace(): boolean
    getIterAtVisualColumn(column: number, location: Gtk.TextIter): void
    getModeDisplayName(): string | null
    getModeName(): string | null
    getOverwrite(): boolean
    getOverwriteBraces(): boolean
    getRubberbandSearch(): boolean
    /**
     * Gets the #IdeSourceView:scroll-offset property. This property contains the number of lines
     * that should be kept above or below the line containing the insertion cursor relative to the
     * top and bottom of the visible text window.
     */
    getScrollOffset(): number
    /**
     * Returns the #GtkSourceSearchContext for the source view if there is one.
     * @returns A #GtkSourceSearchContext or %NULL.
     */
    getSearchContext(): GtkSource.SearchContext | null
    /**
     * Gets the current search direction.
     * @returns A #GtkDirectionType
     */
    getSearchDirection(): Gtk.DirectionType
    getShowGridLines(): boolean
    getShowLineChanges(): boolean
    getShowLineDiagnostics(): boolean
    /**
     * Gets the #IdeSourceView:show-search-bubbles property.
     * 
     * If this is set to %TRUE, a bubble will be drawn around search results to
     * make them stand out.
     * 
     * The default is %FALSE.
     */
    getShowSearchBubbles(): boolean
    /**
     * Gets the #IdeSourceView:show-search-shadow property.
     * 
     * If this property is %TRUE, then when searching, a shadow will be drawn over
     * the portion of the visible region that does not contain a match. This can
     * be used to help bring focus to the matches.
     * 
     * The default is %FALSE.
     */
    getShowSearchShadow(): boolean
    /**
     * Gets the #IdeSourceView:snippet-completion property.
     * 
     * If enabled, snippet expansion can be performed via the auto completion drop down.
     */
    getSnippetCompletion(): boolean
    getSpellChecking(): boolean
    /**
     * Gets the visible region in buffer coordinates that is the visible area of the buffer. This
     * is similar to gtk_text_view_get_visible_area() except that it takes into account the
     * #IdeSourceView:scroll-offset property to ensure there is space above and below the
     * visible_rect.
     */
    getVisibleRect(): /* visibleRect */ Gdk.Rectangle
    getVisualColumn(location: Gtk.TextIter): number
    getVisualPosition(line: number, lineColumn: number): void
    // Has conflict: jump(location: Gtk.TextIter): void
    moveMarkOnscreen(mark: Gtk.TextMark): boolean
    placeCursorOnscreen(): boolean
    popSnippet(): void
    /**
     * Pushes a new snippet onto the source view.
     * @param snippet An #IdeSourceSnippet.
     * @param location A location for the snippet or %NULL.
     */
    pushSnippet(snippet: SourceSnippet, location: Gtk.TextIter | null): void
    rollbackSearch(): void
    scrollMarkOnscreen(mark: Gtk.TextMark, useAlign: boolean, alignx: number, aligny: number): void

    // Overloads of scrollMarkOnscreen

    /**
     * Scrolls `text_view` the minimum distance such that `mark` is contained
     * within the visible area of the widget.
     * @param mark a mark in the buffer for `text_view`
     */
    scrollMarkOnscreen(mark: Gtk.TextMark): void
    scrollToIter(iter: Gtk.TextIter, withinMargin: number, useAlign: boolean, xalign: number, yalign: number, animateScroll: boolean): void

    // Overloads of scrollToIter

    /**
     * Scrolls `text_view` so that `iter` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * 
     * Note that this function uses the currently-computed height of the
     * lines in the text buffer. Line heights are computed in an idle
     * handler; so this function may not have the desired effect if it’s
     * called before the height computations. To avoid oddness, consider
     * using gtk_text_view_scroll_to_mark() which saves a point to be
     * scrolled to after line validation.
     * @param iter a #GtkTextIter
     * @param withinMargin margin as a [0.0,0.5) fraction of screen size
     * @param useAlign whether to use alignment arguments (if %FALSE,    just get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     * @returns %TRUE if scrolling occurred
     */
    scrollToIter(iter: Gtk.TextIter, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): boolean
    scrollToMark(mark: Gtk.TextMark, withinMargin: number, useAlign: boolean, xalign: number, yalign: number, animateScroll: boolean): void

    // Overloads of scrollToMark

    /**
     * Scrolls `text_view` so that `mark` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * @param mark a #GtkTextMark
     * @param withinMargin margin as a [0.0,0.5) fraction of screen size
     * @param useAlign whether to use alignment arguments (if %FALSE, just    get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     */
    scrollToMark(mark: Gtk.TextMark, withinMargin: number, useAlign: boolean, xalign: number, yalign: number): void
    setBackForwardList(backForwardList: BackForwardList): void
    setCount(count: number): void
    setEnableWordCompletion(enableWordCopletion: boolean): void
    setFontDesc(fontDesc: Pango.FontDescription): void
    setFontName(fontName: string | null): void
    setHighlightCurrentLine(highlightCurrentLine: boolean): void
    setInsertMatchingBrace(insertMatchingBrace: boolean): void
    setMisspelledWord(start: Gtk.TextIter, end: Gtk.TextIter): void
    setOverwriteBraces(overwriteBraces: boolean): void
    setRubberbandSearch(rubberbandSearch: boolean): void
    /**
     * Sets the #IdeSourceView:scroll-offset property. See ide_source_view_get_scroll_offset() for
     * more information. Set to 0 to unset this property.
     * @param scrollOffset 
     */
    setScrollOffset(scrollOffset: number): void
    /**
     * Sets the search direction.
     * 
     * This can be used to invert the normal search direction so that a forward
     * movement is towards the beginning of the document.
     * @param direction the direction
     */
    setSearchDirection(direction: Gtk.DirectionType): void
    setShowGridLines(showGridLines: boolean): void
    setShowLineChanges(showLineChanges: boolean): void
    setShowLineDiagnostics(showLineChanges: boolean): void
    setShowSearchBubbles(showSearchBubbles: boolean): void
    setShowSearchShadow(showSearchBubbles: boolean): void
    /**
     * Sets the #IdeSourceView:snippet-completion property. By setting this property to %TRUE,
     * snippets will be loaded for the currently activated source code language. See #IdeSourceSnippet
     * for more information on what can be provided via a snippet.
     * 
     * See also: ide_source_view_get_snippet_completion()
     * @param snippetCompletion 
     */
    setSnippetCompletion(snippetCompletion: boolean): void
    setSpellChecking(enable: boolean): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Retrieves the #GdkWindow corresponding to an area of the text view;
     * possible windows include the overall widget window, child windows
     * on the left, right, top, bottom, and the window that displays the
     * text buffer. Windows are %NULL and nonexistent if their width or
     * height is 0, and are nonexistent before the widget has been
     * realized.
     * @param win window to get
     * @returns a #GdkWindow, or %NULL
     */
    getWindow(win: Gtk.TextWindowType): Gdk.Window | null

    // Overloads of getWindow

    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    getWindow(): Gdk.Window | null
    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    getWindow(): Gdk.Window | null
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own virtual methods of Ide-1.0.Ide.SourceView

    addCursor(type: number): void
    appendToCount(digit: number): void
    autoIndent(): void
    beginMacro(): void
    beginRename(): void
    captureModifier(): void
    clearCount(): void
    clearModifier(): void
    clearSearch(): void
    clearSelection(): void
    clearSnippets(): void
    cycleCompletion(direction: Gtk.DirectionType): void
    decreaseFontSize(): void
    deleteSelection(): void
    endMacro(): void
    focusLocation(location: SourceLocation): void
    gotoDefinition(): void
    hideCompletion(): void
    increaseFontSize(): void
    indentSelection(level: number): void
    insertAtCursorAndIndent(str: string | null): void
    insertModifier(useCount: boolean): void
    jump(location: Gtk.TextIter): void
    moveError(dir: Gtk.DirectionType): void
    moveSearch(dir: Gtk.DirectionType, extendSelection: boolean, selectMatch: boolean, exclusive: boolean, applyCount: boolean, atWordBoundaries: number): void
    movement(movement: SourceViewMovement, extendSelection: boolean, exclusive: boolean, applyCount: boolean): void
    pasteClipboardExtended(smartLines: boolean, afterCursor: boolean, placeCursorAtOriginal: boolean): void
    popSelection(): void
    pushSelection(): void
    rebuildHighlight(): void
    removeCursors(): void
    replayMacro(useCount: boolean): void
    requestDocumentation(): void
    resetFontSize(): void
    restoreInsertMark(): void
    saveCommand(): void
    saveInsertMark(): void
    saveSearchChar(): void
    selectInner(innerLeft: string | null, innerRight: string | null, exclusive: boolean, stringMode: boolean): void
    selectTag(exclusive: boolean): void
    selectionTheatric(theatric: SourceViewTheatric): void
    setMode(mode: string | null, type: SourceViewModeType): void
    setOverwrite(overwrite: boolean): void

    // Overloads of setOverwrite

    /**
     * Changes the #GtkTextView overwrite mode.
     * @param overwrite %TRUE to turn on overwrite mode, %FALSE to turn it off
     */
    setOverwrite(overwrite: boolean): void
    setSearchText(searchText: string | null, fromSelection: boolean): void
    sort(ignoreCase: boolean, reverse: boolean): void
    swapSelectionBounds(): void

    // Own signals of Ide-1.0.Ide.SourceView

    connect(sigName: "action", callback: SourceView.ActionSignalCallback): number
    on(sigName: "action", callback: SourceView.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "action", callback: SourceView.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "action", callback: SourceView.ActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "action", p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback): number
    on(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "add-cursor", ...args: any[]): void
    connect(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback): number
    on(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback): NodeJS.EventEmitter
    emit(sigName: "append-to-count", ...args: any[]): void
    connect(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback): number
    on(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-macro", ...args: any[]): void
    connect(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback): number
    on(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-rename", ...args: any[]): void
    connect(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback): number
    on(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-user-action", ...args: any[]): void
    connect(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback): number
    on(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "capture-modifier", ...args: any[]): void
    connect(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback): number
    on(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-count", ...args: any[]): void
    connect(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback): number
    on(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-modifier", ...args: any[]): void
    connect(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback): number
    on(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback): number
    on(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-selection", ...args: any[]): void
    connect(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback): number
    on(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-snippets", ...args: any[]): void
    connect(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback): number
    on(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "cycle-completion", ...args: any[]): void
    connect(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback): number
    on(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "decrease-font-size", ...args: any[]): void
    connect(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback): number
    on(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "delete-selection", ...args: any[]): void
    connect(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback): number
    on(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback): NodeJS.EventEmitter
    emit(sigName: "duplicate-entire-line", ...args: any[]): void
    connect(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback): number
    on(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "end-macro", ...args: any[]): void
    connect(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback): number
    on(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "end-user-action", ...args: any[]): void
    connect(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback): number
    on(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "find-references", ...args: any[]): void
    connect(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback): number
    on(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "focus-location", ...args: any[]): void
    connect(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback): number
    on(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "format-selection", ...args: any[]): void
    connect(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback): number
    on(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "goto-definition", ...args: any[]): void
    connect(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback): number
    on(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "hide-completion", ...args: any[]): void
    connect(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback): number
    on(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "increase-font-size", ...args: any[]): void
    connect(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback): number
    on(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "indent-selection", ...args: any[]): void
    connect(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback): number
    on(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "insert-modifier", ...args: any[]): void
    connect(sigName: "jump", callback: SourceView.JumpSignalCallback): number
    on(sigName: "jump", callback: SourceView.JumpSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "jump", callback: SourceView.JumpSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "jump", callback: SourceView.JumpSignalCallback): NodeJS.EventEmitter
    emit(sigName: "jump", ...args: any[]): void
    connect(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback): number
    on(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-error", ...args: any[]): void
    connect(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback): number
    on(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-search", p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number, ...args: any[]): void
    connect(sigName: "movement", callback: SourceView.MovementSignalCallback): number
    on(sigName: "movement", callback: SourceView.MovementSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "movement", callback: SourceView.MovementSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "movement", callback: SourceView.MovementSignalCallback): NodeJS.EventEmitter
    emit(sigName: "movement", p0: boolean, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback): number
    on(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "paste-clipboard-extended", p0: boolean, p1: boolean, ...args: any[]): void
    connect(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback): number
    on(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "pop-selection", ...args: any[]): void
    connect(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback): number
    on(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback): NodeJS.EventEmitter
    emit(sigName: "pop-snippet", ...args: any[]): void
    connect(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback): number
    on(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "push-selection", ...args: any[]): void
    connect(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback): number
    on(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback): NodeJS.EventEmitter
    emit(sigName: "push-snippet", iter: Gtk.TextIter | null, ...args: any[]): void
    connect(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback): number
    on(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback): NodeJS.EventEmitter
    emit(sigName: "rebuild-highlight", ...args: any[]): void
    connect(sigName: "reindent", callback: SourceView.ReindentSignalCallback): number
    on(sigName: "reindent", callback: SourceView.ReindentSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "reindent", callback: SourceView.ReindentSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "reindent", callback: SourceView.ReindentSignalCallback): NodeJS.EventEmitter
    emit(sigName: "reindent", ...args: any[]): void
    connect(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback): number
    on(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "remove-cursors", ...args: any[]): void
    connect(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback): number
    on(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "replay-macro", ...args: any[]): void
    connect(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback): number
    on(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "request-documentation", ...args: any[]): void
    connect(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback): number
    on(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "reset-font-size", ...args: any[]): void
    connect(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback): number
    on(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback): NodeJS.EventEmitter
    emit(sigName: "restore-insert-mark", ...args: any[]): void
    connect(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback): number
    on(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-command", ...args: any[]): void
    connect(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback): number
    on(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-insert-mark", ...args: any[]): void
    connect(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback): number
    on(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-search-char", ...args: any[]): void
    connect(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback): number
    on(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback): NodeJS.EventEmitter
    emit(sigName: "select-inner", p0: string | null, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback): number
    on(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback): NodeJS.EventEmitter
    emit(sigName: "select-tag", ...args: any[]): void
    connect(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback): number
    on(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback): NodeJS.EventEmitter
    emit(sigName: "selection-theatric", ...args: any[]): void
    connect(sigName: "set-mode", callback: SourceView.SetModeSignalCallback): number
    on(sigName: "set-mode", callback: SourceView.SetModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-mode", callback: SourceView.SetModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-mode", callback: SourceView.SetModeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-mode", p0: SourceViewModeType, ...args: any[]): void
    connect(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback): number
    on(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-overwrite", ...args: any[]): void
    connect(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback): number
    on(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-search-text", p0: boolean, ...args: any[]): void
    connect(sigName: "sort", callback: SourceView.SortSignalCallback): number
    on(sigName: "sort", callback: SourceView.SortSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "sort", callback: SourceView.SortSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "sort", callback: SourceView.SortSignalCallback): NodeJS.EventEmitter
    emit(sigName: "sort", reverse: boolean, ...args: any[]): void
    connect(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback): number
    on(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "swap-selection-bounds", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceView

    connect(sigName: "notify::back-forward-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::back-forward-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::back-forward-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::back-forward-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::back-forward-list", ...args: any[]): void
    connect(sigName: "notify::count", callback: (...args: any[]) => void): number
    on(sigName: "notify::count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::count", ...args: any[]): void
    connect(sigName: "notify::enable-word-completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::enable-word-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enable-word-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enable-word-completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enable-word-completion", ...args: any[]): void
    connect(sigName: "notify::file-settings", callback: (...args: any[]) => void): number
    on(sigName: "notify::file-settings", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file-settings", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file-settings", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file-settings", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: (...args: any[]) => void): number
    on(sigName: "notify::font-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::font-desc", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::font-desc", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::font-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::font-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::font-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::font-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::font-name", ...args: any[]): void
    connect(sigName: "notify::indent-style", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-style", ...args: any[]): void
    connect(sigName: "notify::indenter", callback: (...args: any[]) => void): number
    on(sigName: "notify::indenter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indenter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indenter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indenter", ...args: any[]): void
    connect(sigName: "notify::insert-matching-brace", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-matching-brace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-matching-brace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-matching-brace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-matching-brace", ...args: any[]): void
    connect(sigName: "notify::mode-display-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::mode-display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mode-display-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mode-display-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mode-display-name", ...args: any[]): void
    connect(sigName: "notify::overscroll", callback: (...args: any[]) => void): number
    on(sigName: "notify::overscroll", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overscroll", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overscroll", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overscroll", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite-braces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite-braces", ...args: any[]): void
    connect(sigName: "notify::rubberband-search", callback: (...args: any[]) => void): number
    on(sigName: "notify::rubberband-search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::rubberband-search", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::rubberband-search", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::rubberband-search", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::scroll-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scroll-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scroll-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::search-context", callback: (...args: any[]) => void): number
    on(sigName: "notify::search-context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::search-context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::search-context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::search-context", ...args: any[]): void
    connect(sigName: "notify::search-direction", callback: (...args: any[]) => void): number
    on(sigName: "notify::search-direction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::search-direction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::search-direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::search-direction", ...args: any[]): void
    connect(sigName: "notify::show-grid-lines", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-grid-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-grid-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-grid-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-grid-lines", ...args: any[]): void
    connect(sigName: "notify::show-line-changes", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-changes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-changes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-changes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-changes", ...args: any[]): void
    connect(sigName: "notify::show-line-diagnostics", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-diagnostics", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-diagnostics", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-diagnostics", ...args: any[]): void
    connect(sigName: "notify::show-search-bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-search-bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-search-bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-search-bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-search-bubbles", ...args: any[]): void
    connect(sigName: "notify::show-search-shadow", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-search-shadow", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-search-shadow", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-search-shadow", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-search-shadow", ...args: any[]): void
    connect(sigName: "notify::snippet-completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::snippet-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::snippet-completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::snippet-completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::snippet-completion", ...args: any[]): void
    connect(sigName: "notify::spell-checking", callback: (...args: any[]) => void): number
    on(sigName: "notify::spell-checking", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spell-checking", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spell-checking", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spell-checking", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::auto-indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::auto-indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::auto-indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::auto-indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::auto-indent", ...args: any[]): void
    connect(sigName: "notify::background-pattern", callback: (...args: any[]) => void): number
    on(sigName: "notify::background-pattern", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::background-pattern", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::background-pattern", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::background-pattern", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (...args: any[]) => void): number
    on(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completion", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completion", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::draw-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draw-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draw-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draw-spaces", ...args: any[]): void
    connect(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): number
    on(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::highlight-current-line", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::highlight-current-line", ...args: any[]): void
    connect(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-on-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-on-tab", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): number
    on(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::insert-spaces-instead-of-tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::insert-spaces-instead-of-tabs", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-marks", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-marks", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-marks", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-marks", ...args: any[]): void
    connect(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-line-numbers", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-line-numbers", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): number
    on(sigName: "notify::smart-backspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::smart-backspace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::smart-backspace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::smart-backspace", ...args: any[]): void
    connect(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::smart-home-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::smart-home-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::smart-home-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::smart-home-end", ...args: any[]): void
    connect(sigName: "notify::space-drawer", callback: (...args: any[]) => void): number
    on(sigName: "notify::space-drawer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::space-drawer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::space-drawer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::space-drawer", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tab-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tab-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): number
    on(sigName: "notify::accepts-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::accepts-tab", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::accepts-tab", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::accepts-tab", ...args: any[]): void
    connect(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::bottom-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bottom-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bottom-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bottom-margin", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::cursor-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cursor-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cursor-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cursor-visible", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (...args: any[]) => void): number
    on(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::editable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::editable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (...args: any[]) => void): number
    on(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::im-module", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::im-module", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-hints", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-hints", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (...args: any[]) => void): number
    on(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::input-purpose", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::input-purpose", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::justification", callback: (...args: any[]) => void): number
    on(sigName: "notify::justification", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::justification", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::justification", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::left-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::left-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::left-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::left-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::left-margin", ...args: any[]): void
    connect(sigName: "notify::monospace", callback: (...args: any[]) => void): number
    on(sigName: "notify::monospace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::monospace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::monospace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::monospace", ...args: any[]): void
    connect(sigName: "notify::overwrite", callback: (...args: any[]) => void): number
    on(sigName: "notify::overwrite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::overwrite", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::overwrite", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::overwrite", ...args: any[]): void
    connect(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-above-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-above-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-below-lines", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-below-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): number
    on(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pixels-inside-wrap", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pixels-inside-wrap", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::populate-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::populate-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::right-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::right-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::right-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::right-margin", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (...args: any[]) => void): number
    on(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tabs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tabs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::top-margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::top-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::top-margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::top-margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::top-margin", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::wrap-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::wrap-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::wrap-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::hadjustment", callback: (...args: any[]) => void): number
    on(sigName: "notify::hadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): number
    on(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hscroll-policy", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: (...args: any[]) => void): number
    on(sigName: "notify::vadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vadjustment", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vadjustment", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): number
    on(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vscroll-policy", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vscroll-policy", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceView extends GtkSource.View {

    // Own properties of Ide-1.0.Ide.SourceView

    static name: string

    // Constructors of Ide-1.0.Ide.SourceView

    constructor(config?: SourceView.ConstructorProperties) 
    _init(config?: SourceView.ConstructorProperties): void

    // Conflicting static methods

    static newWithBuffer(...args: any[]): any
}

module SourceViewMode {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        (object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `add-cursor`
     */
    interface AddCursorSignalCallback {
        (object: CursorType): void
    }

    /**
     * Signal callback interface for `append-to-count`
     */
    interface AppendToCountSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `backspace`
     */
    interface BackspaceSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `begin-macro`
     */
    interface BeginMacroSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `begin-rename`
     */
    interface BeginRenameSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `begin-user-action`
     */
    interface BeginUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `capture-modifier`
     */
    interface CaptureModifierSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `change-case`
     */
    interface ChangeCaseSignalCallback {
        (object: GtkSource.ChangeCaseType): void
    }

    /**
     * Signal callback interface for `change-number`
     */
    interface ChangeNumberSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `clear-count`
     */
    interface ClearCountSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-modifier`
     */
    interface ClearModifierSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-selection`
     */
    interface ClearSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `clear-snippets`
     */
    interface ClearSnippetsSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    interface CopyClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cut-clipboard`
     */
    interface CutClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `cycle-completion`
     */
    interface CycleCompletionSignalCallback {
        (object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `decrease-font-size`
     */
    interface DecreaseFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `delete-from-cursor`
     */
    interface DeleteFromCursorSignalCallback {
        (object: Gtk.DeleteType, p0: number): void
    }

    /**
     * Signal callback interface for `delete-selection`
     */
    interface DeleteSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `duplicate-entire-line`
     */
    interface DuplicateEntireLineSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `end-macro`
     */
    interface EndMacroSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `end-user-action`
     */
    interface EndUserActionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `find-references`
     */
    interface FindReferencesSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `format-selection`
     */
    interface FormatSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `goto-definition`
     */
    interface GotoDefinitionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `hide-completion`
     */
    interface HideCompletionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `increase-font-size`
     */
    interface IncreaseFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `indent-selection`
     */
    interface IndentSelectionSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `insert-at-cursor`
     */
    interface InsertAtCursorSignalCallback {
        (object: string | null): void
    }

    /**
     * Signal callback interface for `insert-modifier`
     */
    interface InsertModifierSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `join-lines`
     */
    interface JoinLinesSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    interface MoveCursorSignalCallback {
        (object: Gtk.MovementStep, p0: number, p1: boolean): void
    }

    /**
     * Signal callback interface for `move-error`
     */
    interface MoveErrorSignalCallback {
        (object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `move-lines`
     */
    interface MoveLinesSignalCallback {
        (object: boolean, p0: number): void
    }

    /**
     * Signal callback interface for `move-search`
     */
    interface MoveSearchSignalCallback {
        (object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number): void
    }

    /**
     * Signal callback interface for `move-to-matching-bracket`
     */
    interface MoveToMatchingBracketSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `move-viewport`
     */
    interface MoveViewportSignalCallback {
        (object: Gtk.ScrollStep, p0: number): void
    }

    /**
     * Signal callback interface for `move-words`
     */
    interface MoveWordsSignalCallback {
        (object: number): void
    }

    /**
     * Signal callback interface for `movement`
     */
    interface MovementSignalCallback {
        (object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard`
     */
    interface PasteClipboardSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `paste-clipboard-extended`
     */
    interface PasteClipboardExtendedSignalCallback {
        (object: boolean, p0: boolean, p1: boolean): void
    }

    /**
     * Signal callback interface for `pop-selection`
     */
    interface PopSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `preedit-changed`
     */
    interface PreeditChangedSignalCallback {
        (object: string | null): void
    }

    /**
     * Signal callback interface for `push-selection`
     */
    interface PushSelectionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `rebuild-highlight`
     */
    interface RebuildHighlightSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `redo`
     */
    interface RedoSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `reindent`
     */
    interface ReindentSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `remove-cursors`
     */
    interface RemoveCursorsSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `replay-macro`
     */
    interface ReplayMacroSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `reset-font-size`
     */
    interface ResetFontSizeSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `restore-insert-mark`
     */
    interface RestoreInsertMarkSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-command`
     */
    interface SaveCommandSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-insert-mark`
     */
    interface SaveInsertMarkSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `save-search-char`
     */
    interface SaveSearchCharSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    interface SelectAllSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `select-inner`
     */
    interface SelectInnerSignalCallback {
        (object: string | null, p0: string | null, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `select-tag`
     */
    interface SelectTagSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `selection-theatric`
     */
    interface SelectionTheatricSignalCallback {
        (object: SourceViewTheatric): void
    }

    /**
     * Signal callback interface for `set-anchor`
     */
    interface SetAnchorSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `set-mode`
     */
    interface SetModeSignalCallback {
        (object: string | null, p0: SourceViewModeType): void
    }

    /**
     * Signal callback interface for `set-overwrite`
     */
    interface SetOverwriteSignalCallback {
        (object: boolean): void
    }

    /**
     * Signal callback interface for `set-search-text`
     */
    interface SetSearchTextSignalCallback {
        (object: string | null, p0: boolean): void
    }

    /**
     * Signal callback interface for `show-completion`
     */
    interface ShowCompletionSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `sort`
     */
    interface SortSignalCallback {
        (object: boolean, p0: boolean): void
    }

    /**
     * Signal callback interface for `swap-selection-bounds`
     */
    interface SwapSelectionBoundsSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-cursor-visible`
     */
    interface ToggleCursorVisibleSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `toggle-overwrite`
     */
    interface ToggleOverwriteSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `undo`
     */
    interface UndoSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Widget.ConstructorProperties {
    }

}

interface SourceViewMode extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.SourceViewMode

    readonly name: any
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.SourceViewMode

    getBlockCursor(): boolean
    getDefaultMode(): string | null
    getDisplayName(): string | null
    getKeepMarkOnChar(): boolean
    getModeType(): SourceViewModeType
    getName(): string | null

    // Overloads of getName

    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    getRepeatInsertWithCount(): boolean
    getSuppressUnbound(): boolean
    setHasIndenter(hasIndenter: boolean): void

    // Conflicting methods

    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void

    // Own signals of Ide-1.0.Ide.SourceViewMode

    connect(sigName: "action", callback: SourceViewMode.ActionSignalCallback): number
    on(sigName: "action", callback: SourceViewMode.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "action", callback: SourceViewMode.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "action", callback: SourceViewMode.ActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "action", p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback): number
    on(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "add-cursor", ...args: any[]): void
    connect(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback): number
    on(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback): NodeJS.EventEmitter
    emit(sigName: "append-to-count", ...args: any[]): void
    connect(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback): number
    on(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback): NodeJS.EventEmitter
    emit(sigName: "backspace", ...args: any[]): void
    connect(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback): number
    on(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-macro", ...args: any[]): void
    connect(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback): number
    on(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-rename", ...args: any[]): void
    connect(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback): number
    on(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "begin-user-action", ...args: any[]): void
    connect(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback): number
    on(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "capture-modifier", ...args: any[]): void
    connect(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback): number
    on(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback): NodeJS.EventEmitter
    emit(sigName: "change-case", ...args: any[]): void
    connect(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback): number
    on(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback): NodeJS.EventEmitter
    emit(sigName: "change-number", ...args: any[]): void
    connect(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback): number
    on(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-count", ...args: any[]): void
    connect(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback): number
    on(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-modifier", ...args: any[]): void
    connect(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback): number
    on(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback): number
    on(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-selection", ...args: any[]): void
    connect(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback): number
    on(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "clear-snippets", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback): number
    on(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback): NodeJS.EventEmitter
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback): number
    on(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback): NodeJS.EventEmitter
    emit(sigName: "cut-clipboard", ...args: any[]): void
    connect(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback): number
    on(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "cycle-completion", ...args: any[]): void
    connect(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback): number
    on(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "decrease-font-size", ...args: any[]): void
    connect(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback): number
    on(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "delete-from-cursor", p0: number, ...args: any[]): void
    connect(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback): number
    on(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "delete-selection", ...args: any[]): void
    connect(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback): number
    on(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback): NodeJS.EventEmitter
    emit(sigName: "duplicate-entire-line", ...args: any[]): void
    connect(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback): number
    on(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "end-macro", ...args: any[]): void
    connect(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback): number
    on(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "end-user-action", ...args: any[]): void
    connect(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback): number
    on(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "find-references", ...args: any[]): void
    connect(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback): number
    on(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "format-selection", ...args: any[]): void
    connect(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback): number
    on(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "goto-definition", ...args: any[]): void
    connect(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback): number
    on(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "hide-completion", ...args: any[]): void
    connect(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback): number
    on(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "increase-font-size", ...args: any[]): void
    connect(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback): number
    on(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "indent-selection", ...args: any[]): void
    connect(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback): number
    on(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "insert-at-cursor", ...args: any[]): void
    connect(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback): number
    on(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback): NodeJS.EventEmitter
    emit(sigName: "insert-modifier", ...args: any[]): void
    connect(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback): number
    on(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "join-lines", ...args: any[]): void
    connect(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback): number
    on(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-cursor", p0: number, p1: boolean, ...args: any[]): void
    connect(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback): number
    on(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-error", ...args: any[]): void
    connect(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback): number
    on(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-lines", p0: number, ...args: any[]): void
    connect(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback): number
    on(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-search", p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number, ...args: any[]): void
    connect(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback): number
    on(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-to-matching-bracket", ...args: any[]): void
    connect(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback): number
    on(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-viewport", p0: number, ...args: any[]): void
    connect(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback): number
    on(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "move-words", ...args: any[]): void
    connect(sigName: "movement", callback: SourceViewMode.MovementSignalCallback): number
    on(sigName: "movement", callback: SourceViewMode.MovementSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "movement", callback: SourceViewMode.MovementSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "movement", callback: SourceViewMode.MovementSignalCallback): NodeJS.EventEmitter
    emit(sigName: "movement", p0: boolean, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback): number
    on(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback): NodeJS.EventEmitter
    emit(sigName: "paste-clipboard", ...args: any[]): void
    connect(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback): number
    on(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "paste-clipboard-extended", p0: boolean, p1: boolean, ...args: any[]): void
    connect(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback): number
    on(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "pop-selection", ...args: any[]): void
    connect(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback): number
    on(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "preedit-changed", ...args: any[]): void
    connect(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback): number
    on(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "push-selection", ...args: any[]): void
    connect(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback): number
    on(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback): NodeJS.EventEmitter
    emit(sigName: "rebuild-highlight", ...args: any[]): void
    connect(sigName: "redo", callback: SourceViewMode.RedoSignalCallback): number
    on(sigName: "redo", callback: SourceViewMode.RedoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "redo", callback: SourceViewMode.RedoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "redo", callback: SourceViewMode.RedoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "redo", ...args: any[]): void
    connect(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback): number
    on(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback): NodeJS.EventEmitter
    emit(sigName: "reindent", ...args: any[]): void
    connect(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback): number
    on(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "remove-cursors", ...args: any[]): void
    connect(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback): number
    on(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback): NodeJS.EventEmitter
    emit(sigName: "replay-macro", ...args: any[]): void
    connect(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback): number
    on(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "request-documentation", ...args: any[]): void
    connect(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback): number
    on(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "reset-font-size", ...args: any[]): void
    connect(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback): number
    on(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback): NodeJS.EventEmitter
    emit(sigName: "restore-insert-mark", ...args: any[]): void
    connect(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback): number
    on(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-command", ...args: any[]): void
    connect(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback): number
    on(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-insert-mark", ...args: any[]): void
    connect(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback): number
    on(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback): NodeJS.EventEmitter
    emit(sigName: "save-search-char", ...args: any[]): void
    connect(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback): number
    on(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback): NodeJS.EventEmitter
    emit(sigName: "select-all", ...args: any[]): void
    connect(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback): number
    on(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback): NodeJS.EventEmitter
    emit(sigName: "select-inner", p0: string | null, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback): number
    on(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback): NodeJS.EventEmitter
    emit(sigName: "select-tag", ...args: any[]): void
    connect(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback): number
    on(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback): NodeJS.EventEmitter
    emit(sigName: "selection-theatric", ...args: any[]): void
    connect(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback): number
    on(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-anchor", ...args: any[]): void
    connect(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback): number
    on(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-mode", p0: SourceViewModeType, ...args: any[]): void
    connect(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback): number
    on(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-overwrite", ...args: any[]): void
    connect(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback): number
    on(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-search-text", p0: boolean, ...args: any[]): void
    connect(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback): number
    on(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "show-completion", ...args: any[]): void
    connect(sigName: "sort", callback: SourceViewMode.SortSignalCallback): number
    on(sigName: "sort", callback: SourceViewMode.SortSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "sort", callback: SourceViewMode.SortSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "sort", callback: SourceViewMode.SortSignalCallback): NodeJS.EventEmitter
    emit(sigName: "sort", p0: boolean, ...args: any[]): void
    connect(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback): number
    on(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "swap-selection-bounds", ...args: any[]): void
    connect(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback): number
    on(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback): NodeJS.EventEmitter
    emit(sigName: "toggle-cursor-visible", ...args: any[]): void
    connect(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback): number
    on(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback): NodeJS.EventEmitter
    emit(sigName: "toggle-overwrite", ...args: any[]): void
    connect(sigName: "undo", callback: SourceViewMode.UndoSignalCallback): number
    on(sigName: "undo", callback: SourceViewMode.UndoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "undo", callback: SourceViewMode.UndoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "undo", callback: SourceViewMode.UndoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "undo", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceViewMode

    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SourceViewMode extends Gtk.Widget {

    // Own properties of Ide-1.0.Ide.SourceViewMode

    static name: string

    // Constructors of Ide-1.0.Ide.SourceViewMode

    constructor(config?: SourceViewMode.ConstructorProperties) 
    _init(config?: SourceViewMode.ConstructorProperties): void
}

module SubprocessLauncher {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SubprocessLauncher

        cleanEnv?: boolean | null
        cwd?: string | null
        environ?: string[] | null
        flags?: Gio.SubprocessFlags | null
        runOnHost?: boolean | null
    }

}

interface SubprocessLauncher {

    // Own properties of Ide-1.0.Ide.SubprocessLauncher

    cleanEnv: boolean
    cwd: string | null
    environ: string[]
    flags: Gio.SubprocessFlags
    runOnHost: boolean
    __gtype__: number

    // Own fields of Ide-1.0.Ide.SubprocessLauncher

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.SubprocessLauncher

    getArgv(): string[]
    getClearEnv(): boolean
    getCwd(): string | null
    getEnviron(): string[]
    getFlags(): Gio.SubprocessFlags
    /**
     * Gets if the process should be executed on the host system. This might be
     * useful for situations where running in a contained environment is not
     * sufficient to perform the given task.
     * 
     * Currently, only flatpak is supported for breaking out of the containment
     * zone and requires the application was built with --allow=devel.
     * @returns %TRUE if the process should be executed outside the containment zone.
     */
    getRunOnHost(): boolean
    getenv(key: string | null): string | null
    insertArgv(index: number, arg: string | null): void
    overlayEnvironment(environment: Environment): void
    popArgv(): string | null
    /**
     * This function is semantically identical to calling ide_subprocess_launcher_push_argv()
     * for each element of `args`.
     * 
     * If `args` is %NULL, this function does nothing.
     * @param args the arguments
     */
    pushArgs(args: string[] | null): void
    pushArgv(argv: string | null): void
    replaceArgv(index: number, arg: string | null): void
    setClearEnv(clearEnv: boolean): void
    setCwd(cwd: string | null): void
    setEnviron(environ: string | null): void
    setFlags(flags: Gio.SubprocessFlags): void
    /**
     * Sets the #IdeSubprocessLauncher:run-on-host property. See
     * ide_subprocess_launcher_get_run_on_host() for more information.
     * @param runOnHost 
     */
    setRunOnHost(runOnHost: boolean): void
    setStdoutFilePath(stdoutFilePath: string | null): void
    setenv(key: string | null, value: string | null, replace: boolean): void
    // Has conflict: spawn(cancellable: Gio.Cancellable | null): Subprocess
    takeFd(sourceFd: number, destFd: number): void
    takeStderrFd(stderrFd: number): void
    takeStdinFd(stdinFd: number): void
    takeStdoutFd(stdoutFd: number): void

    // Own virtual methods of Ide-1.0.Ide.SubprocessLauncher

    /**
     * Synchronously spawn a process using the internal state.
     * @virtual 
     * @param cancellable 
     * @returns A #IdeSubprocess or %NULL upon error.
     */
    spawn(cancellable: Gio.Cancellable | null): Subprocess

    // Class property signals of Ide-1.0.Ide.SubprocessLauncher

    connect(sigName: "notify::clean-env", callback: (...args: any[]) => void): number
    on(sigName: "notify::clean-env", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::clean-env", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::clean-env", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::clean-env", ...args: any[]): void
    connect(sigName: "notify::cwd", callback: (...args: any[]) => void): number
    on(sigName: "notify::cwd", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cwd", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cwd", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cwd", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (...args: any[]) => void): number
    on(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::environ", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::environ", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::flags", callback: (...args: any[]) => void): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::run-on-host", callback: (...args: any[]) => void): number
    on(sigName: "notify::run-on-host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::run-on-host", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::run-on-host", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::run-on-host", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SubprocessLauncher extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SubprocessLauncher

    static name: string

    // Constructors of Ide-1.0.Ide.SubprocessLauncher

    constructor(config?: SubprocessLauncher.ConstructorProperties) 
    constructor(flags: Gio.SubprocessFlags) 
    static new(flags: Gio.SubprocessFlags): SubprocessLauncher
    _init(config?: SubprocessLauncher.ConstructorProperties): void
}

module SubprocessSupervisor {

    // Signal callback interfaces

    /**
     * Signal callback interface for `spawned`
     */
    interface SpawnedSignalCallback {
        (object: Subprocess): void
    }

    /**
     * Signal callback interface for `supervise`
     */
    interface SuperviseSignalCallback {
        (object: SubprocessLauncher): boolean
    }

    /**
     * Signal callback interface for `unsupervise`
     */
    interface UnsuperviseSignalCallback {
        (object: SubprocessLauncher): boolean
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SubprocessSupervisor {

    // Own properties of Ide-1.0.Ide.SubprocessSupervisor

    __gtype__: number

    // Own fields of Ide-1.0.Ide.SubprocessSupervisor

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.SubprocessSupervisor

    getLauncher(): SubprocessLauncher | null
    /**
     * Gets the current #IdeSubprocess that is being supervised. This might be
     * %NULL if the ide_subprocess_supervisor_start() has not yet been
     * called or if there was a failure to spawn the process.
     * @returns An #IdeSubprocess or %NULL.
     */
    getSubprocess(): Subprocess | null
    setLauncher(launcher: SubprocessLauncher): void
    setSubprocess(subprocess: Subprocess): void
    start(): void
    stop(): void

    // Own virtual methods of Ide-1.0.Ide.SubprocessSupervisor

    spawned(subprocess: Subprocess): void

    // Own signals of Ide-1.0.Ide.SubprocessSupervisor

    connect(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback): number
    on(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "spawned", ...args: any[]): void
    connect(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback): number
    on(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback): NodeJS.EventEmitter
    emit(sigName: "supervise", ...args: any[]): void
    connect(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback): number
    on(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback): NodeJS.EventEmitter
    emit(sigName: "unsupervise", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SubprocessSupervisor

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SubprocessSupervisor extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SubprocessSupervisor

    static name: string

    // Constructors of Ide-1.0.Ide.SubprocessSupervisor

    constructor(config?: SubprocessSupervisor.ConstructorProperties) 
    constructor() 
    static new(): SubprocessSupervisor
    _init(config?: SubprocessSupervisor.ConstructorProperties): void
}

module SymbolNode {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SymbolNode

        flags?: SymbolFlags | null
        kind?: SymbolKind | null
        name?: string | null
        useMarkup?: boolean | null
    }

}

interface SymbolNode {

    // Own properties of Ide-1.0.Ide.SymbolNode

    flags: SymbolFlags
    kind: SymbolKind
    name: string | null
    useMarkup: boolean
    __gtype__: number

    // Own fields of Ide-1.0.Ide.SymbolNode

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.SymbolNode

    getFlags(): SymbolFlags
    getKind(): SymbolKind
    // Has conflict: getLocationAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: getLocationFinish(result: Gio.AsyncResult): SourceLocation | null
    getName(): string | null
    getUseMarkup(): boolean

    // Own virtual methods of Ide-1.0.Ide.SymbolNode

    getLocationAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Completes the request to gets the location for the symbol node.
     * @virtual 
     * @param result 
     * @returns An #IdeSourceLocation or %NULL.
     */
    getLocationFinish(result: Gio.AsyncResult): SourceLocation | null

    // Class property signals of Ide-1.0.Ide.SymbolNode

    connect(sigName: "notify::flags", callback: (...args: any[]) => void): number
    on(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::flags", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::flags", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::kind", callback: (...args: any[]) => void): number
    on(sigName: "notify::kind", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::kind", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::kind", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::kind", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SymbolNode extends Object {

    // Own properties of Ide-1.0.Ide.SymbolNode

    static name: string

    // Constructors of Ide-1.0.Ide.SymbolNode

    constructor(config?: SymbolNode.ConstructorProperties) 
    _init(config?: SymbolNode.ConstructorProperties): void
}

module TemplateBase {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TemplateBase

        /**
         * The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
         * that should be used to resolve template includes. If %NULL, templates
         * will not be allowed to include other templates.
         * directive.
         */
        locator?: Template.TemplateLocator | null
    }

}

interface TemplateBase {

    // Own properties of Ide-1.0.Ide.TemplateBase

    /**
     * The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
     * that should be used to resolve template includes. If %NULL, templates
     * will not be allowed to include other templates.
     * directive.
     */
    locator: Template.TemplateLocator
    __gtype__: number

    // Own fields of Ide-1.0.Ide.TemplateBase

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.TemplateBase

    addPath(path: string | null, destination: Gio.File, scope: Template.Scope, mode: number): void
    addResource(resourcePath: string | null, destination: Gio.File, scope: Template.Scope, mode: number): void
    expandAllAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    expandAllFinish(result: Gio.AsyncResult): boolean
    /**
     * Fetches the #TmplTemplateLocator used for resolving templates.
     * @returns A #TmplTemplateLocator or %NULL.
     */
    getLocator(): Template.TemplateLocator | null
    reset(): void
    setLocator(locator: Template.TemplateLocator): void

    // Class property signals of Ide-1.0.Ide.TemplateBase

    connect(sigName: "notify::locator", callback: (...args: any[]) => void): number
    on(sigName: "notify::locator", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::locator", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::locator", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::locator", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TemplateBase extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TemplateBase

    static name: string

    // Constructors of Ide-1.0.Ide.TemplateBase

    constructor(config?: TemplateBase.ConstructorProperties) 
    _init(config?: TemplateBase.ConstructorProperties): void
}

module Transfer {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Transfer

        iconName?: string | null
        progress?: number | null
        status?: string | null
        title?: string | null
    }

}

interface Transfer {

    // Own properties of Ide-1.0.Ide.Transfer

    readonly active: boolean
    readonly completed: boolean
    iconName: string | null
    progress: number
    status: string | null
    title: string | null
    __gtype__: number

    // Own fields of Ide-1.0.Ide.Transfer

    parentInstance: GObject.Object

    // Owm methods of Ide-1.0.Ide.Transfer

    cancel(): void
    // Has conflict: executeAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: executeFinish(result: Gio.AsyncResult): boolean
    getActive(): boolean
    getCompleted(): boolean
    getIconName(): string | null
    getProgress(): number
    getStatus(): string | null
    getTitle(): string | null
    setIconName(iconName: string | null): void
    setProgress(progress: number): void
    setStatus(status: string | null): void
    setTitle(title: string | null): void

    // Own virtual methods of Ide-1.0.Ide.Transfer

    executeAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    executeFinish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.Transfer

    connect(sigName: "notify::active", callback: (...args: any[]) => void): number
    on(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (...args: any[]) => void): number
    on(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::completed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::completed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::status", callback: (...args: any[]) => void): number
    on(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::status", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::status", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Transfer extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Transfer

    static name: string

    // Constructors of Ide-1.0.Ide.Transfer

    constructor(config?: Transfer.ConstructorProperties) 
    _init(config?: Transfer.ConstructorProperties): void
    static errorQuark(): GLib.Quark
}

module TransferButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Actionable.ConstructorProperties, Gtk.Activatable.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.ProgressButton.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransferButton

        transfer?: Transfer | null
    }

}

interface TransferButton extends Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransferButton

    readonly transfer: Transfer
    __gtype__: number

    // Own fields of Ide-1.0.Ide.TransferButton

    parentInstance: any

    // Conflicting methods

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void

    // Class property signals of Ide-1.0.Ide.TransferButton

    connect(sigName: "notify::transfer", callback: (...args: any[]) => void): number
    on(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transfer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::show-progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-progress", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: (...args: any[]) => void): number
    on(sigName: "notify::always-show-image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::always-show-image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::always-show-image", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::image", callback: (...args: any[]) => void): number
    on(sigName: "notify::image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::image-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: (...args: any[]) => void): number
    on(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::relief", callback: (...args: any[]) => void): number
    on(sigName: "notify::relief", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::relief", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::relief", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::relief", ...args: any[]): void
    connect(sigName: "notify::use-stock", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-stock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-stock", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-underline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-underline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (...args: any[]) => void): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: (...args: any[]) => void): number
    on(sigName: "notify::yalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::yalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::action-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::action-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action-name", ...args: any[]): void
    connect(sigName: "notify::action-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::action-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action-target", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: (...args: any[]) => void): number
    on(sigName: "notify::related-action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::related-action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::related-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TransferButton extends Dazzle.ProgressButton {

    // Own properties of Ide-1.0.Ide.TransferButton

    static name: string

    // Constructors of Ide-1.0.Ide.TransferButton

    constructor(config?: TransferButton.ConstructorProperties) 
    constructor(transfer: Transfer) 
    static new(transfer: Transfer): TransferButton

    // Overloads of new

    static new(): Dazzle.ProgressButton
    _init(config?: TransferButton.ConstructorProperties): void
}

module TransferManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `all-transfers-completed`
     */
    interface AllTransfersCompletedSignalCallback {
        (): void
    }

    /**
     * Signal callback interface for `transfer-completed`
     */
    interface TransferCompletedSignalCallback {
        (transfer: Transfer): void
    }

    /**
     * Signal callback interface for `transfer-failed`
     */
    interface TransferFailedSignalCallback {
        (transfer: Transfer, reason: GLib.Error): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface TransferManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.TransferManager

    /**
     * If there are transfers active, this will be set.
     */
    readonly hasActive: boolean
    /**
     * A double between and including 0.0 and 1.0 describing the progress of
     * all tasks.
     */
    readonly progress: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.TransferManager

    cancelAll(): void
    /**
     * Removes all transfers from the manager that are completed.
     */
    clear(): void
    /**
     * This is a convenience function that will queue `transfer` into the transfer
     * manager and execute callback upon completion of the transfer. The success
     * or failure #GError will be propagated to the caller via
     * ide_transfer_manager_execute_finish().
     * @param transfer 
     * @param cancellable A #GCancellable
     * @param callback A callback or %NULL
     */
    executeAsync(transfer: Transfer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    executeFinish(result: Gio.AsyncResult): boolean
    /**
     * Gets if there are active transfers.
     * @returns %TRUE if there are active transfers.
     */
    getHasActive(): boolean
    getProgress(): number

    // Own signals of Ide-1.0.Ide.TransferManager

    connect(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback): number
    on(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "all-transfers-completed", ...args: any[]): void
    connect(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback): number
    on(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "transfer-completed", ...args: any[]): void
    connect(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback): number
    on(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "transfer-failed", reason: GLib.Error, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.TransferManager

    connect(sigName: "notify::has-active", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-active", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TransferManager extends Object {

    // Own properties of Ide-1.0.Ide.TransferManager

    static name: string

    // Constructors of Ide-1.0.Ide.TransferManager

    constructor(config?: TransferManager.ConstructorProperties) 
    _init(config?: TransferManager.ConstructorProperties): void
}

module TransferRow {

    // Signal callback interfaces

    /**
     * Signal callback interface for `cancelled`
     */
    interface CancelledSignalCallback {
        (): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ListBoxRow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransferRow

        transfer?: Transfer | null
    }

}

interface TransferRow extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransferRow

    transfer: Transfer
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.TransferRow

    getTransfer(): Transfer | null
    setTransfer(transfer: Transfer): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.TransferRow

    connect(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback): number
    on(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback): NodeJS.EventEmitter
    emit(sigName: "cancelled", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.TransferRow

    connect(sigName: "notify::transfer", callback: (...args: any[]) => void): number
    on(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transfer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transfer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::activatable", callback: (...args: any[]) => void): number
    on(sigName: "notify::activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::activatable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::activatable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::activatable", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: (...args: any[]) => void): number
    on(sigName: "notify::selectable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selectable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selectable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TransferRow extends Gtk.ListBoxRow {

    // Own properties of Ide-1.0.Ide.TransferRow

    static name: string

    // Constructors of Ide-1.0.Ide.TransferRow

    constructor(config?: TransferRow.ConstructorProperties) 
    _init(config?: TransferRow.ConstructorProperties): void
}

module TransfersButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Actionable.ConstructorProperties, Gtk.Activatable.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.MenuButton.ConstructorProperties {
    }

}

interface TransfersButton extends Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransfersButton

    __gtype__: number

    // Conflicting properties

    parent: Gtk.ToggleButton & Gtk.Container & Gtk.Container

    // Conflicting methods

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    activate(): void

    // Overloads of activate

    /**
     * For widgets that can be “activated” (buttons, menu items, etc.)
     * this function activates them. Activation is what happens when you
     * press Enter on a widget during key navigation. If `widget` isn't
     * activatable, the function returns %FALSE.
     * @returns %TRUE if the widget was activatable
     */
    activate(): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Returns the direction the popup will be pointing at when popped up.
     * @returns a #GtkArrowType value
     */
    getDirection(): Gtk.ArrowType

    // Overloads of getDirection

    /**
     * Gets the reading direction for a particular widget. See
     * gtk_widget_set_direction().
     * @returns the reading direction for the widget.
     */
    getDirection(): Gtk.TextDirection
    /**
     * Gets the reading direction for a particular widget. See
     * gtk_widget_set_direction().
     * @returns the reading direction for the widget.
     */
    getDirection(): Gtk.TextDirection
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the direction in which the popup will be popped up, as
     * well as changing the arrow’s direction. The child will not
     * be changed to an arrow if it was customized.
     * 
     * If the does not fit in the available space in the given direction,
     * GTK+ will its best to keep it inside the screen and fully visible.
     * 
     * If you pass %GTK_ARROW_NONE for a `direction,` the popup will behave
     * as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).
     * @param direction a #GtkArrowType
     */
    setDirection(direction: Gtk.ArrowType): void

    // Overloads of setDirection

    /**
     * Sets the reading direction on a particular widget. This direction
     * controls the primary direction for widgets containing text,
     * and also the direction in which the children of a container are
     * packed. The ability to set the direction is present in order
     * so that correct localization into languages with right-to-left
     * reading directions can be done. Generally, applications will
     * let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by gtk_widget_set_default_direction() will be used.
     * @param dir the new direction
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Sets the reading direction on a particular widget. This direction
     * controls the primary direction for widgets containing text,
     * and also the direction in which the children of a container are
     * packed. The ability to set the direction is present in order
     * so that correct localization into languages with right-to-left
     * reading directions can be done. Generally, applications will
     * let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by gtk_widget_set_default_direction() will be used.
     * @param dir the new direction
     */
    setDirection(dir: Gtk.TextDirection): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void

    // Class property signals of Ide-1.0.Ide.TransfersButton

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::align-widget", callback: (...args: any[]) => void): number
    on(sigName: "notify::align-widget", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::align-widget", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::align-widget", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::align-widget", ...args: any[]): void
    connect(sigName: "notify::direction", callback: (...args: any[]) => void): number
    on(sigName: "notify::direction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::direction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::direction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::direction", ...args: any[]): void
    connect(sigName: "notify::menu-model", callback: (...args: any[]) => void): number
    on(sigName: "notify::menu-model", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::menu-model", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::menu-model", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::menu-model", ...args: any[]): void
    connect(sigName: "notify::popover", callback: (...args: any[]) => void): number
    on(sigName: "notify::popover", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::popover", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::popover", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::popover", ...args: any[]): void
    connect(sigName: "notify::popup", callback: (...args: any[]) => void): number
    on(sigName: "notify::popup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::popup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::popup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::popup", ...args: any[]): void
    connect(sigName: "notify::use-popover", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-popover", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-popover", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-popover", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-popover", ...args: any[]): void
    connect(sigName: "notify::active", callback: (...args: any[]) => void): number
    on(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::draw-indicator", callback: (...args: any[]) => void): number
    on(sigName: "notify::draw-indicator", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::draw-indicator", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::draw-indicator", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::draw-indicator", ...args: any[]): void
    connect(sigName: "notify::inconsistent", callback: (...args: any[]) => void): number
    on(sigName: "notify::inconsistent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::inconsistent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::inconsistent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::inconsistent", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: (...args: any[]) => void): number
    on(sigName: "notify::always-show-image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::always-show-image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::always-show-image", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::image", callback: (...args: any[]) => void): number
    on(sigName: "notify::image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::image-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::image-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::image-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: (...args: any[]) => void): number
    on(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::label", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::label", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::relief", callback: (...args: any[]) => void): number
    on(sigName: "notify::relief", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::relief", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::relief", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::relief", ...args: any[]): void
    connect(sigName: "notify::use-stock", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-stock", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-stock", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-stock", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-underline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-underline", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-underline", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (...args: any[]) => void): number
    on(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::xalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::xalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: (...args: any[]) => void): number
    on(sigName: "notify::yalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::yalign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::yalign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::action-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::action-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action-name", ...args: any[]): void
    connect(sigName: "notify::action-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::action-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::action-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::action-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::action-target", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: (...args: any[]) => void): number
    on(sigName: "notify::related-action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::related-action", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::related-action", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-action-appearance", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TransfersButton extends Gtk.MenuButton {

    // Own properties of Ide-1.0.Ide.TransfersButton

    static name: string

    // Constructors of Ide-1.0.Ide.TransfersButton

    constructor(config?: TransfersButton.ConstructorProperties) 
    constructor() 
    static new(): TransfersButton
    _init(config?: TransfersButton.ConstructorProperties): void
}

module TransfersProgressIcon {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.DrawingArea.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransfersProgressIcon

        progress?: number | null
    }

}

interface TransfersProgressIcon extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransfersProgressIcon

    progress: number
    __gtype__: number

    // Owm methods of Ide-1.0.Ide.TransfersProgressIcon

    getProgress(): number
    setProgress(progress: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void

    // Class property signals of Ide-1.0.Ide.TransfersProgressIcon

    connect(sigName: "notify::progress", callback: (...args: any[]) => void): number
    on(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::progress", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::progress", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TransfersProgressIcon extends Gtk.DrawingArea {

    // Own properties of Ide-1.0.Ide.TransfersProgressIcon

    static name: string

    // Constructors of Ide-1.0.Ide.TransfersProgressIcon

    constructor(config?: TransfersProgressIcon.ConstructorProperties) 
    constructor() 
    static new(): TransfersProgressIcon
    _init(config?: TransfersProgressIcon.ConstructorProperties): void
}

module UnsavedFiles {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface UnsavedFiles {

    // Own properties of Ide-1.0.Ide.UnsavedFiles

    __gtype__: number

    // Own fields of Ide-1.0.Ide.UnsavedFiles

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.UnsavedFiles

    clear(): void
    contains(file: Gio.File): boolean
    getSequence(): number
    /**
     * Retrieves the unsaved file content for a particular file. If no unsaved
     * file content is registered, %NULL is returned.
     * @param file 
     * @returns An #IdeUnsavedFile or %NULL.
     */
    getUnsavedFile(file: Gio.File): UnsavedFile | null
    remove(file: Gio.File): void
    restoreAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    restoreFinish(result: Gio.AsyncResult): boolean
    saveAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    saveFinish(result: Gio.AsyncResult): boolean
    /**
     * This retrieves all of the unsaved file buffers known to the context.
     * These are handy if you need to pass modified state to parsers such as
     * clang.
     * 
     * Call g_ptr_array_unref() on the resulting #GPtrArray when no longer in use.
     * 
     * If you would like to hold onto an unsaved file instance, call
     * ide_unsaved_file_ref() to increment its reference count.
     * @returns A #GPtrArray   containing #IdeUnsavedFile elements.
     */
    toArray(): UnsavedFile[]
    update(file: Gio.File, content: any): void

    // Class property signals of Ide-1.0.Ide.UnsavedFiles

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class UnsavedFiles extends Object {

    // Own properties of Ide-1.0.Ide.UnsavedFiles

    static name: string

    // Constructors of Ide-1.0.Ide.UnsavedFiles

    constructor(config?: UnsavedFiles.ConstructorProperties) 
    _init(config?: UnsavedFiles.ConstructorProperties): void
}

module Workbench {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        (object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `set-perspective`
     */
    interface SetPerspectiveSignalCallback {
        (name: string | null): void
    }

    /**
     * Signal callback interface for `unload`
     */
    interface UnloadSignalCallback {
        (object: Context): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gio.ActionGroup.ConstructorProperties, Gio.ActionMap.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ApplicationWindow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Workbench

        /**
         * This property is used internally by Builder to avoid creating the
         * greeter when opening a new workspace that is only for loading a
         * project.
         * 
         * This should not be used by application plugins.
         */
        disableGreeter?: boolean | null
        /**
         * This property contains the #IdePerspective that is currently selected.
         * Connect to the "notify::visible-perspective" signal to be notified when
         * the perspective has been changed.
         */
        visiblePerspective?: Perspective | null
        /**
         * This property is just like #IdeWorkbench:visible-perspective except that
         * it contains the name of the perspective as a string.
         */
        visiblePerspectiveName?: string | null
    }

}

interface Workbench extends Atk.ImplementorIface, Gio.ActionGroup, Gio.ActionMap, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.Workbench

    /**
     * The #IdeWorkbench:context property contains the #IdeContext for the loaded
     * project. Loading a project consists of creating an #IdeContext, so there
     * is a 1:1 mapping between "loaded project" and an #IdeContext.
     * 
     * The #IdeContext contains many of the important components of a project.
     * For example, it contains the #IdeVcs representing the active version
     * control system and an #IdeBuildSystem representing the current build
     * system.
     * 
     * The creation of #IdeWorkbenchAddin addins are deferred until this property
     * has been set.
     */
    readonly context: Context
    /**
     * This property is used internally by Builder to avoid creating the
     * greeter when opening a new workspace that is only for loading a
     * project.
     * 
     * This should not be used by application plugins.
     */
    readonly disableGreeter: boolean
    /**
     * This property contains the #IdePerspective that is currently selected.
     * Connect to the "notify::visible-perspective" signal to be notified when
     * the perspective has been changed.
     */
    visiblePerspective: Perspective
    /**
     * This property is just like #IdeWorkbench:visible-perspective except that
     * it contains the name of the perspective as a string.
     */
    visiblePerspectiveName: string | null
    __gtype__: number

    // Conflicting properties

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.Workbench

    addPerspective(perspective: Perspective): void
    close(): void
    focus(widget: Gtk.Widget): void

    // Overloads of focus

    focus(direction: Gtk.DirectionType): boolean
    /**
     * Gets the context associated with the workbench, or %NULL.
     * @returns An #IdeContext or %NULL.
     */
    getContext(): Context | null
    getFullscreen(): boolean
    /**
     * Helper that is equivalent to calling gtk_window_get_titlebar() and casting
     * to an #IdeWorkbenchHeaderBar. This is convenience for plugins.
     * @returns An #IdeWorkbenchHeaderBar.
     */
    getHeaderbar(): WorkbenchHeaderBar
    /**
     * Gets the perspective by its registered name as defined in
     * ide_perspective_get_id().
     * @param name 
     * @returns An #IdePerspective or %NULL.
     */
    getPerspectiveByName(name: string | null): Perspective | null
    /**
     * Gets the current perspective.
     * @returns An #IdePerspective.
     */
    getVisiblePerspective(): Perspective
    getVisiblePerspectiveName(): string | null
    /**
     * Starts the process of loading the buffers for the given `files,` possibly
     * creating an #IdeEditorView for each depending on `flags`.
     * @param files An array of #GFile objects to be opened.
     * @param nFiles The number of files given.
     * @param hint The id of an #IdeWorkbenchAddin that should be preferred as a loader.
     * @param flags A #IdeWorkbenchOpenFlags (if WORKBENCH_OPEN_FLAGS_BG is set, the buffer is loaded but not made visible in the UI).
     * @param cancellable A #GCancellable.
     * @param callback A #GASyncReadyCallback.
     */
    openFilesAsync(files: Gio.File, nFiles: number, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    openFilesFinish(result: Gio.AsyncResult): boolean
    openProjectAsync(fileOrDirectory: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    openProjectFinish(result: Gio.AsyncResult): boolean
    openUriAsync(uri: Uri, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    openUriFinish(result: Gio.AsyncResult): boolean
    popMessage(messageId: string | null): boolean
    pushMessage(message: WorkbenchMessage): void
    removePerspective(perspective: Perspective): void
    saveAllAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    saveAllFinish(result: Gio.AsyncResult): boolean
    setFullscreen(fullscreen: boolean): void
    setVisiblePerspective(perspective: Perspective): void
    setVisiblePerspectiveName(name: string | null): void
    /**
     * Executes `callback` for every #IdeLayoutView across all perspectives.
     * @param callback The callback to execute
     */
    viewsForeach(callback: Gtk.Callback): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     * @returns %TRUE if the activation is done.
     */
    mnemonicActivate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonicActivate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     * @returns %TRUE if the signal has been handled
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * @virtual 
     * @param groupCycling %TRUE if there are other widgets with the same mnemonic
     * @returns %TRUE if the signal has been handled
     */
    mnemonicActivate(groupCycling: boolean): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Own signals of Ide-1.0.Ide.Workbench

    connect(sigName: "action", callback: Workbench.ActionSignalCallback): number
    on(sigName: "action", callback: Workbench.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "action", callback: Workbench.ActionSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "action", callback: Workbench.ActionSignalCallback): NodeJS.EventEmitter
    emit(sigName: "action", p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback): number
    on(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-perspective", ...args: any[]): void
    connect(sigName: "unload", callback: Workbench.UnloadSignalCallback): number
    on(sigName: "unload", callback: Workbench.UnloadSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "unload", callback: Workbench.UnloadSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "unload", callback: Workbench.UnloadSignalCallback): NodeJS.EventEmitter
    emit(sigName: "unload", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Workbench

    connect(sigName: "notify::context", callback: (...args: any[]) => void): number
    on(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::context", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::context", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::disable-greeter", callback: (...args: any[]) => void): number
    on(sigName: "notify::disable-greeter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::disable-greeter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::disable-greeter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::disable-greeter", ...args: any[]): void
    connect(sigName: "notify::visible-perspective", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible-perspective", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible-perspective", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible-perspective", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible-perspective", ...args: any[]): void
    connect(sigName: "notify::visible-perspective-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible-perspective-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible-perspective-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible-perspective-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible-perspective-name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::show-menubar", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-menubar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-menubar", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-menubar", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-menubar", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::accept-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::accept-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::accept-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::application", callback: (...args: any[]) => void): number
    on(sigName: "notify::application", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::application", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::application", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::application", ...args: any[]): void
    connect(sigName: "notify::attached-to", callback: (...args: any[]) => void): number
    on(sigName: "notify::attached-to", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attached-to", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attached-to", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attached-to", ...args: any[]): void
    connect(sigName: "notify::decorated", callback: (...args: any[]) => void): number
    on(sigName: "notify::decorated", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decorated", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decorated", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decorated", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-height", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-height", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: (...args: any[]) => void): number
    on(sigName: "notify::deletable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::deletable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::deletable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::destroy-with-parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::destroy-with-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::destroy-with-parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::destroy-with-parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::destroy-with-parent", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-map", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-map", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::focus-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-visible", ...args: any[]): void
    connect(sigName: "notify::gravity", callback: (...args: any[]) => void): number
    on(sigName: "notify::gravity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::gravity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::gravity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::gravity", ...args: any[]): void
    connect(sigName: "notify::has-resize-grip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-resize-grip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-resize-grip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-resize-grip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-resize-grip", ...args: any[]): void
    connect(sigName: "notify::has-toplevel-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-toplevel-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-toplevel-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-toplevel-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-toplevel-focus", ...args: any[]): void
    connect(sigName: "notify::hide-titlebar-when-maximized", callback: (...args: any[]) => void): number
    on(sigName: "notify::hide-titlebar-when-maximized", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hide-titlebar-when-maximized", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hide-titlebar-when-maximized", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hide-titlebar-when-maximized", ...args: any[]): void
    connect(sigName: "notify::icon", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::icon-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::icon-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-active", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-active", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-active", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-active", ...args: any[]): void
    connect(sigName: "notify::is-maximized", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-maximized", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-maximized", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-maximized", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-maximized", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::mnemonics-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mnemonics-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mnemonics-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::modal", callback: (...args: any[]) => void): number
    on(sigName: "notify::modal", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::modal", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::modal", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::modal", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: (...args: any[]) => void): number
    on(sigName: "notify::resizable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resizable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resizable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::resize-grip-visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-grip-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-grip-visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-grip-visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-grip-visible", ...args: any[]): void
    connect(sigName: "notify::role", callback: (...args: any[]) => void): number
    on(sigName: "notify::role", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::role", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::role", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::screen", callback: (...args: any[]) => void): number
    on(sigName: "notify::screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::screen", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::screen", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::screen", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: (...args: any[]) => void): number
    on(sigName: "notify::skip-pager-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::skip-pager-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::skip-pager-hint", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: (...args: any[]) => void): number
    on(sigName: "notify::skip-taskbar-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::skip-taskbar-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::skip-taskbar-hint", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::startup-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::startup-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::startup-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: (...args: any[]) => void): number
    on(sigName: "notify::transient-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::transient-for", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::transient-for", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::type", callback: (...args: any[]) => void): number
    on(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::type-hint", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-hint", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-hint", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: (...args: any[]) => void): number
    on(sigName: "notify::urgency-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::urgency-hint", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::urgency-hint", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::window-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Workbench extends Gtk.ApplicationWindow {

    // Own properties of Ide-1.0.Ide.Workbench

    static name: string

    // Constructors of Ide-1.0.Ide.Workbench

    constructor(config?: Workbench.ConstructorProperties) 
    _init(config?: Workbench.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

module WorkbenchHeaderBar {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.HeaderBar.ConstructorProperties {
    }

}

interface WorkbenchHeaderBar extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.WorkbenchHeaderBar

    __gtype__: number

    // Own fields of Ide-1.0.Ide.WorkbenchHeaderBar

    parentInstance: any

    // Owm methods of Ide-1.0.Ide.WorkbenchHeaderBar

    focusSearch(): void
    getOmniBar(): OmniBar
    insertLeft(widget: Gtk.Widget, packType: Gtk.PackType, priority: number): void
    insertRight(widget: Gtk.Widget, packType: Gtk.PackType, priority: number): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.WorkbenchHeaderBar

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::custom-title", callback: (...args: any[]) => void): number
    on(sigName: "notify::custom-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::custom-title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::custom-title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::custom-title", ...args: any[]): void
    connect(sigName: "notify::decoration-layout", callback: (...args: any[]) => void): number
    on(sigName: "notify::decoration-layout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decoration-layout", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decoration-layout", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decoration-layout", ...args: any[]): void
    connect(sigName: "notify::decoration-layout-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::decoration-layout-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decoration-layout-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decoration-layout-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decoration-layout-set", ...args: any[]): void
    connect(sigName: "notify::has-subtitle", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-subtitle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-subtitle", ...args: any[]): void
    connect(sigName: "notify::show-close-button", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-close-button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-close-button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-close-button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-close-button", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (...args: any[]) => void): number
    on(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::subtitle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class WorkbenchHeaderBar extends Gtk.HeaderBar {

    // Own properties of Ide-1.0.Ide.WorkbenchHeaderBar

    static name: string

    // Constructors of Ide-1.0.Ide.WorkbenchHeaderBar

    constructor(config?: WorkbenchHeaderBar.ConstructorProperties) 
    constructor() 
    static new(): WorkbenchHeaderBar
    _init(config?: WorkbenchHeaderBar.ConstructorProperties): void
}

module WorkbenchMessage {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.InfoBar.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.WorkbenchMessage

        id?: string | null
        subtitle?: string | null
        title?: string | null
    }

}

interface WorkbenchMessage extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.WorkbenchMessage

    id: string | null
    subtitle: string | null
    title: string | null
    __gtype__: number

    // Conflicting properties

    parent: Gtk.Box & Gtk.Container & Gtk.Container

    // Owm methods of Ide-1.0.Ide.WorkbenchMessage

    addAction(label: string | null, actionName: string | null): void
    getId(): string | null
    getSubtitle(): string | null
    getTitle(): string | null
    setId(id: string | null): void
    setSubtitle(subtitle: string | null): void
    setTitle(title: string | null): void

    // Conflicting methods

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Retrieves the name of a widget. See gtk_widget_set_name() for the
     * significance of widget names.
     * @returns name of the widget. This string is owned by GTK+ and should not be modified or freed
     */
    getName(): string | null

    // Overloads of getName

    /**
     * Gets the name of the `buildable` object.
     * 
     * #GtkBuilder sets the name based on the
     * [GtkBuilder UI definition][BUILDER-UI]
     * used to construct the `buildable`.
     * @virtual 
     * @returns the name set with gtk_buildable_set_name()
     */
    getName(): string | null
    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Widgets can be named, which allows you to refer to them from a
     * CSS file. You can apply a style to widgets with a particular name
     * in the CSS file. See the documentation for the CSS syntax (on the
     * same page as the docs for #GtkStyleContext).
     * 
     * Note that the CSS syntax has certain special characters to delimit
     * and represent elements in a selector (period, #, >, *...), so using
     * these will make your widget impossible to match by name. Any combination
     * of alphanumeric symbols, dashes and underscores will suffice.
     * @param name name for the widget
     */
    setName(name: string | null): void

    // Overloads of setName

    /**
     * Sets the name of the `buildable` object.
     * @virtual 
     * @param name name to set
     */
    setName(name: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param childProperty the name of a child property installed on     the class of `container`
     */
    childNotify(child: Gtk.Widget, childProperty: string | null): void

    // Overloads of childNotify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @virtual 
     * @param childProperty the name of a child property installed on the                  class of `widget’`s parent
     */
    childNotify(childProperty: GObject.ParamSpec): void

    // Class property signals of Ide-1.0.Ide.WorkbenchMessage

    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (...args: any[]) => void): number
    on(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::subtitle", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::subtitle", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (...args: any[]) => void): number
    on(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::title", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::title", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::message-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::message-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::message-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::message-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::message-type", ...args: any[]): void
    connect(sigName: "notify::revealed", callback: (...args: any[]) => void): number
    on(sigName: "notify::revealed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::revealed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::revealed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::revealed", ...args: any[]): void
    connect(sigName: "notify::show-close-button", callback: (...args: any[]) => void): number
    on(sigName: "notify::show-close-button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::show-close-button", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::show-close-button", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::show-close-button", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (...args: any[]) => void): number
    on(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::baseline-position", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::baseline-position", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (...args: any[]) => void): number
    on(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::homogeneous", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::homogeneous", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (...args: any[]) => void): number
    on(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::spacing", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::spacing", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (...args: any[]) => void): number
    on(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::border-width", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::border-width", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (...args: any[]) => void): number
    on(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::resize-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::resize-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (...args: any[]) => void): number
    on(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::app-paintable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::app-paintable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::can-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::can-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::composite-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::composite-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (...args: any[]) => void): number
    on(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::double-buffered", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::double-buffered", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (...args: any[]) => void): number
    on(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::events", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::events", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (...args: any[]) => void): number
    on(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::expand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::expand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): number
    on(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::focus-on-click", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::focus-on-click", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (...args: any[]) => void): number
    on(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::halign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::halign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): number
    on(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::has-tooltip", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::has-tooltip", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::height-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::height-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::hexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::hexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-focus", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-focus", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-bottom", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-bottom", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-end", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-end", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-left", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-left", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-right", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-right", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-start", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-start", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::margin-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::margin-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (...args: any[]) => void): number
    on(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::no-show-all", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::no-show-all", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (...args: any[]) => void): number
    on(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::opacity", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::opacity", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (...args: any[]) => void): number
    on(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::receives-default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::receives-default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (...args: any[]) => void): number
    on(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::scale-factor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::scale-factor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (...args: any[]) => void): number
    on(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::sensitive", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::sensitive", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (...args: any[]) => void): number
    on(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::style", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::style", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-markup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tooltip-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tooltip-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (...args: any[]) => void): number
    on(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valign", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valign", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::vexpand-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::vexpand-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (...args: any[]) => void): number
    on(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::visible", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::visible", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (...args: any[]) => void): number
    on(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::width-request", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::width-request", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (...args: any[]) => void): number
    on(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::window", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::window", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (...args: any[]) => void): number
    on(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::orientation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::orientation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class WorkbenchMessage extends Gtk.InfoBar {

    // Own properties of Ide-1.0.Ide.WorkbenchMessage

    static name: string

    // Constructors of Ide-1.0.Ide.WorkbenchMessage

    constructor(config?: WorkbenchMessage.ConstructorProperties) 
    constructor() 
    static new(): WorkbenchMessage

    // Overloads of new

    /**
     * Creates a new #GtkInfoBar object.
     * @constructor 
     * @returns a new #GtkInfoBar object
     */
    static new(): Gtk.InfoBar
    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: WorkbenchMessage.ConstructorProperties): void
}

interface ApplicationAddinInterface {

    // Own fields of Ide-1.0.Ide.ApplicationAddinInterface

    parentInterface: GObject.TypeInterface
    load: (self: ApplicationAddin, application: Application) => void
    unload: (self: ApplicationAddin, application: Application) => void
}

abstract class ApplicationAddinInterface {

    // Own properties of Ide-1.0.Ide.ApplicationAddinInterface

    static name: string
}

interface ApplicationClass {

    // Own fields of Ide-1.0.Ide.ApplicationClass

    parentClass: Dazzle.ApplicationClass
}

abstract class ApplicationClass {

    // Own properties of Ide-1.0.Ide.ApplicationClass

    static name: string
}

interface ApplicationToolInterface {

    // Own fields of Ide-1.0.Ide.ApplicationToolInterface

    parentInterface: GObject.TypeInterface
    runAsync: (self: ApplicationTool, arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    runFinish: (self: ApplicationTool, result: Gio.AsyncResult) => number
}

abstract class ApplicationToolInterface {

    // Own properties of Ide-1.0.Ide.ApplicationToolInterface

    static name: string
}

interface BackForwardItemClass {

    // Own fields of Ide-1.0.Ide.BackForwardItemClass

    parentClass: ObjectClass
}

abstract class BackForwardItemClass {

    // Own properties of Ide-1.0.Ide.BackForwardItemClass

    static name: string
}

interface BackForwardListClass {

    // Own fields of Ide-1.0.Ide.BackForwardListClass

    parentClass: ObjectClass
}

abstract class BackForwardListClass {

    // Own properties of Ide-1.0.Ide.BackForwardListClass

    static name: string
}

interface BufferChangeMonitorClass {

    // Own fields of Ide-1.0.Ide.BufferChangeMonitorClass

    parent: ObjectClass
    setBuffer: (self: BufferChangeMonitor, buffer: Buffer) => void
    getChange: (self: BufferChangeMonitor, iter: Gtk.TextIter) => BufferLineChange
    reload: (self: BufferChangeMonitor) => void
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class BufferChangeMonitorClass {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitorClass

    static name: string
}

interface BufferClass {

    // Own fields of Ide-1.0.Ide.BufferClass

    parentClass: GtkSource.BufferClass
    cursorMoved: (self: Buffer, location: Gtk.TextIter) => void
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class BufferClass {

    // Own properties of Ide-1.0.Ide.BufferClass

    static name: string
}

interface BufferManagerClass {

    // Own fields of Ide-1.0.Ide.BufferManagerClass

    parentClass: ObjectClass
}

abstract class BufferManagerClass {

    // Own properties of Ide-1.0.Ide.BufferManagerClass

    static name: string
}

interface BuildCommand {
}

class BuildCommand {

    // Own properties of Ide-1.0.Ide.BuildCommand

    static name: string
}

interface BuildCommandQueue {
}

class BuildCommandQueue {

    // Own properties of Ide-1.0.Ide.BuildCommandQueue

    static name: string
}

interface BuildManagerClass {

    // Own fields of Ide-1.0.Ide.BuildManagerClass

    parentClass: ObjectClass
}

abstract class BuildManagerClass {

    // Own properties of Ide-1.0.Ide.BuildManagerClass

    static name: string
}

interface BuildPipelineAddinInterface {

    // Own fields of Ide-1.0.Ide.BuildPipelineAddinInterface

    typeInterface: GObject.TypeInterface
    load: (self: BuildPipelineAddin, pipeline: BuildPipeline) => void
    unload: (self: BuildPipelineAddin, pipeline: BuildPipeline) => void
}

abstract class BuildPipelineAddinInterface {

    // Own properties of Ide-1.0.Ide.BuildPipelineAddinInterface

    static name: string
}

interface BuildPipelineClass {

    // Own fields of Ide-1.0.Ide.BuildPipelineClass

    parentClass: ObjectClass
}

abstract class BuildPipelineClass {

    // Own properties of Ide-1.0.Ide.BuildPipelineClass

    static name: string
}

interface BuildResult {
}

class BuildResult {

    // Own properties of Ide-1.0.Ide.BuildResult

    static name: string
}

interface BuildStageClass {

    // Own fields of Ide-1.0.Ide.BuildStageClass

    parentClass: ObjectClass
    execute: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null) => boolean
    executeAsync: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    executeFinish: (self: BuildStage, result: Gio.AsyncResult) => boolean
    cleanAsync: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    cleanFinish: (self: BuildStage, result: Gio.AsyncResult) => boolean
    query: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null) => void
    reap: (self: BuildStage, reaper: Dazzle.DirectoryReaper) => void
    chain: (self: BuildStage, next: BuildStage) => boolean
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
    reserved9: any
    reserved10: any
    reserved11: any
    reserved12: any
}

abstract class BuildStageClass {

    // Own properties of Ide-1.0.Ide.BuildStageClass

    static name: string
}

interface BuildStageLauncherClass {

    // Own fields of Ide-1.0.Ide.BuildStageLauncherClass

    parentClass: BuildStageClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class BuildStageLauncherClass {

    // Own properties of Ide-1.0.Ide.BuildStageLauncherClass

    static name: string
}

interface BuildStageMkdirsClass {

    // Own fields of Ide-1.0.Ide.BuildStageMkdirsClass

    parentClass: BuildStageClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class BuildStageMkdirsClass {

    // Own properties of Ide-1.0.Ide.BuildStageMkdirsClass

    static name: string
}

interface BuildStageTransferClass {

    // Own fields of Ide-1.0.Ide.BuildStageTransferClass

    parentClass: BuildStageClass
}

abstract class BuildStageTransferClass {

    // Own properties of Ide-1.0.Ide.BuildStageTransferClass

    static name: string
}

interface BuildSystemDiscoveryInterface {

    // Own fields of Ide-1.0.Ide.BuildSystemDiscoveryInterface

    parentIface: GObject.TypeInterface
    discover: (self: BuildSystemDiscovery, projectFile: Gio.File, cancellable: Gio.Cancellable | null) => [ /* returnType */ string | null, /* priority */ number ]
}

abstract class BuildSystemDiscoveryInterface {

    // Own properties of Ide-1.0.Ide.BuildSystemDiscoveryInterface

    static name: string
}

interface BuildSystemInterface {

    // Own fields of Ide-1.0.Ide.BuildSystemInterface

    parentIface: GObject.TypeInterface
    getPriority: (self: BuildSystem) => number
    getBuildFlagsAsync: (self: BuildSystem, file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    getBuildFlagsFinish: (self: BuildSystem, result: Gio.AsyncResult) => string[]
    getBuildTargetsAsync: (self: BuildSystem, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    getBuildTargetsFinish: (self: BuildSystem, result: Gio.AsyncResult) => BuildTarget[]
    getBuilddir: (self: BuildSystem, configuration: Configuration) => string | null
    getId: (self: BuildSystem) => string | null
    getDisplayName: (self: BuildSystem) => string | null
}

abstract class BuildSystemInterface {

    // Own properties of Ide-1.0.Ide.BuildSystemInterface

    static name: string
}

interface BuildTargetInterface {

    // Own fields of Ide-1.0.Ide.BuildTargetInterface

    parentIface: GObject.TypeInterface
    getInstallDirectory: (self: BuildTarget) => Gio.File | null
    getName: (self: BuildTarget) => string | null
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class BuildTargetInterface {

    // Own properties of Ide-1.0.Ide.BuildTargetInterface

    static name: string
}

interface BuildconfigConfigurationClass {

    // Own fields of Ide-1.0.Ide.BuildconfigConfigurationClass

    parentClass: ConfigurationClass
}

abstract class BuildconfigConfigurationClass {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationClass

    static name: string
}

interface BuildconfigConfigurationProviderClass {

    // Own fields of Ide-1.0.Ide.BuildconfigConfigurationProviderClass

    parentClass: GObject.ObjectClass
}

abstract class BuildconfigConfigurationProviderClass {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationProviderClass

    static name: string
}

interface Builder {
}

class Builder {

    // Own properties of Ide-1.0.Ide.Builder

    static name: string
}

interface CompletionItemClass {

    // Own fields of Ide-1.0.Ide.CompletionItemClass

    parentClass: GObject.ObjectClass
    match: (self: CompletionItem, query: string | null, casefold: string | null) => boolean
}

abstract class CompletionItemClass {

    // Own properties of Ide-1.0.Ide.CompletionItemClass

    static name: string
}

interface CompletionProviderInterface {

    // Own fields of Ide-1.0.Ide.CompletionProviderInterface

    parentInterface: GtkSource.CompletionProviderIface
    load: (self: CompletionProvider, context: Context) => void
}

abstract class CompletionProviderInterface {

    // Own properties of Ide-1.0.Ide.CompletionProviderInterface

    static name: string
}

interface CompletionResultsClass {

    // Own fields of Ide-1.0.Ide.CompletionResultsClass

    parentClass: GObject.ObjectClass
    compare: (self: CompletionResults, left: CompletionItem, right: CompletionItem) => number
}

abstract class CompletionResultsClass {

    // Own properties of Ide-1.0.Ide.CompletionResultsClass

    static name: string
}

interface CompletionWordsClass {

    // Own fields of Ide-1.0.Ide.CompletionWordsClass

    parentClass: GtkSource.CompletionWordsClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class CompletionWordsClass {

    // Own properties of Ide-1.0.Ide.CompletionWordsClass

    static name: string
}

interface ConfigurationClass {

    // Own fields of Ide-1.0.Ide.ConfigurationClass

    parent: ObjectClass
    getDevice: (self: Configuration) => Device | null
    setDevice: (self: Configuration, device: Device) => void
    getRuntime: (self: Configuration) => Runtime | null
    setRuntime: (self: Configuration, runtime: Runtime) => void
    supportsDevice: (self: Configuration, device: Device) => boolean
    supportsRuntime: (self: Configuration, runtime: Runtime) => boolean
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
    reserved9: any
    reserved10: any
    reserved11: any
    reserved12: any
    reserved13: any
    reserved14: any
    reserved15: any
    reserved16: any
}

abstract class ConfigurationClass {

    // Own properties of Ide-1.0.Ide.ConfigurationClass

    static name: string
}

interface ConfigurationManagerClass {

    // Own fields of Ide-1.0.Ide.ConfigurationManagerClass

    parentClass: ObjectClass
}

abstract class ConfigurationManagerClass {

    // Own properties of Ide-1.0.Ide.ConfigurationManagerClass

    static name: string
}

interface ConfigurationProviderInterface {

    // Own fields of Ide-1.0.Ide.ConfigurationProviderInterface

    parent: GObject.TypeInterface
    loadAsync: (self: ConfigurationProvider, manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    loadFinish: (self: ConfigurationProvider, result: Gio.AsyncResult) => boolean
    unload: (self: ConfigurationProvider, manager: ConfigurationManager) => void
    saveAsync: (self: ConfigurationProvider, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    saveFinish: (self: ConfigurationProvider, result: Gio.AsyncResult) => boolean
}

abstract class ConfigurationProviderInterface {

    // Own properties of Ide-1.0.Ide.ConfigurationProviderInterface

    static name: string
}

interface ContextClass {

    // Own fields of Ide-1.0.Ide.ContextClass

    parentClass: GObject.ObjectClass
}

abstract class ContextClass {

    // Own properties of Ide-1.0.Ide.ContextClass

    static name: string
}

interface CursorClass {

    // Own fields of Ide-1.0.Ide.CursorClass

    parentClass: GObject.ObjectClass
}

abstract class CursorClass {

    // Own properties of Ide-1.0.Ide.CursorClass

    static name: string
}

interface DeviceClass {

    // Own fields of Ide-1.0.Ide.DeviceClass

    parent: ObjectClass
    getSystemType: (self: Device) => string | null
    prepareConfiguration: (self: Device, configuration: Configuration) => void
}

abstract class DeviceClass {

    // Own properties of Ide-1.0.Ide.DeviceClass

    static name: string
}

interface DeviceManagerClass {

    // Own fields of Ide-1.0.Ide.DeviceManagerClass

    parentClass: ObjectClass
}

abstract class DeviceManagerClass {

    // Own properties of Ide-1.0.Ide.DeviceManagerClass

    static name: string
}

interface DeviceProviderInterface {

    // Own fields of Ide-1.0.Ide.DeviceProviderInterface

    parentInterface: GObject.TypeInterface
    getSettled: (provider: DeviceProvider) => boolean
    getDevices: (provider: DeviceProvider) => Device[]
}

abstract class DeviceProviderInterface {

    // Own properties of Ide-1.0.Ide.DeviceProviderInterface

    static name: string
}

interface Diagnostic {

    // Owm methods of Ide-1.0.Ide.Diagnostic

    /**
     * Adds the range to the diagnostic. This allows diagnostic tools to highlight
     * the errored text appropriately.
     * @param range An #IdeSourceRange.
     */
    addRange(range: SourceRange): void
    compare(b: Diagnostic): number
    /**
     * This is a helper to simplify the process of determining what file
     * the diagnostic is within. It is equivalent to getting the source
     * location and looking at the file.
     * @returns A #GFile or %NULL.
     */
    getFile(): Gio.File | null
    /**
     * Gets the fixit denoted by `index`. This value should be less than the value
     * returned from ide_diagnostic_get_num_fixits().
     * @param index The index of the fixit.
     * @returns An #IdeFixit.
     */
    getFixit(index: number): Fixit
    /**
     * Gets the location of a diagnostic.
     * @returns Gets the location of a diagnostic.
     */
    getLocation(): SourceLocation
    getNumFixits(): number
    getNumRanges(): number
    /**
     * Retrieves the range found at `index`. It is a programming error to call this
     * function with a value greater or equal to ide_diagnostic_get_num_ranges().
     * @param index 
     * @returns An #IdeSourceRange
     */
    getRange(index: number): SourceRange | null
    getSeverity(): DiagnosticSeverity
    getText(): string | null
    /**
     * This creates a new string that is formatted using the diagnostics line number, column, severity,
     * and message text in the format "line:column: severity: message".
     * 
     * This can be convenient when wanting to quickly display a diagnostic such as in a tooltip.
     * @returns A string containing the text formatted for display.
     */
    getTextForDisplay(): string | null
    hash(): number
    ref(): Diagnostic
    /**
     * Adds the suggested fixit to the diagnostic while transfering ownership
     * of `fixit` to `self`.
     * @param fixit An #IdeFixit.
     */
    takeFixit(fixit: Fixit): void
    /**
     * Steals the ownership of `range` and adds to the diagnostic.
     * 
     * This saves multiple atomic references of `range` which could be expensive
     * if you are doing lots of diagnostics.
     * @param range An #IdeSourceRange.
     */
    takeRange(range: SourceRange): void
    unref(): void
}

class Diagnostic {

    // Own properties of Ide-1.0.Ide.Diagnostic

    static name: string

    // Constructors of Ide-1.0.Ide.Diagnostic

    /**
     * Creates a new diagnostic.
     * 
     * If you want to set a range for the diagnostic, see
     * ide_diagnostic_add_range() or ide_diagnostic_take_range().
     * @constructor 
     * @param severity the severity of the diagnostic
     * @param text the diagnostic message text
     * @param location the location of the diagnostic
     * @returns An #IdeDiagnostic.
     */
    constructor(severity: DiagnosticSeverity, text: string | null, location: SourceLocation) 
    /**
     * Creates a new diagnostic.
     * 
     * If you want to set a range for the diagnostic, see
     * ide_diagnostic_add_range() or ide_diagnostic_take_range().
     * @constructor 
     * @param severity the severity of the diagnostic
     * @param text the diagnostic message text
     * @param location the location of the diagnostic
     * @returns An #IdeDiagnostic.
     */
    static new(severity: DiagnosticSeverity, text: string | null, location: SourceLocation): Diagnostic
}

interface DiagnosticProviderInterface {

    // Own fields of Ide-1.0.Ide.DiagnosticProviderInterface

    parentInterface: GObject.TypeInterface
    load: (self: DiagnosticProvider) => void
    diagnoseAsync: (self: DiagnosticProvider, file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    diagnoseFinish: (self: DiagnosticProvider, result: Gio.AsyncResult) => Diagnostics | null
}

abstract class DiagnosticProviderInterface {

    // Own properties of Ide-1.0.Ide.DiagnosticProviderInterface

    static name: string
}

interface Diagnostics {

    // Owm methods of Ide-1.0.Ide.Diagnostics

    add(diagnostic: Diagnostic): void
    /**
     * Retrieves the number of diagnostics that can be accessed via
     * ide_diagnostics_index().
     * @returns The number of diagnostics in @self.
     */
    getSize(): number
    /**
     * Retrieves the diagnostic at `index`.
     * @param index 
     * @returns An #IdeDiagnostic.
     */
    index(index: number): Diagnostic
    /**
     * Copies the contents of `other` into `self`.
     * 
     * This is performed by taking a reference to the immutable #IdeDiagnostic
     * instances.
     * @param other 
     */
    merge(other: Diagnostics): void
    ref(): Diagnostics
    unref(): void
}

class Diagnostics {

    // Own properties of Ide-1.0.Ide.Diagnostics

    static name: string

    // Constructors of Ide-1.0.Ide.Diagnostics

    /**
     * Creates a new #IdeDiagnostics container structure for `ar`.
     * Ownership of `ar` is transfered to the resulting structure.
     * @constructor 
     * @param ar an array of #IdeDiagnostic.
     * @returns A newly allocated #IdeDiagnostics.
     */
    constructor(ar: Diagnostic[] | null) 
    /**
     * Creates a new #IdeDiagnostics container structure for `ar`.
     * Ownership of `ar` is transfered to the resulting structure.
     * @constructor 
     * @param ar an array of #IdeDiagnostic.
     * @returns A newly allocated #IdeDiagnostics.
     */
    static new(ar: Diagnostic[] | null): Diagnostics
}

interface DiagnosticsManagerClass {

    // Own fields of Ide-1.0.Ide.DiagnosticsManagerClass

    parentClass: ObjectClass
}

abstract class DiagnosticsManagerClass {

    // Own properties of Ide-1.0.Ide.DiagnosticsManagerClass

    static name: string
}

interface DirectoryBuildSystemClass {

    // Own fields of Ide-1.0.Ide.DirectoryBuildSystemClass

    parentClass: ObjectClass
}

abstract class DirectoryBuildSystemClass {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystemClass

    static name: string
}

interface DirectoryVcsClass {

    // Own fields of Ide-1.0.Ide.DirectoryVcsClass

    parentClass: ObjectClass
}

abstract class DirectoryVcsClass {

    // Own properties of Ide-1.0.Ide.DirectoryVcsClass

    static name: string
}

interface DoapClass {

    // Own fields of Ide-1.0.Ide.DoapClass

    parentClass: GObject.ObjectClass
}

abstract class DoapClass {

    // Own properties of Ide-1.0.Ide.DoapClass

    static name: string
}

interface DoapPersonClass {

    // Own fields of Ide-1.0.Ide.DoapPersonClass

    parentClass: GObject.ObjectClass
}

abstract class DoapPersonClass {

    // Own properties of Ide-1.0.Ide.DoapPersonClass

    static name: string
}

interface EditorFrame {
}

class EditorFrame {

    // Own properties of Ide-1.0.Ide.EditorFrame

    static name: string
}

interface EditorPerspectiveClass {

    // Own fields of Ide-1.0.Ide.EditorPerspectiveClass

    parentClass: Dazzle.DockOverlayClass
}

abstract class EditorPerspectiveClass {

    // Own properties of Ide-1.0.Ide.EditorPerspectiveClass

    static name: string
}

interface EditorViewAddinInterface {

    // Own fields of Ide-1.0.Ide.EditorViewAddinInterface

    parent: GObject.TypeInterface
    load: (self: EditorViewAddin, view: EditorView) => void
    unload: (self: EditorViewAddin, view: EditorView) => void
    languageChanged: (self: EditorViewAddin, languageId: string | null) => void
    loadSourceView: (self: EditorViewAddin, sourceView: SourceView) => void
    unloadSourceView: (self: EditorViewAddin, sourceView: SourceView) => void
}

abstract class EditorViewAddinInterface {

    // Own properties of Ide-1.0.Ide.EditorViewAddinInterface

    static name: string
}

interface EditorViewClass {

    // Own fields of Ide-1.0.Ide.EditorViewClass

    parentClass: LayoutViewClass
}

abstract class EditorViewClass {

    // Own properties of Ide-1.0.Ide.EditorViewClass

    static name: string
}

interface EnvironmentClass {

    // Own fields of Ide-1.0.Ide.EnvironmentClass

    parentClass: GObject.ObjectClass
}

abstract class EnvironmentClass {

    // Own properties of Ide-1.0.Ide.EnvironmentClass

    static name: string
}

interface EnvironmentVariableClass {

    // Own fields of Ide-1.0.Ide.EnvironmentVariableClass

    parentClass: GObject.ObjectClass
}

abstract class EnvironmentVariableClass {

    // Own properties of Ide-1.0.Ide.EnvironmentVariableClass

    static name: string
}

interface ExtensionAdapterClass {

    // Own fields of Ide-1.0.Ide.ExtensionAdapterClass

    parentClass: ObjectClass
}

abstract class ExtensionAdapterClass {

    // Own properties of Ide-1.0.Ide.ExtensionAdapterClass

    static name: string
}

interface ExtensionSetAdapterClass {

    // Own fields of Ide-1.0.Ide.ExtensionSetAdapterClass

    parentClass: ObjectClass
}

abstract class ExtensionSetAdapterClass {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapterClass

    static name: string
}

interface FileClass {

    // Own fields of Ide-1.0.Ide.FileClass

    parentClass: ObjectClass
}

abstract class FileClass {

    // Own properties of Ide-1.0.Ide.FileClass

    static name: string
}

interface FileSettingsClass {

    // Own fields of Ide-1.0.Ide.FileSettingsClass

    parent: ObjectClass
}

abstract class FileSettingsClass {

    // Own properties of Ide-1.0.Ide.FileSettingsClass

    static name: string
}

interface Fixit {

    // Owm methods of Ide-1.0.Ide.Fixit

    apply(): void
    /**
     * Gets the range for the replacement text. The range is non inclusive of the
     * end location. [a,b)
     * @returns An #IdeSourceRange.
     */
    getRange(): SourceRange
    /**
     * Gets the text to replace the source range with.
     * @returns A string with the replacement text.
     */
    getText(): string | null
    ref(): Fixit
    unref(): void
}

class Fixit {

    // Own properties of Ide-1.0.Ide.Fixit

    static name: string
}

interface FormatterInterface {

    // Own fields of Ide-1.0.Ide.FormatterInterface

    parent: GObject.TypeInterface
    load: (self: Formatter) => void
    formatAsync: (self: Formatter, buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    formatFinish: (self: Formatter, result: Gio.AsyncResult) => boolean
    formatRangeAsync: (self: Formatter, buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    formatRangeFinish: (self: Formatter, result: Gio.AsyncResult) => boolean
}

abstract class FormatterInterface {

    // Own properties of Ide-1.0.Ide.FormatterInterface

    static name: string
}

interface FormatterOptionsClass {

    // Own fields of Ide-1.0.Ide.FormatterOptionsClass

    parentClass: GObject.ObjectClass
}

abstract class FormatterOptionsClass {

    // Own properties of Ide-1.0.Ide.FormatterOptionsClass

    static name: string
}

interface GenesisAddinInterface {

    // Own fields of Ide-1.0.Ide.GenesisAddinInterface

    parentInterface: GObject.TypeInterface
    getTitle: (self: GenesisAddin) => string | null
    getIconName: (self: GenesisAddin) => string | null
    getWidget: (self: GenesisAddin) => Gtk.Widget
    runAsync: (self: GenesisAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    runFinish: (self: GenesisAddin, result: Gio.AsyncResult) => boolean
    getLabel: (self: GenesisAddin) => string | null
    getNextLabel: (self: GenesisAddin) => string | null
    getPriority: (self: GenesisAddin) => number
}

abstract class GenesisAddinInterface {

    // Own properties of Ide-1.0.Ide.GenesisAddinInterface

    static name: string
}

interface HighlightEngineClass {

    // Own fields of Ide-1.0.Ide.HighlightEngineClass

    parentClass: ObjectClass
}

abstract class HighlightEngineClass {

    // Own properties of Ide-1.0.Ide.HighlightEngineClass

    static name: string
}

interface HighlightIndex {

    // Owm methods of Ide-1.0.Ide.HighlightIndex

    dump(): void
    insert(word: string | null, tag: any | null): void
    /**
     * Gets the pointer tag that was registered for `word,` or %NULL.  This can be
     * any arbitrary value. Some highlight engines might use it to point at
     * internal structures or strings they know about to optimize later work.
     * @param word 
     * @returns Highlighter specific tag.
     */
    lookup(word: string | null): any | null
    ref(): HighlightIndex
    unref(): void
}

class HighlightIndex {

    // Own properties of Ide-1.0.Ide.HighlightIndex

    static name: string

    // Constructors of Ide-1.0.Ide.HighlightIndex

    constructor() 
    static new(): HighlightIndex
}

interface HighlighterInterface {

    // Own fields of Ide-1.0.Ide.HighlighterInterface

    parentInterface: GObject.TypeInterface
    update: (self: Highlighter, callback: HighlightCallback, rangeBegin: Gtk.TextIter, rangeEnd: Gtk.TextIter) => /* location */ Gtk.TextIter
    setEngine: (self: Highlighter, engine: HighlightEngine) => void
    load: (self: Highlighter) => void
}

abstract class HighlighterInterface {

    // Own properties of Ide-1.0.Ide.HighlighterInterface

    static name: string
}

interface IndenterInterface {

    // Own fields of Ide-1.0.Ide.IndenterInterface

    parent: GObject.TypeInterface
    format: (self: Indenter, textView: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey) => [ /* returnType */ string | null, /* cursorOffset */ number ]
    isTrigger: (self: Indenter, event: Gdk.EventKey) => boolean
}

abstract class IndenterInterface {

    // Own properties of Ide-1.0.Ide.IndenterInterface

    static name: string
}

interface LangservClientClass {

    // Own fields of Ide-1.0.Ide.LangservClientClass

    parentClass: ObjectClass
    notification: (self: LangservClient, method: string | null, params: GLib.Variant) => void
    supportsLanguage: (self: LangservClient, languageId: string | null) => boolean
    publishedDiagnostics: (self: LangservClient, file: Gio.File, diagnostics: Diagnostics) => void
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class LangservClientClass {

    // Own properties of Ide-1.0.Ide.LangservClientClass

    static name: string
}

interface LangservCompletionProviderClass {

    // Own fields of Ide-1.0.Ide.LangservCompletionProviderClass

    parentClass: ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class LangservCompletionProviderClass {

    // Own properties of Ide-1.0.Ide.LangservCompletionProviderClass

    static name: string
}

interface LangservDiagnosticProviderClass {

    // Own fields of Ide-1.0.Ide.LangservDiagnosticProviderClass

    parentClass: ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class LangservDiagnosticProviderClass {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProviderClass

    static name: string
}

interface LangservFormatterClass {

    // Own fields of Ide-1.0.Ide.LangservFormatterClass

    parentClass: ObjectClass
}

abstract class LangservFormatterClass {

    // Own properties of Ide-1.0.Ide.LangservFormatterClass

    static name: string
}

interface LangservHighlighterClass {

    // Own fields of Ide-1.0.Ide.LangservHighlighterClass

    parentClass: ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class LangservHighlighterClass {

    // Own properties of Ide-1.0.Ide.LangservHighlighterClass

    static name: string
}

interface LangservRenameProviderClass {

    // Own fields of Ide-1.0.Ide.LangservRenameProviderClass

    parentInstance: ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class LangservRenameProviderClass {

    // Own properties of Ide-1.0.Ide.LangservRenameProviderClass

    static name: string
}

interface LangservSymbolNodeClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolNodeClass

    parentClass: SymbolNodeClass
}

abstract class LangservSymbolNodeClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolNodeClass

    static name: string
}

interface LangservSymbolResolverClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolResolverClass

    parentClass: ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class LangservSymbolResolverClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolverClass

    static name: string
}

interface LangservSymbolTreeClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolTreeClass

    parentClass: GObject.ObjectClass
}

abstract class LangservSymbolTreeClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolTreeClass

    static name: string
}

interface LayoutClass {

    // Own fields of Ide-1.0.Ide.LayoutClass

    parentClass: Dazzle.DockBinClass
}

abstract class LayoutClass {

    // Own properties of Ide-1.0.Ide.LayoutClass

    static name: string
}

interface LayoutGridClass {

    // Own fields of Ide-1.0.Ide.LayoutGridClass

    parentClass: Gtk.BinClass
}

abstract class LayoutGridClass {

    // Own properties of Ide-1.0.Ide.LayoutGridClass

    static name: string
}

interface LayoutPaneClass {

    // Own fields of Ide-1.0.Ide.LayoutPaneClass

    parentClass: Dazzle.DockBinEdgeClass
}

abstract class LayoutPaneClass {

    // Own properties of Ide-1.0.Ide.LayoutPaneClass

    static name: string
}

interface LayoutStackAddinInterface {

    // Own fields of Ide-1.0.Ide.LayoutStackAddinInterface

    parentIface: GObject.TypeInterface
    load: (self: LayoutStackAddin, stack: LayoutStack) => void
    unload: (self: LayoutStackAddin, stack: LayoutStack) => void
    setView: (self: LayoutStackAddin, view: LayoutView | null) => void
}

abstract class LayoutStackAddinInterface {

    // Own properties of Ide-1.0.Ide.LayoutStackAddinInterface

    static name: string
}

interface LayoutStackClass {

    // Own fields of Ide-1.0.Ide.LayoutStackClass

    parentClass: Gtk.BinClass
}

abstract class LayoutStackClass {

    // Own properties of Ide-1.0.Ide.LayoutStackClass

    static name: string
}

interface LayoutViewClass {

    // Own fields of Ide-1.0.Ide.LayoutViewClass

    parent: Gtk.BinClass
    getCanPreview: (self: LayoutView) => boolean
    getCanSplit: (self: LayoutView) => boolean
    getModified: (self: LayoutView) => boolean
    getTitle: (self: LayoutView) => string | null
    getSpecialTitle: (self: LayoutView) => string | null
    createSplit: (self: LayoutView, file: Gio.File) => LayoutView
    getSplitView: (self: LayoutView) => boolean
    setSplitView: (self: LayoutView, splitView: boolean) => void
    setBackForwardList: (self: LayoutView, backForwardList: BackForwardList) => void
    navigateTo: (self: LayoutView, location: SourceLocation) => void
    agreeToClose: (self: LayoutView) => boolean
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class LayoutViewClass {

    // Own properties of Ide-1.0.Ide.LayoutViewClass

    static name: string
}

interface LineReader {

    // Own fields of Ide-1.0.Ide.LineReader

    contents: string | null
    length: number
    pos: number

    // Owm methods of Ide-1.0.Ide.LineReader

    init(contents: string | null, length: number): void
    /**
     * Moves forward to the beginning of the next line in the buffer. No changes to the buffer
     * are made, and the result is a pointer within the string passed as `contents` in
     * ide_line_reader_init(). Since the line most likely will not be terminated with a NULL byte,
     * you must provide `length` to determine the length of the line.
     * @param length a location for the length of the line in bytes.
     * @returns The beginning of the line within the buffer.
     */
    next(length: number): string | null
}

class LineReader {

    // Own properties of Ide-1.0.Ide.LineReader

    static name: string
}

interface LocalDeviceClass {

    // Own fields of Ide-1.0.Ide.LocalDeviceClass

    parent: DeviceClass
}

abstract class LocalDeviceClass {

    // Own properties of Ide-1.0.Ide.LocalDeviceClass

    static name: string
}

interface ObjectClass {

    // Own fields of Ide-1.0.Ide.ObjectClass

    parent: GObject.ObjectClass
    destroy: (self: Object) => void
    getContext: (self: Object) => Context
    setContext: (self: Object, context: Context) => void
}

abstract class ObjectClass {

    // Own properties of Ide-1.0.Ide.ObjectClass

    static name: string
}

interface OmniBarClass {

    // Own fields of Ide-1.0.Ide.OmniBarClass

    parentClass: Gtk.BoxClass
}

abstract class OmniBarClass {

    // Own properties of Ide-1.0.Ide.OmniBarClass

    static name: string
}

interface OmniSearchDisplayClass {

    // Own fields of Ide-1.0.Ide.OmniSearchDisplayClass

    parentClass: Gtk.BinClass
}

abstract class OmniSearchDisplayClass {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplayClass

    static name: string
}

interface OmniSearchEntryClass {

    // Own fields of Ide-1.0.Ide.OmniSearchEntryClass

    parentClass: Gtk.EntryClass
}

abstract class OmniSearchEntryClass {

    // Own properties of Ide-1.0.Ide.OmniSearchEntryClass

    static name: string
}

interface OmniSearchGroupClass {

    // Own fields of Ide-1.0.Ide.OmniSearchGroupClass

    parentClass: Gtk.BoxClass
}

abstract class OmniSearchGroupClass {

    // Own properties of Ide-1.0.Ide.OmniSearchGroupClass

    static name: string
}

interface OmniSearchRowClass {

    // Own fields of Ide-1.0.Ide.OmniSearchRowClass

    parentClass: Gtk.ListBoxRowClass
}

abstract class OmniSearchRowClass {

    // Own properties of Ide-1.0.Ide.OmniSearchRowClass

    static name: string
}

interface PatternSpec {

    // Owm methods of Ide-1.0.Ide.PatternSpec

    getText(): string | null
    match(haystack: string | null): boolean
    ref(): PatternSpec
    unref(): void
}

/**
 * This works similar to GPatternSpec except the query syntax is different.
 * It tries to mtach word boundaries, but with matching partial words up
 * to those boundaries. For example, "gtk widg" would match "gtk_widget_show".
 * Word boundaries include '_' and ' '. If any character is uppercase, then
 * case sensitivity is used.
 * @record 
 */
class PatternSpec {

    // Own properties of Ide-1.0.Ide.PatternSpec

    static name: string

    // Constructors of Ide-1.0.Ide.PatternSpec

    constructor(keywords: string | null) 
    static new(keywords: string | null): PatternSpec
}

interface PerspectiveInterface {

    // Own fields of Ide-1.0.Ide.PerspectiveInterface

    parent: GObject.TypeInterface
    agreeToShutdown: (self: Perspective) => boolean
    getActions: (self: Perspective) => Gio.ActionGroup | null
    getIconName: (self: Perspective) => string | null
    getId: (self: Perspective) => string | null
    getNeedsAttention: (self: Perspective) => boolean
    getPriority: (self: Perspective) => number
    getTitle: (self: Perspective) => string | null
    getTitlebar: (self: Perspective) => Gtk.Widget | null
    isEarly: (self: Perspective) => boolean
    setFullscreen: (self: Perspective, fullscreen: boolean) => void
    viewsForeach: (self: Perspective, callback: Gtk.Callback) => void
    getAccelerator: (self: Perspective) => string | null
}

abstract class PerspectiveInterface {

    // Own properties of Ide-1.0.Ide.PerspectiveInterface

    static name: string
}

interface PkconTransferClass {

    // Own fields of Ide-1.0.Ide.PkconTransferClass

    parentClass: TransferClass
}

abstract class PkconTransferClass {

    // Own properties of Ide-1.0.Ide.PkconTransferClass

    static name: string
}

interface PreferencesAddinInterface {

    // Own fields of Ide-1.0.Ide.PreferencesAddinInterface

    parentInterface: GObject.TypeInterface
    load: (self: PreferencesAddin, preferences: Dazzle.Preferences) => void
    unload: (self: PreferencesAddin, preferences: Dazzle.Preferences) => void
}

abstract class PreferencesAddinInterface {

    // Own properties of Ide-1.0.Ide.PreferencesAddinInterface

    static name: string
}

interface PreferencesPerspectiveClass {

    // Own fields of Ide-1.0.Ide.PreferencesPerspectiveClass

    parentClass: Dazzle.PreferencesViewClass
}

abstract class PreferencesPerspectiveClass {

    // Own properties of Ide-1.0.Ide.PreferencesPerspectiveClass

    static name: string
}

interface ProgressClass {

    // Own fields of Ide-1.0.Ide.ProgressClass

    parentClass: GObject.ObjectClass
}

abstract class ProgressClass {

    // Own properties of Ide-1.0.Ide.ProgressClass

    static name: string
}

interface ProjectClass {

    // Own fields of Ide-1.0.Ide.ProjectClass

    parentClass: ObjectClass
}

abstract class ProjectClass {

    // Own properties of Ide-1.0.Ide.ProjectClass

    static name: string
}

interface ProjectEditClass {

    // Own fields of Ide-1.0.Ide.ProjectEditClass

    parentInstance: GObject.ObjectClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class ProjectEditClass {

    // Own properties of Ide-1.0.Ide.ProjectEditClass

    static name: string
}

interface ProjectFileClass {

    // Own fields of Ide-1.0.Ide.ProjectFileClass

    parent: ProjectItemClass
}

abstract class ProjectFileClass {

    // Own properties of Ide-1.0.Ide.ProjectFileClass

    static name: string
}

interface ProjectFilesClass {

    // Own fields of Ide-1.0.Ide.ProjectFilesClass

    parentClass: ProjectItemClass
}

abstract class ProjectFilesClass {

    // Own properties of Ide-1.0.Ide.ProjectFilesClass

    static name: string
}

interface ProjectInfoClass {

    // Own fields of Ide-1.0.Ide.ProjectInfoClass

    parentClass: GObject.ObjectClass
}

abstract class ProjectInfoClass {

    // Own properties of Ide-1.0.Ide.ProjectInfoClass

    static name: string
}

interface ProjectItemClass {

    // Own fields of Ide-1.0.Ide.ProjectItemClass

    parentClass: ObjectClass
}

abstract class ProjectItemClass {

    // Own properties of Ide-1.0.Ide.ProjectItemClass

    static name: string
}

interface ProjectMinerInterface {

    // Own fields of Ide-1.0.Ide.ProjectMinerInterface

    parentIface: GObject.TypeInterface
    discovered: (self: ProjectMiner, projectInfo: ProjectInfo) => void
    mineAsync: (self: ProjectMiner, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    mineFinish: (self: ProjectMiner, result: Gio.AsyncResult) => boolean
}

abstract class ProjectMinerInterface {

    // Own properties of Ide-1.0.Ide.ProjectMinerInterface

    static name: string
}

interface ProjectTemplateInterface {

    // Own fields of Ide-1.0.Ide.ProjectTemplateInterface

    parent: GObject.TypeInterface
    getId: (self: ProjectTemplate) => string | null
    getName: (self: ProjectTemplate) => string | null
    getDescription: (self: ProjectTemplate) => string | null
    getWidget: (self: ProjectTemplate) => Gtk.Widget
    getLanguages: (self: ProjectTemplate) => string[]
    getIconName: (self: ProjectTemplate) => string | null
    expandAsync: (self: ProjectTemplate, params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    expandFinish: (self: ProjectTemplate, result: Gio.AsyncResult) => boolean
}

abstract class ProjectTemplateInterface {

    // Own properties of Ide-1.0.Ide.ProjectTemplateInterface

    static name: string
}

interface RecentProjectsClass {

    // Own fields of Ide-1.0.Ide.RecentProjectsClass

    parentClass: GObject.ObjectClass
}

abstract class RecentProjectsClass {

    // Own properties of Ide-1.0.Ide.RecentProjectsClass

    static name: string
}

interface RenameProviderInterface {

    // Own fields of Ide-1.0.Ide.RenameProviderInterface

    parentIface: GObject.TypeInterface
    renameAsync: (self: RenameProvider, location: SourceLocation, newName: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    renameFinish: (self: RenameProvider, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]
    load: (self: RenameProvider) => void
}

abstract class RenameProviderInterface {

    // Own properties of Ide-1.0.Ide.RenameProviderInterface

    static name: string
}

interface RunButtonClass {

    // Own fields of Ide-1.0.Ide.RunButtonClass

    parentClass: Gtk.BoxClass
}

abstract class RunButtonClass {

    // Own properties of Ide-1.0.Ide.RunButtonClass

    static name: string
}

interface RunManagerClass {

    // Own fields of Ide-1.0.Ide.RunManagerClass

    parentClass: ObjectClass
}

abstract class RunManagerClass {

    // Own properties of Ide-1.0.Ide.RunManagerClass

    static name: string
}

interface RunnerAddinInterface {

    // Own fields of Ide-1.0.Ide.RunnerAddinInterface

    parentInterface: GObject.TypeInterface
    load: (self: RunnerAddin, runner: Runner) => void
    unload: (self: RunnerAddin, runner: Runner) => void
    prehookAsync: (self: RunnerAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    prehookFinish: (self: RunnerAddin, result: Gio.AsyncResult) => boolean
    posthookAsync: (self: RunnerAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    posthookFinish: (self: RunnerAddin, result: Gio.AsyncResult) => boolean
}

abstract class RunnerAddinInterface {

    // Own properties of Ide-1.0.Ide.RunnerAddinInterface

    static name: string
}

interface RunnerClass {

    // Own fields of Ide-1.0.Ide.RunnerClass

    parent: ObjectClass
    forceQuit: (self: Runner) => void
    getStdin: (self: Runner) => Gio.OutputStream | null
    getStdout: (self: Runner) => Gio.InputStream | null
    getStderr: (self: Runner) => Gio.InputStream | null
    runAsync: (self: Runner, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    runFinish: (self: Runner, result: Gio.AsyncResult) => boolean
    setTty: (self: Runner, ttyFd: number) => void
    fixupLauncher: (self: Runner, launcher: SubprocessLauncher) => void
    getRuntime: (self: Runner) => Runtime | null
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
}

abstract class RunnerClass {

    // Own properties of Ide-1.0.Ide.RunnerClass

    static name: string
}

interface RuntimeClass {

    // Own fields of Ide-1.0.Ide.RuntimeClass

    parent: ObjectClass
    containsProgramInPath: (self: Runtime, program: string | null, cancellable: Gio.Cancellable | null) => boolean
    createLauncher: (self: Runtime) => SubprocessLauncher
    prepareConfiguration: (self: Runtime, configuration: Configuration) => void
    createRunner: (self: Runtime, buildTarget: BuildTarget) => Runner | null
    translateFile: (self: Runtime, file: Gio.File) => Gio.File
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
    reserved9: any
    reserved10: any
    reserved11: any
    reserved12: any
    reserved13: any
    reserved14: any
    reserved15: any
    reserved16: any
}

abstract class RuntimeClass {

    // Own properties of Ide-1.0.Ide.RuntimeClass

    static name: string
}

interface RuntimeManagerClass {

    // Own fields of Ide-1.0.Ide.RuntimeManagerClass

    parentClass: ObjectClass
}

abstract class RuntimeManagerClass {

    // Own properties of Ide-1.0.Ide.RuntimeManagerClass

    static name: string
}

interface RuntimeProviderInterface {

    // Own fields of Ide-1.0.Ide.RuntimeProviderInterface

    parent: GObject.TypeInterface
    load: (self: RuntimeProvider, manager: RuntimeManager) => void
    unload: (self: RuntimeProvider, manager: RuntimeManager) => void
    canInstall: (self: RuntimeProvider, runtimeId: string | null) => boolean
    installAsync: (self: RuntimeProvider, runtimeId: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    installFinish: (self: RuntimeProvider, result: Gio.AsyncResult) => boolean
}

abstract class RuntimeProviderInterface {

    // Own properties of Ide-1.0.Ide.RuntimeProviderInterface

    static name: string
}

interface Script {
}

class Script {

    // Own properties of Ide-1.0.Ide.Script

    static name: string
}

interface ScriptManager {
}

class ScriptManager {

    // Own properties of Ide-1.0.Ide.ScriptManager

    static name: string
}

interface SearchContextClass {

    // Own fields of Ide-1.0.Ide.SearchContextClass

    parentClass: ObjectClass
}

abstract class SearchContextClass {

    // Own properties of Ide-1.0.Ide.SearchContextClass

    static name: string
}

interface SearchEngineClass {

    // Own fields of Ide-1.0.Ide.SearchEngineClass

    parentClass: ObjectClass
}

abstract class SearchEngineClass {

    // Own properties of Ide-1.0.Ide.SearchEngineClass

    static name: string
}

interface SearchProviderInterface {

    // Own fields of Ide-1.0.Ide.SearchProviderInterface

    parentIface: GObject.TypeInterface
    getPrefix: (provider: SearchProvider) => string
    getPriority: (provider: SearchProvider) => number
    getVerb: (provider: SearchProvider) => string | null
    populate: (provider: SearchProvider, context: SearchContext, searchTerms: string | null, maxResults: number, cancellable: Gio.Cancellable | null) => void
    createRow: (provider: SearchProvider, result: SearchResult) => Gtk.Widget
    activate: (provider: SearchProvider, row: Gtk.Widget, result: SearchResult) => void
}

abstract class SearchProviderInterface {

    // Own properties of Ide-1.0.Ide.SearchProviderInterface

    static name: string
}

interface SearchReducer {

    // Own fields of Ide-1.0.Ide.SearchReducer

    context: SearchContext
    provider: SearchProvider
    sequence: GLib.Sequence
    maxResults: number
    count: number

    // Owm methods of Ide-1.0.Ide.SearchReducer

    accepts(score: number): boolean
    destroy(): void
    init(context: SearchContext, provider: SearchProvider, maxResults: number): void
    push(result: SearchResult): void
}

class SearchReducer {

    // Own properties of Ide-1.0.Ide.SearchReducer

    static name: string
}

interface SearchResultClass {

    // Own fields of Ide-1.0.Ide.SearchResultClass

    parent: ObjectClass
    activate: (result: SearchResult) => void
}

abstract class SearchResultClass {

    // Own properties of Ide-1.0.Ide.SearchResultClass

    static name: string
}

interface ServiceInterface {

    // Own fields of Ide-1.0.Ide.ServiceInterface

    parentInterface: GObject.TypeInterface
    contextLoaded: (service: Service) => void
    getName: (service: Service) => string | null
    start: (service: Service) => void
    stop: (service: Service) => void
}

abstract class ServiceInterface {

    // Own properties of Ide-1.0.Ide.ServiceInterface

    static name: string
}

interface SettingsClass {

    // Own fields of Ide-1.0.Ide.SettingsClass

    parentClass: ObjectClass
}

abstract class SettingsClass {

    // Own properties of Ide-1.0.Ide.SettingsClass

    static name: string
}

interface SourceLocation {

    // Owm methods of Ide-1.0.Ide.SourceLocation

    compare(b: SourceLocation): number
    /**
     * The file represented by this source location.
     * @returns An #IdeFile.
     */
    getFile(): File
    /**
     * Retrieves the target line number starting from 0.
     * @returns A #guint containing the target line.
     */
    getLine(): number
    /**
     * Retrieves the character offset within the line.
     * @returns A #guint containing the offset within the line.
     */
    getLineOffset(): number
    /**
     * Retrieves the character offset within the file.
     * @returns A #guint containing the character offset within the file.
     */
    getOffset(): number
    getUri(): Uri
    hash(): number
    /**
     * Increments the reference count of `self` by one.
     * @returns self
     */
    ref(): SourceLocation
    /**
     * Decrements the reference count of `self` by one. If the reference count
     * reaches zero, then the structure is freed.
     */
    unref(): void
}

class SourceLocation {

    // Own properties of Ide-1.0.Ide.SourceLocation

    static name: string

    // Constructors of Ide-1.0.Ide.SourceLocation

    /**
     * Creates a new #IdeSourceLocation, using the file, line, column, and character
     * offset provided.
     * @constructor 
     * @param file an #IdeFile
     * @param line the line number starting from zero
     * @param lineOffset the character offset within the line
     * @param offset the character offset in the file
     * @returns A newly allocated #IdeSourceLocation.
     */
    constructor(file: File, line: number, lineOffset: number, offset: number) 
    /**
     * Creates a new #IdeSourceLocation, using the file, line, column, and character
     * offset provided.
     * @constructor 
     * @param file an #IdeFile
     * @param line the line number starting from zero
     * @param lineOffset the character offset within the line
     * @param offset the character offset in the file
     * @returns A newly allocated #IdeSourceLocation.
     */
    static new(file: File, line: number, lineOffset: number, offset: number): SourceLocation
}

interface SourceMapClass {

    // Own fields of Ide-1.0.Ide.SourceMapClass

    parentClass: GtkSource.MapClass
}

abstract class SourceMapClass {

    // Own properties of Ide-1.0.Ide.SourceMapClass

    static name: string
}

interface SourceRange {

    // Owm methods of Ide-1.0.Ide.SourceRange

    /**
     * Gets the beginning of the source range.
     * @returns An #IdeSourceLocation.
     */
    getBegin(): SourceLocation
    /**
     * Gets the end of the source range.
     * @returns An #IdeSourceLocation.
     */
    getEnd(): SourceLocation
    /**
     * Increments the reference count of `self` by one. When you are done with
     * `self,` release it by calling ide_source_range_unref().
     * @returns @self
     */
    ref(): SourceRange
    /**
     * Decrements the reference count of `self` by one.
     */
    unref(): void
}

class SourceRange {

    // Own properties of Ide-1.0.Ide.SourceRange

    static name: string

    // Constructors of Ide-1.0.Ide.SourceRange

    constructor(begin: SourceLocation, end: SourceLocation) 
    static new(begin: SourceLocation, end: SourceLocation): SourceRange
}

interface SourceSnippetChunkClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetChunkClass

    parentClass: GObject.ObjectClass
}

abstract class SourceSnippetChunkClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunkClass

    static name: string
}

interface SourceSnippetClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetClass

    parentClass: GObject.ObjectClass
}

abstract class SourceSnippetClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetClass

    static name: string
}

interface SourceSnippetContextClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetContextClass

    parentClass: GObject.ObjectClass
}

abstract class SourceSnippetContextClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetContextClass

    static name: string
}

interface SourceSnippetsClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetsClass

    parentClass: GObject.ObjectClass
}

abstract class SourceSnippetsClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetsClass

    static name: string
}

interface SourceSnippetsManagerClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetsManagerClass

    parentClass: GObject.ObjectClass
}

abstract class SourceSnippetsManagerClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetsManagerClass

    static name: string
}

interface SourceViewClass {

    // Own fields of Ide-1.0.Ide.SourceViewClass

    parentClass: GtkSource.ViewClass
    appendToCount: (self: SourceView, digit: number) => void
    autoIndent: (self: SourceView) => void
    beginMacro: (self: SourceView) => void
    captureModifier: (self: SourceView) => void
    clearCount: (self: SourceView) => void
    clearModifier: (self: SourceView) => void
    clearSearch: (self: SourceView) => void
    clearSelection: (self: SourceView) => void
    clearSnippets: (self: SourceView) => void
    cycleCompletion: (self: SourceView, direction: Gtk.DirectionType) => void
    deleteSelection: (self: SourceView) => void
    endMacro: (self: SourceView) => void
    focusLocation: (self: SourceView, location: SourceLocation) => void
    gotoDefinition: (self: SourceView) => void
    hideCompletion: (self: SourceView) => void
    indentSelection: (self: SourceView, level: number) => void
    insertAtCursorAndIndent: (self: SourceView, str: string | null) => void
    insertModifier: (self: SourceView, useCount: boolean) => void
    jump: (self: SourceView, location: Gtk.TextIter) => void
    movement: (self: SourceView, movement: SourceViewMovement, extendSelection: boolean, exclusive: boolean, applyCount: boolean) => void
    moveError: (self: SourceView, dir: Gtk.DirectionType) => void
    moveSearch: (self: SourceView, dir: Gtk.DirectionType, extendSelection: boolean, selectMatch: boolean, exclusive: boolean, applyCount: boolean, atWordBoundaries: number) => void
    pasteClipboardExtended: (self: SourceView, smartLines: boolean, afterCursor: boolean, placeCursorAtOriginal: boolean) => void
    pushSelection: (self: SourceView) => void
    popSelection: (self: SourceView) => void
    rebuildHighlight: (self: SourceView) => void
    replayMacro: (self: SourceView, useCount: boolean) => void
    requestDocumentation: (self: SourceView) => void
    restoreInsertMark: (self: SourceView) => void
    saveCommand: (self: SourceView) => void
    saveSearchChar: (self: SourceView) => void
    saveInsertMark: (self: SourceView) => void
    selectInner: (self: SourceView, innerLeft: string | null, innerRight: string | null, exclusive: boolean, stringMode: boolean) => void
    selectTag: (self: SourceView, exclusive: boolean) => void
    selectionTheatric: (self: SourceView, theatric: SourceViewTheatric) => void
    setMode: (self: SourceView, mode: string | null, type: SourceViewModeType) => void
    setOverwrite: (self: SourceView, overwrite: boolean) => void
    setSearchText: (self: SourceView, searchText: string | null, fromSelection: boolean) => void
    sort: (self: SourceView, ignoreCase: boolean, reverse: boolean) => void
    swapSelectionBounds: (self: SourceView) => void
    increaseFontSize: (self: SourceView) => void
    decreaseFontSize: (self: SourceView) => void
    resetFontSize: (self: SourceView) => void
    beginRename: (self: SourceView) => void
    addCursor: (self: SourceView, type: number) => void
    removeCursors: (self: SourceView) => void
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
    reserved9: any
    reserved10: any
    reserved11: any
    reserved12: any
    reserved13: any
    reserved14: any
    reserved15: any
    reserved16: any
    reserved17: any
    reserved18: any
    reserved19: any
    reserved20: any
    reserved21: any
    reserved22: any
    reserved23: any
    reserved24: any
}

abstract class SourceViewClass {

    // Own properties of Ide-1.0.Ide.SourceViewClass

    static name: string
}

interface SourceViewModeClass {

    // Own fields of Ide-1.0.Ide.SourceViewModeClass

    parentClass: Gtk.WidgetClass
}

abstract class SourceViewModeClass {

    // Own properties of Ide-1.0.Ide.SourceViewModeClass

    static name: string
}

interface SubprocessInterface {

    // Own fields of Ide-1.0.Ide.SubprocessInterface

    parentInterface: GObject.TypeInterface
    getIdentifier: (self: Subprocess) => string | null
    getStdoutPipe: (self: Subprocess) => Gio.InputStream
    getStderrPipe: (self: Subprocess) => Gio.InputStream
    getStdinPipe: (self: Subprocess) => Gio.OutputStream
    wait: (self: Subprocess, cancellable: Gio.Cancellable | null) => boolean
    waitAsync: (self: Subprocess, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    waitFinish: (self: Subprocess, result: Gio.AsyncResult) => boolean
    getSuccessful: (self: Subprocess) => boolean
    getIfExited: (self: Subprocess) => boolean
    getExitStatus: (self: Subprocess) => number
    getIfSignaled: (self: Subprocess) => boolean
    getTermSig: (self: Subprocess) => number
    getStatus: (self: Subprocess) => number
    sendSignal: (self: Subprocess, signalNum: number) => void
    forceExit: (self: Subprocess) => void
    communicate: (self: Subprocess, stdinBuf: any, cancellable: Gio.Cancellable | null, stdoutBuf: any, stderrBuf: any) => boolean
    communicateUtf8: (self: Subprocess, stdinBuf: string | null, cancellable: Gio.Cancellable | null) => [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
    communicateAsync: (self: Subprocess, stdinBuf: any | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    communicateFinish: (self: Subprocess, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* stdoutBuf */ any, /* stderrBuf */ any ]
    communicateUtf8Async: (self: Subprocess, stdinBuf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    communicateUtf8Finish: (self: Subprocess, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* stdoutBuf */ string | null, /* stderrBuf */ string | null ]
}

abstract class SubprocessInterface {

    // Own properties of Ide-1.0.Ide.SubprocessInterface

    static name: string
}

interface SubprocessLauncherClass {

    // Own fields of Ide-1.0.Ide.SubprocessLauncherClass

    parentClass: GObject.ObjectClass
    spawn: (self: SubprocessLauncher, cancellable: Gio.Cancellable | null) => Subprocess
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class SubprocessLauncherClass {

    // Own properties of Ide-1.0.Ide.SubprocessLauncherClass

    static name: string
}

interface SubprocessSupervisorClass {

    // Own fields of Ide-1.0.Ide.SubprocessSupervisorClass

    parentClass: GObject.ObjectClass
    spawned: (self: SubprocessSupervisor, subprocess: Subprocess) => void
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class SubprocessSupervisorClass {

    // Own properties of Ide-1.0.Ide.SubprocessSupervisorClass

    static name: string
}

interface Symbol {

    // Owm methods of Ide-1.0.Ide.Symbol

    /**
     * Gets the location of the symbols "implementation". In C/C++ languages, you can have multiple
     * declarations by only a single implementation.
     * @returns An #IdeSourceLocation or %NULL.
     */
    getCanonicalLocation(): SourceLocation | null
    /**
     * The location of a symbol equates to the declaration of the symbol. In C and C++, this would
     * mean the header location (or forward declaration in a C file before the implementation).
     * 
     * If the symbol provider did not register this information, %NULL will be returned.
     * @returns An #IdeSourceLocation or %NULL.
     */
    getDeclarationLocation(): SourceLocation | null
    /**
     * Like ide_symbol_get_declaration_location() but gets the first declaration (only one can be
     * the definition).
     * @returns An #IdeSourceLocation or %NULL.
     */
    getDefinitionLocation(): SourceLocation | null
    getFlags(): SymbolFlags
    getKind(): SymbolKind
    getName(): string | null
    ref(): Symbol
    unref(): void
}

class Symbol {

    // Own properties of Ide-1.0.Ide.Symbol

    static name: string

    // Constructors of Ide-1.0.Ide.Symbol

    constructor(name: string | null, kind: SymbolKind, flags: SymbolFlags, declarationLocation: SourceLocation | null, definitionLocation: SourceLocation | null, canonicalLocation: SourceLocation | null) 
    static new(name: string | null, kind: SymbolKind, flags: SymbolFlags, declarationLocation: SourceLocation | null, definitionLocation: SourceLocation | null, canonicalLocation: SourceLocation | null): Symbol
}

interface SymbolNodeClass {

    // Own fields of Ide-1.0.Ide.SymbolNodeClass

    parent: ObjectClass
    getLocationAsync: (self: SymbolNode, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    getLocationFinish: (self: SymbolNode, result: Gio.AsyncResult) => SourceLocation | null
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class SymbolNodeClass {

    // Own properties of Ide-1.0.Ide.SymbolNodeClass

    static name: string
}

interface SymbolResolverInterface {

    // Own fields of Ide-1.0.Ide.SymbolResolverInterface

    parentInterface: GObject.TypeInterface
    lookupSymbolAsync: (self: SymbolResolver, location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    lookupSymbolFinish: (self: SymbolResolver, result: Gio.AsyncResult) => Symbol | null
    getSymbolTreeAsync: (self: SymbolResolver, file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    getSymbolTreeFinish: (self: SymbolResolver, result: Gio.AsyncResult) => SymbolTree | null
    load: (self: SymbolResolver) => void
    findReferencesAsync: (self: SymbolResolver, location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    findReferencesFinish: (self: SymbolResolver, result: Gio.AsyncResult) => SourceRange[]
}

abstract class SymbolResolverInterface {

    // Own properties of Ide-1.0.Ide.SymbolResolverInterface

    static name: string
}

interface SymbolTreeInterface {

    // Own fields of Ide-1.0.Ide.SymbolTreeInterface

    parent: GObject.TypeInterface
    getNChildren: (self: SymbolTree, node: SymbolNode | null) => number
    getNthChild: (self: SymbolTree, node: SymbolNode | null, nth: number) => SymbolNode | null
}

abstract class SymbolTreeInterface {

    // Own properties of Ide-1.0.Ide.SymbolTreeInterface

    static name: string
}

interface TagsBuilderInterface {

    // Own fields of Ide-1.0.Ide.TagsBuilderInterface

    parent: GObject.TypeInterface
    buildAsync: (self: TagsBuilder, directoryOrFile: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    buildFinish: (self: TagsBuilder, result: Gio.AsyncResult) => boolean
}

abstract class TagsBuilderInterface {

    // Own properties of Ide-1.0.Ide.TagsBuilderInterface

    static name: string
}

interface TemplateBaseClass {

    // Own fields of Ide-1.0.Ide.TemplateBaseClass

    parentClass: GObject.ObjectClass
}

abstract class TemplateBaseClass {

    // Own properties of Ide-1.0.Ide.TemplateBaseClass

    static name: string
}

interface TemplateProviderInterface {

    // Own fields of Ide-1.0.Ide.TemplateProviderInterface

    parentIface: GObject.TypeInterface
    getProjectTemplates: (self: TemplateProvider) => ProjectTemplate[]
}

abstract class TemplateProviderInterface {

    // Own properties of Ide-1.0.Ide.TemplateProviderInterface

    static name: string
}

interface ThreadPool {
}

class ThreadPool {

    // Own properties of Ide-1.0.Ide.ThreadPool

    static name: string

    // Constructors of Ide-1.0.Ide.ThreadPool

    /**
     * Runs the callback on the thread pool thread.
     * @param kind the threadpool kind to use.
     * @param func A function to call in the worker thread.
     */
    static push(kind: ThreadPoolKind, func: ThreadFunc): void
    /**
     * This pushes a task to be executed on a worker thread based on the task kind as denoted by
     * `kind`. Some tasks will be placed on special work queues or throttled based on priority.
     * @param kind The task kind.
     * @param task A #GTask to execute.
     * @param func The thread worker to execute for `task`.
     */
    static pushTask(kind: ThreadPoolKind, task: Gio.Task, func: Gio.TaskThreadFunc): void
}

interface TransferButtonClass {

    // Own fields of Ide-1.0.Ide.TransferButtonClass

    parentClass: Dazzle.ProgressButtonClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
}

abstract class TransferButtonClass {

    // Own properties of Ide-1.0.Ide.TransferButtonClass

    static name: string
}

interface TransferClass {

    // Own fields of Ide-1.0.Ide.TransferClass

    parentClass: GObject.ObjectClass
    executeAsync: (self: Transfer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    executeFinish: (self: Transfer, result: Gio.AsyncResult) => boolean
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class TransferClass {

    // Own properties of Ide-1.0.Ide.TransferClass

    static name: string
}

interface TransferManagerClass {

    // Own fields of Ide-1.0.Ide.TransferManagerClass

    parentClass: ObjectClass
}

abstract class TransferManagerClass {

    // Own properties of Ide-1.0.Ide.TransferManagerClass

    static name: string
}

interface TransferRowClass {

    // Own fields of Ide-1.0.Ide.TransferRowClass

    parentClass: Gtk.ListBoxRowClass
}

abstract class TransferRowClass {

    // Own properties of Ide-1.0.Ide.TransferRowClass

    static name: string
}

interface TransfersButtonClass {

    // Own fields of Ide-1.0.Ide.TransfersButtonClass

    parentClass: Gtk.MenuButtonClass
}

abstract class TransfersButtonClass {

    // Own properties of Ide-1.0.Ide.TransfersButtonClass

    static name: string
}

interface TransfersProgressIconClass {

    // Own fields of Ide-1.0.Ide.TransfersProgressIconClass

    parentClass: Gtk.DrawingAreaClass
}

abstract class TransfersProgressIconClass {

    // Own properties of Ide-1.0.Ide.TransfersProgressIconClass

    static name: string
}

interface UnsavedFile {

    // Owm methods of Ide-1.0.Ide.UnsavedFile

    /**
     * Gets the contents of the unsaved file.
     * @returns A #GBytes containing the unsaved file content.
     */
    getContent(): any
    /**
     * Retrieves the underlying file represented by `self`.
     * @returns A #GFile.
     */
    getFile(): Gio.File
    getSequence(): number
    getTempPath(): string | null
    persist(cancellable: Gio.Cancellable | null): boolean
    ref(): UnsavedFile
    unref(): void
}

class UnsavedFile {

    // Own properties of Ide-1.0.Ide.UnsavedFile

    static name: string
}

interface UnsavedFilesClass {

    // Own fields of Ide-1.0.Ide.UnsavedFilesClass

    parentClass: ObjectClass
}

abstract class UnsavedFilesClass {

    // Own properties of Ide-1.0.Ide.UnsavedFilesClass

    static name: string
}

interface Uri {

    // Owm methods of Ide-1.0.Ide.Uri

    /**
     * Copies `uri`
     * @returns a copy of @uri
     */
    copy(): Uri
    /**
     * Gets `uri'`s authentication parameters. Depending on the URI scheme,
     * ide_uri_parse_params() may be useful for further parsing this
     * information.
     * @returns @uri's authentication parameters.
     */
    getAuthParams(): string | null
    /**
     * Gets `uri'`s fragment, which may contain %<!-- -->-encoding,
     * depending on the flags with which `uri` was parsed.
     * @returns @uri's fragment.
     */
    getFragment(): string | null
    /**
     * Gets `uri'`s host. If `uri` contained an IPv6 address literal, this
     * value will not include the brackets that are required by the URI
     * syntax.
     * @returns @uri's host.
     */
    getHost(): string | null
    /**
     * Gets `uri'`s password. If `uri` was not parsed with
     * %IDE_URI_PARSE_PASSWORD, this will always be %NULL.
     * @returns @uri's password.
     */
    getPassword(): string | null
    /**
     * Gets `uri'`s path, which may contain %<!-- -->-encoding, depending
     * on the flags with which `uri` was parsed.
     * @returns @uri's path.
     */
    getPath(): string | null
    /**
     * Gets `uri'`s port.
     * @returns @uri's port, or %0 if it was unset
     */
    getPort(): number
    /**
     * Gets `uri'`s query, which may contain %<!-- -->-encoding, depending
     * on the flags with which `uri` was parsed.
     * 
     * For queries consisting of a series of "name=value" parameters,
     * ide_uri_parse_params() may be useful.
     * @returns @uri's query.
     */
    getQuery(): string | null
    /**
     * Gets `uri'`s scheme.
     * @returns @uri's scheme.
     */
    getScheme(): string | null
    /**
     * Gets `uri'`s user. If `uri` was parsed with %IDE_URI_PARSE_PASSWORD or
     * %IDE_URI_PARSE_AUTH_PARAMS, this is the string that appears before the
     * password and parameters in the userinfo. If not, then the entire
     * userinfo is considered the user.
     * @returns @uri's user.
     */
    getUser(): string | null
    isFile(file: Gio.File): boolean
    /**
     * Parses `uri_string` according to `flags` and, if it is a relative
     * URI, merges it with `base_uri`. If the result is not a valid
     * absolute URI, it will be discarded, and an error returned.
     * @param uriString a string representing a relative or absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    newRelative(uriString: string | null, flags: UriParseFlags): Uri
    /**
     * Increments the reference count of `uri` by one.
     * @returns uri
     */
    ref(): Uri
    /**
     * Sets `uri'`s authentication parameters to `auth_params`.
     * @param authParams the authentication parameters, or %NULL
     */
    setAuthParams(authParams: string | null): void
    /**
     * Sets `uri'`s fragment to `fragment,` which is assumed to have been
     * %<!-- -->-encoded by the caller. See ide_uri_set_path() for more
     * details.
     * @param fragment the (%<!-- -->-encoded) fragment
     */
    setFragment(fragment: string | null): void
    /**
     * Sets `uri'`s host to `host`.
     * 
     * If `host` is an IPv6 IP address, it should not include the brackets
     * required by the URI syntax; they will be added automatically when
     * converting `uri` to a string.
     * @param host the hostname or IP address, or %NULL
     */
    setHost(host: string | null): void
    /**
     * Sets `uri'`s password to `password`.
     * @param password the password, or %NULL
     */
    setPassword(password: string | null): void
    /**
     * Sets `uri'`s path to `path,` which is assumed to have been
     * appropriately %<!-- -->-encoded. In particular, this means that if
     * you want to include a literal percent sign the path, you must write
     * it as "%<!-- -->25". That being said, if `path` contains an
     * unencoded '?' or '#' character, it will get encoded, since
     * otherwise converting `uri` to a string and then back to a #IdeUri
     * again would give a different result.
     * @param path the (%<!-- -->-encoded) path
     */
    setPath(path: string | null): void
    /**
     * Sets `uri'`s port to `port`. If `port` is 0, it will not be output
     * when calling ide_uri_to_string().
     * @param port the port, or %0
     */
    setPort(port: number): void
    /**
     * Sets `uri'`s query to `query,` which is assumed to have been
     * %<!-- -->-encoded by the caller. See ide_uri_set_path() for more
     * details.
     * @param query the (%<!-- -->-encoded) query
     */
    setQuery(query: string | null): void
    /**
     * Sets `uri'`s scheme to `scheme`.
     * @param scheme the URI scheme
     */
    setScheme(scheme: string | null): void
    /**
     * Sets `uri'`s user to `user`. See ide_uri_get_user() for a description
     * of how this interacts with various parsing flags.
     * @param user the username, or %NULL
     */
    setUser(user: string | null): void
    /**
     * Creates a #GFile that represents the resource `uri`.
     * @returns A #GFile or %NULL upon failure.
     */
    toFile(): Gio.File | null
    /**
     * Returns a string representing `uri`.
     * @param flags flags describing how to convert `uri`
     * @returns a string representing @uri, which the caller must free.
     */
    toString(flags: UriToStringFlags): string | null
    /**
     * Decrements the reference count of `uri` by 1. If the reference count
     * reaches zero, the structure will be freed.
     */
    unref(): void
}

/**
 * FIXME
 * @record 
 */
class Uri {

    // Own properties of Ide-1.0.Ide.Uri

    static name: string

    // Constructors of Ide-1.0.Ide.Uri

    /**
     * Parses `uri_string` according to `flags`. If the result is not a
     * valid absolute URI, it will be discarded, and an error returned.
     * @constructor 
     * @param uriString a string representing an absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    constructor(uriString: string | null, flags: UriParseFlags) 
    /**
     * Parses `uri_string` according to `flags`. If the result is not a
     * valid absolute URI, it will be discarded, and an error returned.
     * @constructor 
     * @param uriString a string representing an absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    static new(uriString: string | null, flags: UriParseFlags): Uri
    /**
     * Creates a new #IdeUri from the uri provided by `file`.
     * @constructor 
     * @param file A #GFile.
     * @returns A newly allcoated #IdeUri.
     */
    static newFromFile(file: Gio.File): Uri
    static build(scheme: string | null, userinfo: string | null, host: string | null, port: string | null, path: string | null, query: string | null, fragment: string | null): string | null
    static errorQuark(): GLib.Quark
    /**
     * Utility function for parsing "network" URIs. This extracts just the
     * scheme, host, and port from `uri_string`. All three out parameters
     * are mandatory.
     * @param uriString a string containing a network URI
     * @param flags flags for parsing `uri_string`
     * @returns %TRUE on success, %FALSE on failure.
     */
    static parseHost(uriString: string | null, flags: UriParseFlags): [ /* returnType */ boolean, /* scheme */ string | null, /* host */ string | null, /* port */ number ]
    /**
     * Many URI schemes include one or more attribute/value pairs
     * as part of the URI value. This method can be used to parse them
     * into a hash table.
     * 
     * The `params` string is assumed to still be %<!-- -->-encoded, but
     * the returned values will be fully decoded. (Thus it is possible
     * that the returned values may contain '=' or `separator,` if the
     * value was encoded in the input.) Invalid %<!-- -->-encoding is
     * treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
     * (However, if `params` is the path or query string from a #IdeUri that
     * was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
     * does not contain any invalid encoding.)
     * @param params a string containing "attribute=value" parameters
     * @param length the length of `params,` or -1 if it is NUL-terminated
     * @param separator the separator character between parameters.   (usually ';', but sometimes '&')
     * @param caseInsensitive whether to match parameter names case-insensitively
     * @returns a hash table of attribute/value pairs. Both names and values will be fully-decoded. If @params cannot be parsed (eg, it contains two @separator characters in a row), then %NULL is returned.
     */
    static parseParams(params: string | null, length: number, separator: number, caseInsensitive: boolean): GLib.HashTable
    /**
     * Parses `uri_string` more-or-less according to the generic grammar of
     * RFC 3986 ("more" if `strict` is %TRUE, "less" if %FALSE), and
     * outputs the pieces into the provided variables. This is a low-level
     * method that does not do any pre- or post-processing of `uri_string,`
     * and is "garbage in, garbage out"; it just splits `uri_string` into
     * pieces at the appropriate punctuation characters (consuming
     * delimiters as appropriate), and returns the pieces. Components that
     * are not present in `uri_string` will be set to %NULL (but note that
     * the path is always present, though it may be an empty string).
     * @param uriString a string containing a relative or absolute URI
     * @param strict whether to parse `uri_string` strictly
     */
    static split(uriString: string | null, strict: boolean): [ /* scheme */ string | null, /* userinfo */ string | null, /* host */ string | null, /* port */ string | null, /* path */ string | null, /* query */ string | null, /* fragment */ string | null ]
}

interface VcsConfigInterface {

    // Own fields of Ide-1.0.Ide.VcsConfigInterface

    parent: GObject.TypeInterface
    getConfig: (self: VcsConfig, type: VcsConfigType, value: any) => void
    setConfig: (self: VcsConfig, type: VcsConfigType, value: any) => void
}

abstract class VcsConfigInterface {

    // Own properties of Ide-1.0.Ide.VcsConfigInterface

    static name: string
}

interface VcsInitializerInterface {

    // Own fields of Ide-1.0.Ide.VcsInitializerInterface

    parent: GObject.TypeInterface
    getTitle: (self: VcsInitializer) => string | null
    initializeAsync: (self: VcsInitializer, file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    initializeFinish: (self: VcsInitializer, result: Gio.AsyncResult) => boolean
}

abstract class VcsInitializerInterface {

    // Own properties of Ide-1.0.Ide.VcsInitializerInterface

    static name: string
}

interface VcsInterface {

    // Own fields of Ide-1.0.Ide.VcsInterface

    parentInterface: GObject.TypeInterface
    getWorkingDirectory: (self: Vcs) => Gio.File
    getBufferChangeMonitor: (self: Vcs, buffer: Buffer) => BufferChangeMonitor | null
    isIgnored: (self: Vcs, file: Gio.File) => boolean
    getPriority: (self: Vcs) => number
    changed: (self: Vcs) => void
    getConfig: (self: Vcs) => VcsConfig | null
    getBranchName: (self: Vcs) => string | null
}

abstract class VcsInterface {

    // Own properties of Ide-1.0.Ide.VcsInterface

    static name: string
}

interface VcsUri {

    // Owm methods of Ide-1.0.Ide.VcsUri

    getHost(): string | null
    getPath(): string | null
    getPort(): number
    getScheme(): string | null
    getUser(): string | null
    ref(): VcsUri
    setHost(host: string | null): void
    setPath(path: string | null): void
    setPort(port: number): void
    setScheme(scheme: string | null): void
    setUser(user: string | null): void
    toString(): string | null
    unref(): void
}

class VcsUri {

    // Own properties of Ide-1.0.Ide.VcsUri

    static name: string

    // Constructors of Ide-1.0.Ide.VcsUri

    constructor(uri: string | null) 
    static new(uri: string | null): VcsUri
    static isValid(uriString: string | null): boolean
}

interface WorkbenchAddinInterface {

    // Own fields of Ide-1.0.Ide.WorkbenchAddinInterface

    parent: GObject.TypeInterface
    getId: (self: WorkbenchAddin) => string | null
    load: (self: WorkbenchAddin, workbench: Workbench) => void
    unload: (self: WorkbenchAddin, workbench: Workbench) => void
    canOpen: (self: WorkbenchAddin, uri: Uri, contentType: string | null) => [ /* returnType */ boolean, /* priority */ number ]
    openAsync: (self: WorkbenchAddin, uri: Uri, contentType: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    openFinish: (self: WorkbenchAddin, result: Gio.AsyncResult) => boolean
    perspectiveSet: (self: WorkbenchAddin, perspective: Perspective) => void
}

abstract class WorkbenchAddinInterface {

    // Own properties of Ide-1.0.Ide.WorkbenchAddinInterface

    static name: string
}

interface WorkbenchClass {

    // Own fields of Ide-1.0.Ide.WorkbenchClass

    parentClass: Gtk.ApplicationWindowClass
}

abstract class WorkbenchClass {

    // Own properties of Ide-1.0.Ide.WorkbenchClass

    static name: string
}

interface WorkbenchHeaderBarClass {

    // Own fields of Ide-1.0.Ide.WorkbenchHeaderBarClass

    parent: Gtk.HeaderBarClass
    reserved1: any
    reserved2: any
    reserved3: any
    reserved4: any
    reserved5: any
    reserved6: any
    reserved7: any
    reserved8: any
}

abstract class WorkbenchHeaderBarClass {

    // Own properties of Ide-1.0.Ide.WorkbenchHeaderBarClass

    static name: string
}

interface WorkbenchMessageClass {

    // Own fields of Ide-1.0.Ide.WorkbenchMessageClass

    parentClass: Gtk.InfoBarClass
}

abstract class WorkbenchMessageClass {

    // Own properties of Ide-1.0.Ide.WorkbenchMessageClass

    static name: string
}

interface WorkerInterface {

    // Own fields of Ide-1.0.Ide.WorkerInterface

    parent: GObject.TypeInterface
    createProxy: (self: Worker, connection: Gio.DBusConnection) => Gio.DBusProxy
    registerService: (self: Worker, connection: Gio.DBusConnection) => void
}

abstract class WorkerInterface {

    // Own properties of Ide-1.0.Ide.WorkerInterface

    static name: string
}

}

export default Ide;